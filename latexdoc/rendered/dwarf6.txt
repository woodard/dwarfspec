



DWARF Debugging Information Format


                          Version 6



 DWARF Debugging Information Format


                         Committee



             http://www.dwarfstd.org



                          July 15 2024



              ***WORKING DRAFT***




                               Copyright


                 DWARF Debugging Information Format, Version 6

        Copyright # 2010, 2017, 2024 DWARF Debugging Information Format
                                 Committee



     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3; with
     no Invariant Sections, with no Front-CoverTexts, and with no Back-Cover
     Texts.

     A copy of the license is included in the section entitled iGNU Free
     Documentation License.j

     This document is based in part on the DWARF Debugging Information
     Format, Version 2, which contained the following notice:

          UNIX International


          Programming Languages SIG


          Revision: 2.0.0 (July 27, 1993)


          Copyright # 1992, 1993 UNIX International, Inc.


          Permission to use, copy, modify, and distribute this documentation for
          any purpose and without fee is hereby granted, provided that the
          above copyright notice appears in all copies and that both that
          copyright notice and this permission notice appear in supporting
          documentation, and that the name UNIX International not be used in
          advertising or publicity pertaining to distribution of the software
          without specioc, written prior permission. UNIX International makes
          no representations about the suitability of this documentation for any
          purpose. It is provided ias isj without express or implied warranty.

     This document is further based on the DWARF Debugging Information
     Format, Version 3 and Version 4, which are subject to the GNU Free
     Documentation License.

     Trademarks:

        # Intel386 is a trademark of Intel Corporation.


        # Java is a trademark of Oracle, Inc.


        # All other trademarks found herein are property of their respective
          owners.



July 15 2024               ***WORKING DRAFT***                        Page ii




                               Foreword



     The DWARF Debugging Information Format Committee was originally
     organized in 1988 as the Programming Languages Special Interest Group
     (PLSIG) of Unix International, Inc., a trade group organized to promote Un*
 *ix
     System V Release 4 (SVR4).

     PLSIG drafted a standard for DWARF Version 1, compatible with the
     DWARF debugging format used at the time by SVR4 compilers and
     debuggers from AT&T. This was published as Revision 1.1.0 on October 6,
     1992. PLSIG also designed the DWARF Version 2 format, which followed the
     same general philosophy as Version 1, but with signiocant new functionality
     and a more compact, though incompatible, encoding. An industry review
     draft of DWARF Version 2 was published as Revision 2.0.0 on July 27, 1993.

     Unix International dissolved shortly after the draft of Version 2 was rele*
 *ased;
     no industry comments were received or addressed, and no onal standard
     was released. The committee mailing list was hosted by OpenGroup
     (formerly XOpen).

     The Committee reorganized in October, 1999, and met for the next several
     years to address issues that had been noted with DWARF Version 2 as well
     as to add a number of new features. In mid-2003, the Committee became a
     workgroup under the Free Standards Group (FSG), an industry consortium
     chartered to promote open standards. DWARF Version 3 was published on
     December 20, 2005, following industry review and comment.

     The DWARF Committee withdrew from the Free Standards Group in
     February, 2007, when FSG merged with the Open Source Development Labs
     to form The Linux Foundation, more narrowly focused on promoting Linux.
     The DWARF Committee has been independent since that time.

     It is the intention of the DWARF Committee that migrating from an earlier
     version of the DWARF standard to the current version should be
     straightforward and easily accomplished. Almost all constructs from
     DWARF Version 2 onward have been retained unchanged in DWARF
     Version 6, although a few have been compatibly superseded by improved
     constructs which are more compact and/or more expressive.

     This document was created using the LATEX document preparation system.



July 15 2024               ***WORKING DRAFT***                        Page iii




     The DWARF Debugging Information Format Committee

     The DWARF Debugging Information Format Committee is open to compiler
     and debugger developers who have experience with source language
     debugging and debugging formats, and have an interest in promoting or
     extending the DWARF debugging format.

     DWARF Committee members contributing to Version 6 are:

         Todd Allen                              Concurrent Real-Time
         Pedro Alves                             Pedro Alves Services
         David Anderson, Associate Editor
         David Blaikie                           Google
         Ron Brender, Editor
         Andrew Cagney
         Eric Christopher                        Google
         Cary Coutant, Chair (from March 2023)
         John DelSignore                         Perforce
         Jonas Devlieghere                       Apple
         Michael Eager, past Chair (to February 2023)Eager Consulting
         Jini Susan George                       AMD
         Tommy Hooener                           Untether AI
         Jakub Jel#nek                           Red Hat
         Simon Marchi                            EOEciOS
         Jason Merrill                           Red Hat
         Markus Metzger                          Intel
         Jeremy Morse                            Sony
         Adrian Prantl                           Apple
         Haoz Abid Qadeer                        Mentor Graphics
         Paul Robinson                           Sony
         Tom Russell                             Sony
         F#ang-rui S#ng                          Google
         Caroline Tice                           Google
         Tom Tromey                              Adacore
         Tony Tye                                AMD
         Keith Walker                            Arm
         Mark Wielaard                           Red Hat
         Brock Wyma                              Intel
         Jian Xu                                 IBM
         Zoran Zaric                             AMD

     For further information about DWARF or the DWARF Committee, see:

         http://www.dwarfstd.org



July 15 2024               ***WORKING DRAFT***                        Page iv




     How to Use This Document

     This document is intended to be usable in online as well as traditional pa*
 *per
     forms. Both online and paper forms include page numbers, a Table of
     Contents, a List of Figures, a List of Tables and an Index.

     Text in normal font describes required aspects of the DWARF format. Text in
     italics is explanatory or supplementary material, and not part of the form*
 *at
     deonition itself.

     Online Form

     In the online form, blue text is used to indicate hyperlinks. Most hyperli*
 *nks
     link to the deonition of a term or construct, or to a cited Section or Fig*
 *ure.
     However, attributes in particular are often used in more than one way or
     context so that there is no single deonition; for attributes, hyperlinks l*
 *ink to
     the introductory table of all attributes which in turn contains hyperlinks*
 * for
     the multiple usages.

     The occurrence of a DWARF name in its deonition (or one of its deonitions
     in the case of some attributes) is shown in red text. Other occurrences of*
 * the
     same name in the same or possibly following paragraphs are generally in
     normal text color.)

     The Table of Contents, List of Figures, List of Tables and Index provide
     hyperlinks to the respective items and places.

     Paper Form

     In the traditional paper form, the appearance of the hyperlinks and
     deonitions on a page of paper does not distract the eye because the blue
     hyperlinks and the color used for deonitions are typically imaged by black
     and white printers in a manner nearly indistinguishable from other text.
     (Hyperlinks are not underlined for this same reason.)



July 15 2024               ***WORKING DRAFT***                        Page v




July 15 2024               ***WORKING DRAFT***                        Page vi
                                 CONTENTS



Contents



Contents                                                                 vii


List of Figures                                                            xii


List of Tables                                                            xvi


1  Introduction                                                            1

   1.1  Purpose and Scope  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. .   1

   1.2  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .   2

   1.3  Objectives and Rationale  . . . . . . . . . . . . . . . . . . . . . . .*
 * . .   2

   1.4  Changes from Version 5 to Version 6  . . . . . . . . . . . . . . . . . *
 *.   8

   1.5  Changes from Version 4 to Version 5  . . . . . . . . . . . . . . . . . *
 *.   8

   1.6  Changes from Version 3 to Version 4  . . . . . . . . . . . . . . . . . *
 *.  10

   1.7  Changes from Version 2 to Version 3  . . . . . . . . . . . . . . . . . *
 *.  11

   1.8  Changes from Version 1 to Version 2  . . . . . . . . . . . . . . . . . *
 *.  12


2  General Description                                                   15

   2.1  The Debugging Information Entry (DIE)  . . . . . . . . . . . . . . . . *
 * 15

   2.2  Attribute Types   . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  17

   2.3  Relationship of Debugging Information Entries  . . . . . . . . . . . . *
 * 25

   2.4  Target Addresses   . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  26

   2.5  DWARF Expressions  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *.  26

   2.6  Location Descriptions . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . .  39

   2.7  Types of Program Entities   . . . . . . . . . . . . . . . . . . . . . .*
 * . .  48

   2.8  Accessibility of Declarations  . . . . . . . . . . . . . . . . . . . . *
 *. . .  48

   2.9  Visibility of Declarations  . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  48

   2.10 Virtuality of Declarations . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  49

   2.11 Artiocial Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  49

   2.12 Address Classes  . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  50

   2.13 Non-Deoning Declarations and Completions  . . . . . . . . . . . . .  50

   2.14 Declaration Coordinates  . . . . . . . . . . . . . . . . . . . . . . . *
 *. .  51



July 15 2024               ***WORKING DRAFT***                       Page vii
                                 CONTENTS



   2.15 Identioer Names . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . .  52

   2.16 Data Locations and DWARF Procedures  . . . . . . . . . . . . . . . .  52

   2.17 Code Addresses, Ranges and Base Addresses  . . . . . . . . . . . . .  53

   2.18 Entry Address  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  57

   2.19 Static and Dynamic Values of Attributes  . . . . . . . . . . . . . . . *
 *.  57

   2.20 Entity Descriptions  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  58

   2.21 Byte and Bit Sizes  . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  58

   2.22 Linkage Names  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. .  58

   2.23 Template Parameters  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. .  59

   2.24 Alignment  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . .  60


3  Program Scope Entries                                                 61

   3.1  Unit Entries   . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  61

   3.2  Module, Namespace and Importing Entries  . . . . . . . . . . . . . .  73

   3.3  Subroutine and Entry Point Entries  . . . . . . . . . . . . . . . . . .*
 * .  78

   3.4  Call Site Entries and Parameters . . . . . . . . . . . . . . . . . . . *
 *. .  93

   3.5  Lexical Block Entries   . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  96

   3.6  Label Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  97

   3.7  With Statement Entries  . . . . . . . . . . . . . . . . . . . . . . . .*
 * . .  97

   3.8  Try and Catch Block Entries  . . . . . . . . . . . . . . . . . . . . . *
 *. .  98

   3.9  Declarations with Reduced Scope  . . . . . . . . . . . . . . . . . . . *
 *.  99


4  Data Object and Object List                                           101

   4.1  Data Object Entries  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 101

   4.2  Common Block Entries  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 104

   4.3  Namelist Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 105


5  Type Entries                                                          106

   5.1  Base Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 106

   5.2  Unspecioed Type Entries  . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 112

   5.3  Type Modioer Entries  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 113

   5.4  Typedef Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 115

   5.5  Array Type Entries   . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 115

   5.6  Coarray Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 117

   5.7  Structure, Union, Class and Interface Type Entries  . . . . . . . . . .*
 * 118

   5.8  Condition Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 129

   5.9  Enumeration Type Entries  . . . . . . . . . . . . . . . . . . . . . . .*
 * . 129

   5.10 Subroutine Type Entries   . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 131

   5.11 String Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 132

   5.12 Set Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 133

   5.13 Subrange Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 133



July 15 2024               ***WORKING DRAFT***                       Page viii
                                 CONTENTS



   5.14 Pointer to Member Type Entries  . . . . . . . . . . . . . . . . . . . .*
 * . 135

   5.15 File Type Entries  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . . 136

   5.16 Dynamic Type Entries   . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 136

   5.17 Template Alias Entries  . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 137

   5.18 Dynamic Properties of Types . . . . . . . . . . . . . . . . . . . . . .*
 * . 137


6  Other Debugging Information                                        140

   6.1  Accelerated Access  . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 140

   6.2  Line Number Information  . . . . . . . . . . . . . . . . . . . . . . . *
 *. 154

   6.3  Macro Information   . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 171

   6.4  Call Frame Information . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 178


7  Data Representation                                                  190

   7.1  Extensibility  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . . 190

   7.2  Reserved Values  . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 191

   7.3  Relocatable, Split, Executable, Shared, Package and Supplementary

        Object Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . . 192

   7.4  32-Bit and 64-Bit DWARF Formats   . . . . . . . . . . . . . . . . . . .*
 * 203

   7.5  Format of Debugging Information   . . . . . . . . . . . . . . . . . . .*
 * 207

   7.6  Variable Length Data  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 230

   7.7  DWARF Expressions and Location Descriptions   . . . . . . . . . . . 231

   7.8  Base Type Attribute Encodings   . . . . . . . . . . . . . . . . . . . .*
 * . 236

   7.9  Accessibility Codes  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 238

   7.10 Visibility Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 238

   7.11 Virtuality Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 239

   7.12 Source Languages  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 239

   7.13 Address Class Encodings . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 241

   7.14 Identioer Case  . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 242

   7.15 Calling Convention Encodings   . . . . . . . . . . . . . . . . . . . . *
 *. 242

   7.16 Inline Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 243

   7.17 Array Ordering  . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 243

   7.18 Discriminant Lists  . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 243

   7.19 Name Index Table  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 244

   7.20 Defaulted Member Encodings  . . . . . . . . . . . . . . . . . . . . . .*
 * 244

   7.21 Address Range Table  . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 245

   7.22 Line Number Information  . . . . . . . . . . . . . . . . . . . . . . . *
 *. 246

   7.23 Macro Information   . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 248

   7.24 Call Frame Information . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 250

   7.25 Range List Entries for Non-contiguous Address Ranges  . . . . . . . 251

   7.26 String Ooesets Table  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 252

   7.27 Address Table  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 253



July 15 2024               ***WORKING DRAFT***                        Page ix
                                 CONTENTS



   7.28 Range List Table  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 254

   7.29 Value List and Location List Table . . . . . . . . . . . . . . . . . . *
 *. . 255

   7.30 Dependencies and Constraints . . . . . . . . . . . . . . . . . . . . . *
 *. 256

   7.31 Integer Representation Names . . . . . . . . . . . . . . . . . . . . . *
 *. 257

   7.32 Type Signature Computation   . . . . . . . . . . . . . . . . . . . . . *
 *. 257

   7.33 Name Table Hash Function   . . . . . . . . . . . . . . . . . . . . . . *
 *. 261

   7.34 Contiguous Tables . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 262


A  Attributes by Tag (Informative)                                        264


B  Debug Section Relationships (Informative)                            286

   B.1  Normal DWARF Section Relationships  . . . . . . . . . . . . . . . . . 2*
 *86

   B.2  Split DWARF Section Relationships . . . . . . . . . . . . . . . . . . .*
 * 287


C  Encoding/Decoding (Informative)                                     296


D  Examples (Informative)                                               300

   D.1  General Description Examples . . . . . . . . . . . . . . . . . . . . . *
 *. 300

   D.2  Aggregate Examples   . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 306

   D.3  Namespace Examples . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. 333

   D.4  Member Function Examples  . . . . . . . . . . . . . . . . . . . . . . .*
 * 337

   D.5  Line Number Examples . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. 341

   D.6  Call Frame Information Example  . . . . . . . . . . . . . . . . . . . .*
 * 345

   D.7  Inlining Examples  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 349

   D.8  Constant Expression Example  . . . . . . . . . . . . . . . . . . . . . *
 *. 358

   D.9  Unicode Character Example  . . . . . . . . . . . . . . . . . . . . . . *
 *. 360

   D.10 Type-Safe Enumeration Example  . . . . . . . . . . . . . . . . . . . . *
 *361

   D.11 Template Examples  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 362

   D.12 Template Alias Examples . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 364

   D.13 Implicit Pointer Examples  . . . . . . . . . . . . . . . . . . . . . . *
 *. . 367

   D.14 String Type Examples  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 371

   D.15 Call Site Examples . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 373

   D.16 Macro Example  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 381

   D.17 Parameter Default Value Examples  . . . . . . . . . . . . . . . . . . .*
 * 385

   D.18 SIMD Lane Example   . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 387


E  Compression (Informative)                                            390

   E.1  Using Compilation Units  . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 390

   E.2  Using Type Units  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 400

   E.3  Summary of Compression Techniques  . . . . . . . . . . . . . . . . . 413


F  Split DWARF Object Files (Informative)                               416



July 15 2024               ***WORKING DRAFT***                         Page x
                                 CONTENTS



   F.1  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 416

   F.2  Split DWARF Object File Example   . . . . . . . . . . . . . . . . . . .*
 * 421

   F.3  DWARF Package File Example   . . . . . . . . . . . . . . . . . . . . . *
 *434


G  Section Version Numbers (Informative)                                440


H  GNU Free Documentation License                                     444

   H.1  APPLICABILITY AND DEFINITIONS  . . . . . . . . . . . . . . . . . 445

   H.2  VERBATIM COPYING  . . . . . . . . . . . . . . . . . . . . . . . . . . 4*
 *46

   H.3  COPYING IN QUANTITY  . . . . . . . . . . . . . . . . . . . . . . . . 447

   H.4  MODIFICATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * 448

   H.5  COMBINING DOCUMENTS  . . . . . . . . . . . . . . . . . . . . . . 450

   H.6  COLLECTIONS OF DOCUMENTS  . . . . . . . . . . . . . . . . . . . 450

   H.7  AGGREGATION WITH INDEPENDENT WORKS  . . . . . . . . . . 450

   H.8  TRANSLATION  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. 451

   H.9  TERMINATION  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. 451

   H.10 FUTURE REVISIONS OF THIS LICENSE  . . . . . . . . . . . . . . . 452

   H.11 RELICENSING   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 452


Index                                                                   456



July 15 2024               ***WORKING DRAFT***                        Page xi
                              LIST OF FIGURES



List of Figures



5.1  Type modioer examples   . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 114


6.1  Name Index Layout  . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 144


7.1  Name Table Hash Function Deonition  . . . . . . . . . . . . . . . . . . . *
 *262


B.1  Debug section relationships  . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 288

B.2  Split DWARF section relationships  . . . . . . . . . . . . . . . . . . . .*
 * . 292


C.1  Algorithm to encode an unsigned integer  . . . . . . . . . . . . . . . . .*
 * 296

C.2  Algorithm to encode a signed integer . . . . . . . . . . . . . . . . . . .*
 * . 297

C.3  Algorithm to decode an unsigned LEB128 integer   . . . . . . . . . . . . 2*
 *97

C.4  Algorithm to decode a signed LEB128 integer  . . . . . . . . . . . . . . .*
 * 298


D.1  Compilation units and abbreviations table  . . . . . . . . . . . . . . . .*
 * . 301

D.2  Fortran array example: source fragment  . . . . . . . . . . . . . . . . . *
 *. 306

D.3  Fortran array example: descriptor representation  . . . . . . . . . . . . *
 *. 307

D.4  Fortran array example: DWARF description  . . . . . . . . . . . . . . . . *
 *310

D.5  Fortran scalar coarray: source fragment  . . . . . . . . . . . . . . . . .*
 * . 313

D.6  Fortran scalar coarray: DWARF description  . . . . . . . . . . . . . . . .*
 * 313

D.7  Fortran array coarray: source fragment . . . . . . . . . . . . . . . . . .*
 * . 313

D.8  Fortran array coarray: DWARF description  . . . . . . . . . . . . . . . . *
 *313

D.9  Fortran multidimensional coarray: source fragment  . . . . . . . . . . . 3*
 *14

D.10 Fortran multidimensional coarray: DWARF description  . . . . . . . . . 314

D.11 Declaration of a Fortran 2008 assumed-rank array  . . . . . . . . . . . . *
 *315

D.12 One of many possible layouts for an array descriptor   . . . . . . . . . .*
 * 315

D.13 Sample DWARF for the array descriptor in Figure D.12  . . . . . . . . . 316

D.14 How to interpret the DWARF from Figure D.13  . . . . . . . . . . . . . . 3*
 *17

D.15 Fortran dynamic type example: source  . . . . . . . . . . . . . . . . . . *
 *. 318

D.16 Fortran dynamic type example: DWARF description  . . . . . . . . . . . 319

D.17 Anonymous structure example: source fragment  . . . . . . . . . . . . . 320

D.18 Anonymous structure example: DWARF description . . . . . . . . . . . 320

D.19 Ada example: source fragment   . . . . . . . . . . . . . . . . . . . . . .*
 * . 321



July 15 2024               ***WORKING DRAFT***                       Page xii
                              LIST OF FIGURES



D.20 Ada example: DWARF description  . . . . . . . . . . . . . . . . . . . . . *
 *322

D.21 Packed record example: source fragment   . . . . . . . . . . . . . . . . .*
 * 323

D.22 Packed record example: DWARF description  . . . . . . . . . . . . . . . 323

D.23 Big-endian data bit ooesets  . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 326

D.24 Little-endian data bit ooesets  . . . . . . . . . . . . . . . . . . . . . *
 *. . . . 326

D.25 Ada biased bit-oeld example: Ada source  . . . . . . . . . . . . . . . . .*
 * 327

D.26 Ada biased bit-oeld example: DWARF description  . . . . . . . . . . . . 327

D.27 Pascal variant record example: source  . . . . . . . . . . . . . . . . . .*
 * . 328

D.28 Pascal variant record example: DWARF description  . . . . . . . . . . . 329

D.29 Ada variant record example: source   . . . . . . . . . . . . . . . . . . .*
 * . 330

D.30 Ada variant record example: DWARF description   . . . . . . . . . . . . 331

D.31 Rust enum example: source  . . . . . . . . . . . . . . . . . . . . . . . .*
 * . 331

D.32 Rust enum example: DWARF description  . . . . . . . . . . . . . . . . . 332

D.33 Namespace example #1: source fragment   . . . . . . . . . . . . . . . . . *
 *333

D.34 Namespace example #1: DWARF description  . . . . . . . . . . . . . . . 334

D.35 Namespace example #2: source fragment   . . . . . . . . . . . . . . . . . *
 *336

D.36 Namespace example #2: DWARF description  . . . . . . . . . . . . . . . 336

D.37 Member function example: source fragment . . . . . . . . . . . . . . . . 3*
 *37

D.38 Member function example: DWARF description  . . . . . . . . . . . . . 337

D.39 Reference- and rvalue-reference-qualiocation example: source fragment 339

D.40 Reference- and rvalue-reference-qualiocation example: DWARF description

        . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . . . 340

D.41 Example line number program header  . . . . . . . . . . . . . . . . . . . *
 *341

D.42 Example line number special opcode mapping  . . . . . . . . . . . . . . 342

D.43 Line number program example: machine code  . . . . . . . . . . . . . . 343

D.44 Call frame information example: machine code fragments   . . . . . . . 346

D.45 Inlining examples: pseudo-source fragmment . . . . . . . . . . . . . . . 3*
 *49

D.46 Inlining example #1: abstract instance  . . . . . . . . . . . . . . . . . *
 *. . 351

D.47 Inlining example #1: concrete instance  . . . . . . . . . . . . . . . . . *
 *. . 352

D.48 Inlining example #2: abstract instance  . . . . . . . . . . . . . . . . . *
 *. . 354

D.49 Inlining example #2: concrete instance  . . . . . . . . . . . . . . . . . *
 *. . 356

D.50 Inlining example #3: abstract instance  . . . . . . . . . . . . . . . . . *
 *. . 357

D.51 Inlining example #3: concrete instance  . . . . . . . . . . . . . . . . . *
 *. . 358

D.52 Constant expressions: C++ source . . . . . . . . . . . . . . . . . . . . .*
 * . 358

D.53 Constant expressions: DWARF description   . . . . . . . . . . . . . . . . *
 *359

D.54 Unicode character example: source  . . . . . . . . . . . . . . . . . . . .*
 * . 360

D.55 Unicode character example: DWARF description  . . . . . . . . . . . . . 360

D.56 Type-safe enumeration example: source  . . . . . . . . . . . . . . . . . .*
 * 361

D.57 Type-safe enumeration example: DWARF description  . . . . . . . . . . 361

D.58 C++ template example #1: source  . . . . . . . . . . . . . . . . . . . . .*
 * . 362

D.59 C++ template example #1: DWARF description  . . . . . . . . . . . . . . 362



July 15 2024               ***WORKING DRAFT***                       Page xiii
                              LIST OF FIGURES



D.60 C++ template example #2: source  . . . . . . . . . . . . . . . . . . . . .*
 * . 363

D.61 C++ template example #2: DWARF description  . . . . . . . . . . . . . . 363

D.62 C++ template alias example #1: source  . . . . . . . . . . . . . . . . . .*
 * . 364

D.63 C++ template alias example #1: DWARF description  . . . . . . . . . . . 365

D.64 C++ template alias example #2: source  . . . . . . . . . . . . . . . . . .*
 * . 365

D.65 C++ template alias example #2: DWARF description  . . . . . . . . . . . 366

D.66 C implicit pointer example #1: source   . . . . . . . . . . . . . . . . . *
 *. . 367

D.67 C implicit pointer example #1: DWARF description   . . . . . . . . . . . 3*
 *68

D.68 C implicit pointer example #2: source   . . . . . . . . . . . . . . . . . *
 *. . 369

D.69 C implicit pointer example #2: DWARF description   . . . . . . . . . . . 3*
 *70

D.70 String type example: source  . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 371

D.71 String type example: DWARF representation  . . . . . . . . . . . . . . . 3*
 *72

D.72 Call Site Example #1: Source  . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 373

D.73 Call Site Example #1: Code . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 374

D.74 Call site example #1: DWARF encoding   . . . . . . . . . . . . . . . . . .*
 * 376

D.75 Call site example #2: source  . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 378

D.76 Call site example #2: code  . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 379

D.77 Call site example #2: DWARF encoding   . . . . . . . . . . . . . . . . . .*
 * 380

D.78 Macro example: source  . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 381

D.79 Macro example: simple DWARF encoding  . . . . . . . . . . . . . . . . . 382

D.80 Macro example: sharable DWARF encoding  . . . . . . . . . . . . . . . . 383

D.81 Default value example #1: C++ source  . . . . . . . . . . . . . . . . . . *
 *. 385

D.82 Default value example #1: DWARF encoding  . . . . . . . . . . . . . . . 385

D.83 Default value example #2: Ada source  . . . . . . . . . . . . . . . . . . *
 *. 386

D.84 Default value example #2: DWARF encoding  . . . . . . . . . . . . . . . 386

D.85 SIMD Lane Example: C OpenMP Source  . . . . . . . . . . . . . . . . . . 387

D.86 SIMD Lane Example: Pseudo-Assembly Code   . . . . . . . . . . . . . . 388

D.87 SIMD Lane Example: DWARF Encoding  . . . . . . . . . . . . . . . . . . 389


E.1  Duplicate elimination example #1: C++ Source  . . . . . . . . . . . . . . *
 *397

E.2  Duplicate elimination example #1: DWARF section group . . . . . . . . 397

E.3  Duplicate elimination example #1: primary compilation unit  . . . . . . 398

E.4  Duplicate elimination example #2: Fortran source   . . . . . . . . . . . .*
 * 398

E.5  Duplicate elimination example #2: DWARF section group . . . . . . . . 399

E.6  Duplicate elimination example #2: primary unit   . . . . . . . . . . . . .*
 * 400

E.7  Duplicate elimination example #2: companion source   . . . . . . . . . . 4*
 *00

E.8  Duplicate elimination example #2: companion DWARF   . . . . . . . . . 401

E.9  Type signature examples: C++ source   . . . . . . . . . . . . . . . . . . *
 *. 402

E.10 Type signature computation #1: DWARF representation  . . . . . . . . . 403

E.11 Type signature computation #1: AEattened byte stream  . . . . . . . . . . *
 *404

E.12 Type signature computation #2: DWARF representation  . . . . . . . . . 405



July 15 2024               ***WORKING DRAFT***                       Page xiv
                              LIST OF FIGURES



E.13 Type signature example #2: AEattened byte stream . . . . . . . . . . . . .*
 * 407

E.14 Type signature example usage  . . . . . . . . . . . . . . . . . . . . . . *
 *. . 410

E.15 Type signature computation grammar  . . . . . . . . . . . . . . . . . . . *
 *411

E.16 Completing declaration of a member function: DWARF encoding  . . . 412


F.1  Split object example: source fragment #1  . . . . . . . . . . . . . . . . *
 *. . 421

F.2  Split object example: source fragment #2  . . . . . . . . . . . . . . . . *
 *. . 422

F.3  Split object example: source fragment #3  . . . . . . . . . . . . . . . . *
 *. . 423

F.4  Split object example: skeleton DWARF description  . . . . . . . . . . . . *
 *424

F.5  Split object example: executable ole DWARF excerpts  . . . . . . . . . . 4*
 *26

F.6  Split object example: demo1.dwo excerpts . . . . . . . . . . . . . . . . .*
 * . 428

F.7  Split object example: demo2.dwo DWARF .debug_info.dwo excerpts  . . 431

F.8  Split object example: demo2.dwo DWARF .debug_loclists.dwo excerpts 433

F.9  Sections and contributions in example package ole demo.dwp  . . . . . . 435

F.10 Example CU index section  . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 437

F.11 Example TU index section  . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . 438



July 15 2024               ***WORKING DRAFT***                       Page xv
                              LIST OF TABLES



List of Tables



2.1  Tag names  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  16

2.2  Attribute names  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  17

2.3  Classes of attribute value  . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  23

2.4  Accessibility codes   . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  48

2.5  Visibility codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . .  49

2.6  Virtuality codes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . .  49


3.1  Language names   . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . .  64

3.2  Version Encoding Schemes  . . . . . . . . . . . . . . . . . . . . . . . . *
 *. .  66

3.3  Identioer case codes . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . .  67

3.4  Calling convention codes for subroutines   . . . . . . . . . . . . . . . .*
 * .  79

3.5  Inline codes   . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . .  86


4.1  Endianity attribute values  . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 104


5.1  Encoding attribute values   . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 108

5.2  Decimal sign attribute values  . . . . . . . . . . . . . . . . . . . . . .*
 * . . 111

5.3  Type modioer tags   . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 113

5.4  Array ordering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 116

5.5  Calling convention codes for types  . . . . . . . . . . . . . . . . . . . *
 *. . 120

5.6  Defaulted attribute names  . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 126

5.7  Discriminant descriptor values   . . . . . . . . . . . . . . . . . . . . .*
 * . . 128


6.1  Index attribute encodings   . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 152

6.3  State machine registers  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 156

6.4  Line number program initial state . . . . . . . . . . . . . . . . . . . . *
 *. . 158


7.1  DWARF package ole section identioer encodings  . . . . . . . . . . . . . 2*
 *01

7.2  Unit header unit type encodings   . . . . . . . . . . . . . . . . . . . . *
 *. . 207

7.3  Tag encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 212

7.4  Child determination encodings  . . . . . . . . . . . . . . . . . . . . . .*
 * . 215

7.5  Attribute encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 216

7.6  Attribute form encodings   . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 228



July 15 2024               ***WORKING DRAFT***                       Page xvi
                              LIST OF TABLES



7.7  Examples of unsigned LEB128 encodings  . . . . . . . . . . . . . . . . . 2*
 *31

7.8  Examples of signed LEB128 encodings  . . . . . . . . . . . . . . . . . . .*
 * 231

7.9  DWARF operation encodings  . . . . . . . . . . . . . . . . . . . . . . . .*
 * 232

7.10 Location list entry encoding values  . . . . . . . . . . . . . . . . . . .*
 * . . 236

7.11 Base type encoding values  . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 236

7.12 Decimal sign encodings   . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 238

7.13 Endianity encodings   . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 238

7.14 Accessibility encodings  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 238

7.15 Visibility encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . . 239

7.16 Virtuality encodings   . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 239

7.17 Language encodings   . . . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 240

7.18 Identioer case encodings  . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 242

7.19 Calling convention encodings  . . . . . . . . . . . . . . . . . . . . . . *
 *. . 242

7.20 Inline encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . . 243

7.21 Ordering encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . . *
 *. . . 243

7.22 Discriminant descriptor encodings  . . . . . . . . . . . . . . . . . . . .*
 * . 243

7.23 Name index attribute encodings . . . . . . . . . . . . . . . . . . . . . .*
 * . 244

7.24 Defaulted attribute encodings  . . . . . . . . . . . . . . . . . . . . . .*
 * . . 244

7.25 Line number standard opcode encodings   . . . . . . . . . . . . . . . . . *
 *246

7.26 Line number extended opcode encodings  . . . . . . . . . . . . . . . . . 2*
 *47

7.27 Line number header entry format encodings   . . . . . . . . . . . . . . . *
 *247

7.28 Macro information entry type encodings . . . . . . . . . . . . . . . . . .*
 * 249

7.29 Call frame instruction encodings  . . . . . . . . . . . . . . . . . . . . *
 *. . 250

7.30 Range list entry encoding values  . . . . . . . . . . . . . . . . . . . . *
 *. . 252

7.31 Integer representation names   . . . . . . . . . . . . . . . . . . . . . .*
 * . . 257

7.32 Attributes used in type signature computation  . . . . . . . . . . . . . .*
 * 258


A.1  Attributes by tag value  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 265


D.2  Line number program example: one encoding   . . . . . . . . . . . . . . 344

D.3  Line number program example: alternate encoding   . . . . . . . . . . . 344

D.4  Call frame information example: conceptual matrix  . . . . . . . . . . . 3*
 *46

D.5  Call frame information example: common information entry encoding  347

D.6  Call frame information example: frame description entry encoding  . . 348


F.1  Unit attributes by unit kind   . . . . . . . . . . . . . . . . . . . . . .*
 * . . . 420


G.1  Section version numbers  . . . . . . . . . . . . . . . . . . . . . . . . .*
 * . . 441



July 15 2024               ***WORKING DRAFT***                      Page xvii
                              LIST OF TABLES



                                (empty page)



July 15 2024               ***WORKING DRAFT***                      Page xviii
                              Change Summary



                       Change Summary



                                    Note
         This change summary is included only in draft versions of this documen*
 *t.



_Date___________Issue_Incorporated_or_Other_Change_____________________________*
 *_____



 2/17/2021      Begin DWARF Version 6. Update front matter.
 3/10/2021      Remove change bars commands that were lingering from V5 (disabl*
 *ed in public
                release). Remove "New in DWARF Version 5" annotations.
 3/11/2021      Issue 180613.1, stop using horizontal space to suppress ligatur*
 *es.
 3/14/2021      Issues 171130.1, 200505.1, 200505.2 and 200505.3, minor editori*
 *al corrections.
 3/23/2021      Issues 200505.4 and 200505.7, editorial corrections. Issue 1612*
 *06.2, add
                non-normative clariocation re DW.OP.piece vs DW.OP.bit.piece.
 4/14/2021      Remove 2005 from Copyright statement (was then the Free Standar*
 *ds Group).
 4/25/2021      Issue 170527.1 re DW.IDX.external for external symbols.
 5/2/2021       Start V6 column in version numbers appendix.
 5/3/2021       Cleanup some table formatting in the LATEX source.
 5/17/2021      Issue 191025.1, DW.OP.bit.piece.
 5/21/2021      Issue 180503.1, usage suggestions for LEB128 padding.
                Issue 170427.2, extending loclists.
 6/17/2021      Issue 200427.1, missing link and related notes for Figure B.1, *
 *and Issue 200519.1,
                missing notes for Figure B.2. Issue 180426.2, add line number e*
 *xtended op
                DW.LNE.padding.
 6/30/2021      180326.1, clarify consistency of DWARF 32/64 format within a CU.
 7/12/2021      210218.1, index entry shows up in PDF.
 8/14/2021      210628.1, clariocation of relative paths in DW.AT.comp.dir. 200*
 *710.1,
                inconsistent description of data representation for the range l*
 *ist table.
 9/28/2021      180625.1, inconsistent initial length descriptions.
                181019.1, inconsistency in DW.AT.import descriptions.
 10/9/2021      171103.1, DW.AT.call.origin should be encoded as reference clas*
 *s.
                180426.1, Add DW.FORM.strp.sup to forms allowed in .debug.line
                vendor-deoned ['producer-deoned' per 231110.2] content descript*
 *ions.
 10/30/2021     200505.4, Augmentation string is null-terminated. See 3/23/2021.
                200505.7, Declarations with reduced scope. See 3/23/2021 and 5/*
 *7/2022.
 11/21/2021     200709.1, DW.AT.rnglists.base in DW.TAG.skeleton.unit
                181205.1, Clarify DW.OP.piece documentation for parts of values*
 * that are
                optimized out.



July 15 2024               ***WORKING DRAFT***                       Page xix
                              Change Summary



_Date___________Issue_Incorporated_or_Other_Change_____________________________*
 *_____



 1/14/2022      200602.1, .debug.macro.dwo refers to .debug.line.dwo? Also, twe*
 *ak some member
                names and aOEliations in the Foreword.
 1/20/2022      210314.1, Eliminate all indeonite antecedents.
 3/12/2022      210113.1, Allow zero-length entries in .debug.aranges.
                200609.1, Reserve an address for "not present".
 3/26/2022      201007.1, Wide registers in location description expressions.
                210310.1, Clarify DW.AT.rnglists.base and DW.FORM.rnglistx in s*
 *plit
                DWARF.
                210429.1, Clarify description of line number extended opcodes.
 4/16/2022      180517.1, Variant parts without a discriminant.
                210622.1, Typo in .debug.rnglists section header description.
 5/7/2022       210208.2, Standardize DW.AT.GNU.numerator and
                DW.AT.GNU.denominator.
                200505.4, Augmentation string. Reverses 10/30/2021.
 5/30/2022      211101.1, Allow 64-bit string ooesets in DWARF-32.
 6/15/2022      210419.1, Split DW.AT.language into DW.AT.language.name and
                DW.AT.language.version.
 7/5/2022       190809.1, Add DW.AT.bias.
 7/17/2022      180201.1, Source text embedding.
 8/6/2022       210713.1, Fix "ole 0".
 8/7/2022       211108.2, Allow non-uniform record formats in the ole name tabl*
 *e.
 8/8/2022       211022.1, Empty range list entry.
                181003.1, Forbid DW.OP.call.ref and DW.FORM.addr.ref in a .dwo *
 *ole.
 8/14/2022      220427.1, Deprecate the DW.AT.segment attribute.
 9/4/2022       181223.1, Add Microsoft SourceLink support.
                211108.2, Rework example in D.5 to illustrate DW.LNCT.source and
                DW.LNCT.URL.
                Review and adjust pagination.
 10/12/2022     211108.2, Further rework of the example in D.5.
 10/22/2022     211102.1, No DW.FORM.strp in .dwo oles.
                141117.1, Arbitrary expressions as formal parameter default val*
 *ues.
 11/7/2022      220212.1, Disambiguate "ending address ooeset in location and r*
 *ange lists.
 11/8/2022      211004.1, Replace DW.MACRO.deone/undeone.sup with sized version*
 *s.
 11/14/2022     220708.1, Remove edge (fo) from Figure B.2.
                220711.1, Name Table index attribute.
                220711.2, Name Table Figure 6.1.
 11/14/2022     211103.1, Call site entries for optimized out functions.
 11/30/2022     Incorporate minor review tweaks.
 12/10/2022 et alAdditional minor review tweaks.
 1/29/2023      210218.2, Generalize complex number support.
                220708.2, .debug.c,tu.index missing/incomplete DWARF64 support.



July 15 2024               ***WORKING DRAFT***                        Page xx
                              Change Summary



_Date___________Issue_Incorporated_or_Other_Change_____________________________*
 *_____



                221031.1, Future-proof text from 211102.1.
                220802.1, Introduce DW.FORM.addr.ooeset paired form.
 4/3/2023       170427.3, Extending loclists with common sublists.
                220713.1, Name Table Figure 6.1.
                Update committee members list and roles.
 6/15/2023      211108.1, Add DW.AT.artiocial for DW.TAG.typedef.
                220824.1, Use uniform encoding of DWARF expressions in CFI inst*
 *ructions.
 6/27/2023      180123,1, Layout of discriminant entries in variant parts.
                181026.3, Don't forbid extensions to the dwp ole.
                221118.1, Name Table 6.1.1.4.8.
                221114.1, DW.FORM.implicit.const and DW.FORM.indirect.
 7/10/2023      230223.1, Tidy up location description descriptions.
                230414.1, Eliminate last use of "location expression".
 8/6/2023       221203.1, Remove suggestion that DW.FORM.sec.ooeset may not be *
 *used for lists
                in split units.
                230103.1, Clarify that DW.CFA.remember.state includes the curre*
 *nt CFA.
 10/24/2023     230120.1, DW.OP.call.ref & DW.OP.implicit.pointer correction.
                230616.1, New form classes for values vs. location descriptions.
                210514.1, Add GPU shading and kernel languages.
                210115.1, DW.lang.code for the Netwide Assembler (NASM).
                230203.1, C# language ID.
                230502.1, New language name Mojo.
 11/14/2023     230808.1, DW.OP.entry.value description.
                230413.1, Tensor types.
 12/3/2023      230329.1, Tables which have a unit.length header oeld must be c*
 *ontiguous.
                230529.1, Bit-precise integer types.
 1/15/2024      231230.1, New language code for Ruby.
                231013.1, Tombstoning TU entries in .debug.names.
                230324.1, Expression operation vendor ['producer' per 231110.2]*
 * extensibility
                opcode.
 2/18/2024      230412.1, Ambiguity in static and dynamic values of attributes.
 3/7/2024       230324.2, Expression operation standard extensibility opcode.
 4/24/2024      230120.4, Add the HIP programming language.
                240202.1, New language name for Move.
                240213.1, New language code for Hylo.
                240422.1, Add version scheme for Swift language.
                230120.4, Add the HIP Programming Language.
                240423.1, Duplicate DW.AT.LNAME 1d.
                240424.1, Add versioning scheme for Fortran.
                240424.2, C standard release dates for DW.AT.language.version, *
 *clarify
                semantics.



July 15 2024               ***WORKING DRAFT***                       Page xxi
                              Change Summary



_Date___________Issue_Incorporated_or_Other_Change_____________________________*
 *_____



                240429.0, Remove all "incomplete support" related indications f*
 *rom Table 3.1
                Language Names.
                240115.1, Add vallist class for list of DWARF expressions retur*
 *ning values.
 5/13/2024      221203.1, Remove suggestion that DW.FORM.sec.ooeset may not be *
 *used for lists
                in split units.
                211206.1, Add lane support for SIMD/SIMT machines.
 6/14/2024      240118.1, Allow padding in all tables.
                231110.2, Change 'vendor' to 'producer' for DWARF extensions.
 7/5/2024       240320.2, Clarify description of line table compression.
 7/9/2024       240616.1, Add language codes for C++23 (no change in this docum*
 *ent).
                240627.1, Add language codes for Odin.
 7/15/2024      Improve indexing of line number state register names.



July 15 2024               ***WORKING DRAFT***                      Page xxii
                              LIST OF TABLES



                                (empty page)



July 15 2024               ***WORKING DRAFT***                      Page xxiii




 1      Chapter 1



 2      Introduction



 3      This document deones a format for describing programs to facilitate use*
 *r source

 4      level debugging. This description can be generated by compilers, assemb*
 *lers and

 5      linkage editors. It can be used by debuggers and other tools. The debug*
 *ging

 6      information format does not favor the design of any compiler or debugge*
 *r.

 7      Instead, the goal is to create a method of communicating an accurate pi*
 *cture of

 8      the source program to any debugger in a form that is extensible to dioe*
 *erent

 9      languages while retaining compatibility.


10      The design of the debugging information format is open-ended, allowing *
 *for the

11      addition of new debugging information to accommodate new languages or

12      debugger capabilities while remaining compatible with other languages or

13      dioeerent debuggers.



14      1.1    Purpose and Scope


15      The debugging information format described in this document is designed*
 * to

16      meet the symbolic, source-level debugging needs of dioeerent languages *
 *in a

17      unioed fashion by requiring language independent debugging information

18      whenever possible. Aspects of individual languages, such as C++ virtual

19      functions or Fortran common blocks, are accommodated by creating attrib*
 *utes

20      that are used only for those languages. This document is believed to co*
 *ver most

21      debugging information needs of Ada, C, C++, COBOL, and Fortran; it also

22      covers the basic needs of various other languages.


23      This document describes DWARF Version 5, the ofth generation of debuggi*
 *ng

24      information based on the DWARF format. DWARF Version 5 extends DWARF

25      Version 4 in a compatible manner.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 1
                                   Chapter 1. Introduction



 1      The intended audience for this document is the developers of both produ*
 *cers

 2      and consumers of debugging information, typically compilers, debuggers *
 *and

 3      other tools that need to interpret a binary program in terms of its ori*
 *ginal source.



 4      1.2    Overview


 5      There are two major pieces to the description of the DWARF format in th*
 *is

 6      document. The orst piece is the informational content of the debugging *
 *entries.

 7      The second piece is the way the debugging information is encoded and

 8      represented in an object ole.


 9      The informational content is described in Chapters 2 through 6. Chapter*
 * 2

10      describes the overall structure of the information and attributes that *
 *are common

11      to many or all of the dioeerent debugging information entries. Chapters*
 * 3, 4 and 5

12      describe the specioc debugging information entries and how they communi*
 *cate

13      the necessary information about the source program to a debugger. Chapt*
 *er 6

14      describes debugging information contained outside of the debugging

15      information entries. The encoding of the DWARF information is presented*
 * in

16      Chapter 7.


17      This organization closely follows that used in the DWARF Version 4 docu*
 *ment.

18      Except where needed to incorporate new material or to correct errors, t*
 *he

19      DWARF Version 4 text is generally reused in this document with little o*
 *r no

20      modiocation.


21      In the following sections, text in normal font describes required aspec*
 *ts of the

22      DWARF format. Text in italics is explanatory or supplementary material,*
 * and not

23      part of the format deonition itself. The several appendices consist onl*
 *y of

24      explanatory or supplementary material, and are not part of the formal d*
 *eonition.



25      1.3    Objectives and Rationale


26      DWARF has had a set of objectives since its inception which have guided*
 * the

27      design and evolution of the debugging format. A discussion of these obj*
 *ectives

28      and the rationale behind them may help with an understanding of the DWA*
 *RF

29      Debugging Format.


30      Although DWARF Version 1 was developed in the late 1980's as a format to

31      support debugging C programs written for AT&T hardware running SVR4,

32      DWARF Version 2 and later has evolved far beyond this origin. One dioee*
 *rence

33      between DWARF and other formats is that the latter are often specioc to*
 * a

34      particular language, architecture, and/or operating system.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 2
                                   Chapter 1. Introduction



 1      1.3.1   Language Independence


 2      DWARF is applicable to a broad range of existing procedural languages a*
 *nd is

 3      designed to be extensible to future languages. These languages may be

 4      considered to be "C-like" but the characteristics of C are not incorpor*
 *ated into

 5      DWARF Version 2 and later, unlike DWARF Version 1 and other debugging

 6      formats. DWARF abstracts concepts as much as possible so that the descr*
 *iption

 7      can be used to describe a program in any language. As an example, the D*
 *WARF

 8      descriptions used to describe C functions, Pascal subroutines, and Fort*
 *ran

 9      subprograms are all the same, with dioeerent attributes used to specify*
 * the

10      dioeerences between these similar programming language features.


11      On occasion, there is a feature which is specioc to one particular lang*
 *uage and

12      which doesn't appear to have more general application. For these, DWARF*
 * has a

13      description designed to meet the language requirements, although, to th*
 *e extent

14      possible, an eoeort is made to generalize the attribute. An example of *
 *this is the

15      DW.TAG.condition debugging information entry, used to describe COBOL le*
 *vel

16      88 conditions, which is described in abstract terms rather than COBOL-s*
 *pecioc

17      terms. Conceivably, this TAG might be used with a dioeerent language wh*
 *ich had

18      similar functionality.



19      1.3.2   Architecture Independence


20      DWARF can be used with a wide range of processor architectures, whether*
 * byte

21      or word oriented, with any word or byte size. DWARF can be used with Von

22      Neumann architectures, using a single address space for both code and d*
 *ata;

23      Harvard architectures, with separate code and data address spaces; and

24      potentially for other architectures such as DSPs with their idiosyncrat*
 *ic memory

25      organizations. DWARF can be used with common register-oriented architec*
 *tures

26      or with stack architectures.


27      DWARF assumes that memory has individual units (words or bytes) which h*
 *ave

28      unique addresses which are ordered. (Identifying aliases is an implemen*
 *tation

29      issue.)



30      1.3.3   Operating System Independence


31      DWARF is widely associated with SVR4 Unix and similar operating systems*
 * like

32      BSD and Linux. DWARF ots well with the section organization of the ELF *
 *object

33      ole format. Nonetheless, DWARF attempts to be independent of either the*
 * OS or

34      the object ole format. There have been implementations of DWARF debuggi*
 *ng

35      data in COFF, Mach-O and other object ole formats.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 3
                                   Chapter 1. Introduction



 1      DWARF assumes that any object ole format will be able to distinguish the

 2      various DWARF data sections in some fashion, preferably by name.


 3      DWARF makes a few assumptions about functionality provided by the

 4      underlying operating system. DWARF data sections can be read sequential*
 *ly and

 5      independently. Each DWARF data section is a sequence of 8-bit bytes, nu*
 *mbered

 6      starting with zero. The presence of ooesets from one DWARF data section*
 * into

 7      other data sections does not imply that the underlying OS must be able *
 *to

 8      position oles randomly; a data section could be read sequentially and i*
 *ndexed

 9      using the ooeset.



10      1.3.4   Compact Data Representation


11      The DWARF description is designed to be a compact ole-oriented represen*
 *tation.


12      There are several encodings which achieve this goal, such as the TAG and

13      attribute abbreviations or the line number encoding. References from on*
 *e section

14      to another, especially to refer to strings, allow these sections to be *
 *compacted to

15      eliminate duplicate data.


16      There are multiple schemes for eliminating duplicate data or reducing t*
 *he size of

17      the DWARF debug data associated with a given ole. These include COMDAT,

18      used to eliminate duplicate function or data deonitions, the split DWAR*
 *F object

19      oles which allow a consumer to ond DWARF data in oles other than the

20      executable, or the type units, which allow similar type deonitions from*
 * multiple

21      compilations to be combined.


22      In most cases, it is anticipated that DWARF debug data will be read by a

23      consumer (usually a debugger) and converted into a more eOEciently acce*
 *ssed

24      internal representation. For the most part, the DWARF data in a section*
 * is not the

25      same as this internal representation.



26      1.3.5   EOEcient Processing


27      DWARF is designed to be processed eOEciently, so that a producer (a com*
 *piler)

28      can generate the debug descriptions incrementally and a consumer can re*
 *ad only

29      the descriptions which it needs at a given time. The data formats are d*
 *esigned to

30      be eOEciently interpreted by a consumer.


31      As mentioned, there is a tension between this objective and the precedi*
 *ng one. A

32      DWARF data representation which resembles an internal data representati*
 *on

33      may lead to faster processing, but at the expense of larger data oles. *
 *This may

34      also constrain the possible implementations.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 4
                                   Chapter 1. Introduction



 1      1.3.6   Implementation Independence


 2      DWARF attempts to allow developers the greatest AEexibility in designing

 3      implementations, without mandating any particular design decisions. Iss*
 *ues

 4      which can be described as quality-of-implementation are avoided.



 5      1.3.7   Explicit Rather Than Implicit Description


 6      DWARF describes the source to object translation explicitly rather than*
 * using

 7      common practice or convention as an implicit understanding between prod*
 *ucer

 8      and consumer. For example, where other debugging formats assume that a

 9      debugger knows how to virtually unwind the stack, moving from one stack

10      frame to the next using implicit knowledge about the architecture or op*
 *erating

11      system, DWARF makes this explicit in the Call Frame Information descrip*
 *tion.



12      1.3.8   Avoid Duplication of Information


13      DWARF has a goal of describing characteristics of a program once, rathe*
 *r than

14      repeating the same information multiple times. The string sections can *
 *be

15      compacted to eliminate duplicate strings, for example. Other compaction

16      schemes or references between sections support this. Whether a particul*
 *ar

17      implementation is eoeective at eliminating duplicate data, or even atte*
 *mpts to, is

18      a quality-of-implementation issue.



19      1.3.9   Leverage Other Standards


20      Where another standard exists which describes how to interpret aspects *
 *of a

21      program, DWARF defers to that standard rather than attempting to duplic*
 *ate the

22      description. For example, C++ has specioc rules for deciding which func*
 *tion to

23      call depending name, scope, argument types, and other factors. DWARF

24      describes the functions and arguments, but doesn't attempt to describe *
 *how one

25      would be selected by a consumer performing any particular operation.



26      1.3.10   Limited Dependence on Tools


27      DWARF data is designed so that it can be processed by commonly available

28      assemblers, linkers, and other support programs, without requiring addi*
 *tional

29      functionality speciocally to support DWARF data. This may require the

30      implementer to be careful that they do not generate DWARF data which ca*
 *nnot

31      be processed by these programs. Conversely, an assembler which can gene*
 *rate

32      LEB128 (Little-Endian Base 128) values may allow the compiler to genera*
 *te more



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 5
                                   Chapter 1. Introduction



 1      compact descriptions, and a linker which understands the format of stri*
 *ng

 2      sections can merge these sections. Whether or not an implementation inc*
 *ludes

 3      these functions is a quality-of-implementation issue, not mandated by t*
 *he

 4      DWARF speciocation.



 5      1.3.11   Separate Description From Implementation


 6      DWARF intends to describe the translation of a program from source to o*
 *bject,

 7      while neither mandating any particular design nor making any other desi*
 *gn

 8      diOEcult. For example, DWARF describes how the arguments and local vari*
 *ables

 9      in a function are to be described, but doesn't specify how this data is*
 * collected or

10      organized by a producer. Where a particular DWARF feature anticipates t*
 *hat it

11      will be implemented in a certain fashion, informative text will suggest*
 * but not

12      require this design.



13      1.3.12   Permissive Rather Than Prescriptive


14      The DWARF Standard specioes the meaning of DWARF descriptions. It does *
 *not

15      specify in detail what a particular producer must generate for any sour*
 *ce to

16      object conversion. One producer may generate a more complete descriptio*
 *n than

17      another, it may describe features in a dioeerent order (unless the stan*
 *dard

18      explicitly requires a particular order), or it may use dioeerent abbrev*
 *iations or

19      compression methods. Similarly, DWARF does not specify exactly what a

20      particular consumer should do with each part of the description, althou*
 *gh we

21      believe that the potential uses for each description should be evident.


22      DWARF is permissive, allowing dioeerent producers to generate dioeerent

23      descriptions for the same source to object conversion, and permitting d*
 *ioeerent

24      consumers to provide more or less functionality or information to the u*
 *ser. This

25      may result in debugging information being larger or smaller, compilers *
 *or

26      debuggers which are faster or slower, and more or less functional. Thes*
 *e are

27      described as dioeerences in quality-of-implementation.


28      Each producer conforming to the DWARF standard must follow the format a*
 *nd

29      meaning as specioed in the standard. As long as the DWARF description

30      generated follows this speciocation, the producer is generating valid D*
 *WARF.

31      For example, DWARF allows a producer to identify the end of a function

32      prologue in the Line Information so that a debugger can stop at this lo*
 *cation. A

33      producer which does this is generating valid DWARF, as is another which

34      doesn't. As another example, one producer may generate descriptions for

35      variables which are moved from memory to a register in a certain range,*
 * while

36      another may only describe the variable's location in memory. Both are v*
 *alid



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 6
                                   Chapter 1. Introduction



 1      DWARF descriptions, while a consumer using the former would be able to

 2      provide more accurate values for the variable while executing in that r*
 *ange than

 3      a consumer using the latter.


 4      In this document, where the word imayj is used, the producer has the op*
 *tion to

 5      follow the description or not. Where the text says imay notj, this is p*
 *rohibited.

 6      Where the text says ishouldj, this is advice about best practice, but i*
 *s not a

 7      requirement.



 8      1.3.13   Extensibility


 9      This document does not attempt to cover all interesting languages or ev*
 *en to

10      cover all of the possible debugging information needs for its primary t*
 *arget

11      languages. Therefore, the document provides producers and tool develope*
 *rs a

12      way to deone their owns debugging information tags, attributes, base ty*
 *pe

13      encodings, location operations, language names, calling conventions and*
 * call

14      frame instructions by reserving a subset of the valid values for these *
 *constructs

15      for additions and for deoning related naming conventions. Producers may*
 * also

16      use debugging information entries and attributes deoned here in new sit*
 *uations.

17      Future versions of this document will not use names or values reserved *
 *for

18      producer-specioc additions. All names and values not reserved for produ*
 *cer

19      additions, however, are reserved for future versions of this document.


20      Where this speciocation provides a means for describing the source lang*
 *uage,

21      implementors are expected to adhere to that speciocation. For language *
 *features

22      that are not supported, implementors may use existing attributes in nov*
 *el ways

23      or add producer-deoned attributes. Implementors who make extensions are

24      strongly encouraged to design them to be compatible with this speciocat*
 *ion in

25      the absence of those extensions.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 7
                                   Chapter 1. Introduction



 1      The DWARF format is organized so that a consumer can skip over data whi*
 *ch it

 2      does not recognize. This may allow a consumer to read and process oles

 3      generated according to a later version of this standard or which contai*
 *n producer

 4      extensions, albeit possibly in a degraded manner.



 5      1.4    Changes from Version 5 to Version 6


 6      To be written...



 7      1.5    Changes from Version 4 to Version 5


 8      The following is a list of the major changes made to the DWARF Debugging

 9      Information Format since Version 4 was published. The list is not meant*
 * to be

10      exhaustive.


11        #  Eliminate the .debug_types section introduced in DWARF Version 4 a*
 *nd

12           move its contents into the .debug_info section.


13        #  Add support for collecting common DWARF information (debugging

14           information entries and macro deonitions) across multiple executab*
 *le and

15           shared oles and keeping it in a single supplementary object ole.


16        #  Replace the line number program header format with a new format th*
 *at

17           provides the ability to use an MD5 hash to validate the source ole*
 * version

18           in use, allows pooling of directory and ole name strings and makes

19           provision for producer-deoned extensions. Also add a string section

20           specioc to the line number table (.debug_line_str) to properly sup*
 *port the

21           common practice of stripping all DWARF sections except for line nu*
 *mber

22           information.


23        #  Add a split object ole and package representations to allow most D*
 *WARF

24           information to be kept separate from an executable or shared image*
 *. This

25           includes new sections .debug_addr, .debug_str_offsets,

26           .debug_abbrev.dwo, .debug_info.dwo, .debug_line.dwo,

27           .debug_loclists.dwo, .debug_macro.dwo, .debug_str.dwo,

28           .debug_str_offsets.dwo, .debug_cu_index and .debug_tu_index togeth*
 *er

29           with new forms of attribute value for referencing these sections. *
 *This

30           enhances DWARF support by reducing executable program size and by

31           improving link times.


32        #  Replace the .debug_macinfo macro information representation with w*
 *ith a

33           .debug_macro representation that can potentially be much more comp*
 *act.



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 8
                                   Chapter 1. Introduction



 1        #  Replace the .debug_pubnames and .debug_pubtypes sections with a si*
 *ngle

 2           and more functional name index section, .debug_names.


 3        #  Replace the location list and range list sections (.debug_loc and

 4           .debug_ranges, respectively) with new sections (.debug_loclists and

 5           .debug_rnglists) and new representations that save space and proce*
 *ssing

 6           time by eliminating most related object ole relocations.


 7        #  Add a new debugging information entry (DW.TAG.call.site), related

 8           attributes and DWARF expression operators to describe call site

 9           information, including identiocation of tail calls and tail recurs*
 *ion.


10        #  Add improved support for FORTRAN assumed rank arrays

11           (DW.TAG.generic.subrange), dynamic rank arrays (DW.AT.rank) and

12           co-arrays (DW.TAG.coarray.type).


13        #  Add new operations that allow support for a DWARF expression stack

14           containing typed values.


15        #  Add improved support for the C++: auto return type, deleted member

16           functions (DW.AT.deleted), as well as defaulted constructors and

17           destructors (DW.AT.defaulted).


18        #  Add a new attribute (DW.AT.noreturn), to identify a subprogram that

19           does not return to its caller.


20        #  Add language codes for C 2011, C++ 2003, C++ 2011, C++ 2014, Dylan,

21           Fortran 2003, Fortran 2008, Go, Haskell, Julia, Modula 3, Ocaml, O*
 *penCL

22           C1, Rust and Swift.


23        #  Numerous other more minor additions to improve functionality and

24           performance.


25      DWARF Version 5 is compatible with DWARF Version 4 except as follows:


26        #  The compilation unit header (in the .debug_info section) has a new

27           unit_type oeld. In addition, the debug_abbrev_offset and address_s*
 *ize

28           oelds are reordered.


29        #  New operand forms for attribute values are deoned (DW.FORM.addrx,

30           DW.FORM.addrx1, DW.FORM.addrx2, DW.FORM.addrx3,

31           DW.FORM.addrx4, DW.FORM.data16, DW.FORM.implicit.const,

32           DW.FORM.line.strp, DW.FORM.loclistx, DW.FORM.rnglistx,

33           DW.FORM.ref.sup4, DW.FORM.ref.sup8, DW.FORM.strp.sup,
        _______________________________
           1called simply OpenCL in DWARF Version 5



        July 15 2024               ***WORKING DRAFT***                         *
 *Page 9
                                   Chapter 1. Introduction



 1           DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3

 2           and DW.FORM.strx4.


 3           Because a pre-DWARF Version 5 consumer will not be able to interpr*
 *et these even

 4           to ignore and skip over them, new forms must be considered incompa*
 *tible additions.


 5        #  The line number table header is substantially revised.


 6        #  The .debug_loc and .debug_ranges sections are replaced by new

 7           .debug_loclists and .debug_rnglists sections, respectively. These *
 *new

 8           sections have a new (and more eOEcient) list structure. Attributes*
 * that

 9           reference the predecessor sections must be interpreted dioeerently*
 * to access

10           the new sections. The new sections encode the same information as *
 *their

11           predecessors, except that a new default location list entry is add*
 *ed.


12        #  In a string type, the DW.AT.byte.size attribute is re-deoned to al*
 *ways

13           describe the size of the string type. (Previously DW.AT.byte.size

14           described the size of the optional string length data oeld if the

15           DW.AT.string.length attribute was also present.) In addition, the

16           DW.AT.string.length attribute may now refer directly to an object *
 *that

17           contains the length value.


18      While not strictly an incompatibility, the macro information representa*
 *tion is

19      completely new; further, producers and consumers may optionally continu*
 *e to

20      support the older representation. While the two representations cannot *
 *both be

21      used in the same compilation unit, they can co-exist in executable or s*
 *hared

22      images.


23      Similar comments apply to replacement of the .debug_pubnames and

24      .debug_pubtypes sections with the new .debug_names section.



25      1.6    Changes from Version 3 to Version 4


26      The following is a list of the major changes made to the DWARF Debugging

27      Information Format since Version 3 was published. The list is not meant*
 * to be

28      exhaustive.


29        #  Reformulate Section 2.6 (Location Descriptions) to better distingu*
 *ish

30           DWARF location descriptions, which compute the location where a va*
 *lue is

31           found (such as an address in memory or a register name) from DWARF

32           expressions, which compute a onal value (such as an array bound).


33        #  Add support for bundled instructions on machine architectures where

34           instructions do not occupy a whole number of bytes.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 10
                                   Chapter 1. Introduction



 1        #  Add a new attribute form for section ooesets, DW.FORM.sec.ooeset, *
 *to

 2           replace the use of DW.FORM.data4 and DW.FORM.data8 for section

 3           ooesets.


 4        #  Add an attribute, DW.AT.main.subprogram, to identify the main

 5           subprogram of a program.


 6        #  Deone default array lower bound values for each supported language.


 7        #  Add a new technique using separate type units, type signatures and

 8           COMDAT sections to improve compression and duplicate elimination of

 9           DWARF information.


10        #  Add support for new C++ language constructs, including rvalue refe*
 *rences,

11           generalized constant expressions, Unicode character types and temp*
 *late

12           aliases.


13        #  Clarify and generalize support for packed arrays and structures.


14        #  Add new line number table support to facilitate proole based compi*
 *ler

15           optimization.


16        #  Add additional support for template parameters in instantiations.


17        #  Add support for strongly typed enumerations in languages (such as *
 *C++)

18           that have two kinds of enumeration declarations.


19        #  Add the option for the DW.AT.high.pc value of a program unit or sc*
 *ope

20           to be specioed as a constant ooeset relative to the corresponding

21           DW.AT.low.pc value.


22      DWARF Version 4 is compatible with DWARF Version 3 except as follows:


23        #  DWARF attributes that use any of the new forms of attribute value

24           representation (for section ooesets, AEag compression, type signat*
 *ure

25           references, and so on) cannot be read by DWARF Version 3 consumers

26           because the consumer will not know how to skip over the unexpected*
 * form

27           of data.


28        #  DWARF frame and line number table sections include additional oeld*
 *s that

29           aoeect the location and interpretation of other data in the sectio*
 *n.



30      1.7    Changes from Version 2 to Version 3


31      The following is a list of the major dioeerences between Version 2 and *
 *Version 3 of

32      the DWARF Debugging Information Format. The list is not meant to be

33      exhaustive.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 11
                                   Chapter 1. Introduction



 1        #  Make provision for DWARF information oles that are larger than 4 G*
 *Bytes.


 2        #  Allow attributes to refer to debugging information entries in othe*
 *r shared

 3           libraries.


 4        #  Add support for Fortran 90 modules as well as allocatable array and

 5           pointer types.


 6        #  Add additional base types for C (as revised for 1999).


 7        #  Add support for Java and COBOL.


 8        #  Add namespace support for C++.


 9        #  Add an optional section for global type names (similar to the glob*
 *al section

10           for objects and functions).


11        #  Adopt UTF-8 as the preferred representation of program name string*
 *s.


12        #  Add improved support for optimized code (discontiguous scopes, end*
 * of

13           prologue determination, multiple section code generation).


14        #  Improve the ability to eliminate duplicate DWARF information during

15           linking.


16      DWARF Version 3 is compatible with DWARF Version 2 except as follows:


17        #  Certain very large values of the initial length oelds that begin D*
 *WARF

18           sections as well as certain structures are reserved to act as esca*
 *pe codes for

19           future extension; one such extension is deoned to increase the pos*
 *sible size

20           of DWARF descriptions (see Section 7.4 on page 203).


21        #  References that use the attribute form DW.FORM.ref.addr are specio*
 *ed to

22           be four bytes in the DWARF 32-bit format and eight bytes in the DW*
 *ARF

23           64-bit format, while DWARF Version 2 specioes that such references*
 * have

24           the same size as an address on the target system (see Sections 7.4*
 * on

25           page 203 and 7.5.4 on page 216).


26        #  The return.address.register oeld in a Common Information Entry rec*
 *ord

27           for call frame information is changed to unsigned LEB representati*
 *on (see

28           Section 6.4.1 on page 179).



29      1.8    Changes from Version 1 to Version 2


30      DWARF Version 2 describes the second generation of debugging information

31      based on the DWARF format. While DWARF Version 2 provides new debugging

32      information not available in Version 1, the primary focus of the change*
 *s for



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 12
                                   Chapter 1. Introduction



 1      Version 2 is the representation of the information, rather than the inf*
 *ormation

 2      content itself. The basic structure of the Version 2 format remains as *
 *in Version 1:

 3      the debugging information is represented as a series of debugging infor*
 *mation

 4      entries, each containing one or more attributes (name/value pairs). The*
 * Version 2

 5      representation, however, is much more compact than the Version 1

 6      representation. In some cases, this greater density has been achieved a*
 *t the

 7      expense of additional complexity or greater diOEculty in producing and

 8      processing the DWARF information. The deoners believe that the reductio*
 *n in

 9      I/O and in memory paging should more than make up for any increase in

10      processing time.


11      The representation of information changed from Version 1 to Version 2, *
 *so that

12      Version 2 DWARF information is not binary compatible with Version 1

13      information. To make it easier for consumers to support both Version 1 *
 *and

14      Version 2 DWARF information, the Version 2 information has been moved t*
 *o a

15      dioeerent object ole section, .debug_info.


16      A summary of the major changes made in DWARF Version 2 compared to the *
 *DWARF

17      Version 1 may be found in the DWARF Version 2 document.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 13
                           Chapter 1. Introduction



                                (empty page)



July 15 2024               ***WORKING DRAFT***                        Page 14




 1      Chapter 2



 2      General Description



 3      2.1    The Debugging Information Entry (DIE)


 4      DWARF uses a series of debugging information entries (DIEs) to deone a

 5      low-level representation of a source program. Each debugging informatio*
 *n entry

 6      consists of an identifying tag and a series of attributes. An entry, or*
 * group of

 7      entries together, provide a description of a corresponding entity in th*
 *e source

 8      program. The tag specioes the class to which an entry belongs and the a*
 *ttributes

 9      deone the specioc characteristics of the entry.


10      The set of tag names is listed in Table 2.1 on the following page. The *
 *debugging

11      information entries they identify are described in Chapters 3, 4 and 5.


12      The debugging information entry descriptions in Chapters 3, 4 and 5 gen*
 *erally include

13      mention of most, but not necessarily all, of the attributes that are no*
 *rmally or possibly

14      used with the entry. Some attributes, whose applicability tends to be p*
 *ervasive and

15      invariant across many kinds of debugging information entries, are descr*
 *ibed in this

16      section and not necessarily mentioned in all contexts where they may be*
 * appropriate.

17      Examples include DW.AT.artiocial, the declaration coordinates, and

18      DW.AT.description, among others.


19      The debugging information entries are contained in the .debug_info and/*
 *or

20      .debug_info.dwo sections of an object ole.


21      Optionally, debugging information may be partitioned such that the majo*
 *rity of

22      the debugging information can remain in individual object oles without *
 *being

23      processed by the linker. See Section 7.3.2 on page 194 and Appendix F on

24      page 416 for details.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 15
                        Chapter 2. General Description



                             Table 2.1: Tag names

_____________________________________________________________________________

  DW.TAG.access.declaration            DW.TAG.module

  DW.TAG.array.type                    DW.TAG.namelist

  DW.TAG.atomic.type                   DW.TAG.namelist.item

  DW.TAG.base.type                     DW.TAG.namespace

  DW.TAG.call.site                     DW.TAG.packed.type

  DW.TAG.call.site.parameter           DW.TAG.partial.unit

  DW.TAG.catch.block                   DW.TAG.pointer.type

  DW.TAG.class.type                    DW.TAG.ptr.to.member.type

  DW.TAG.coarray.type                  DW.TAG.reference.type

  DW.TAG.common.block                  DW.TAG.restrict.type

  DW.TAG.common.inclusion              DW.TAG.rvalue.reference.type

  DW.TAG.compile.unit                  DW.TAG.set.type

  DW.TAG.condition                     DW.TAG.shared.type

  DW.TAG.const.type                    DW.TAG.skeleton.unit

  DW.TAG.constant                      DW.TAG.string.type

  DW.TAG.dwarf.procedure               DW.TAG.structure.type

  DW.TAG.dynamic.type                  DW.TAG.subprogram

  DW.TAG.entry.point                   DW.TAG.subrange.type

  DW.TAG.enumeration.type              DW.TAG.subroutine.type

  DW.TAG.enumerator                    DW.TAG.template.alias

  DW.TAG.ole.type                      DW.TAG.template.type.parameter

  DW.TAG.formal.parameter              DW.TAG.template.value.parameter

  DW.TAG.friend                        DW.TAG.thrown.type

  DW.TAG.generic.subrange              DW.TAG.try.block

  DW.TAG.immutable.type                DW.TAG.typedef

  DW.TAG.imported.declaration          DW.TAG.type.unit

  DW.TAG.imported.module               DW.TAG.union.type

  DW.TAG.imported.unit                 DW.TAG.unspecioed.parameters

  DW.TAG.inheritance                   DW.TAG.unspecioed.type

  DW.TAG.inlined.subroutine            DW.TAG.variable

  DW.TAG.interface.type                DW.TAG.variant

  DW.TAG.label                         DW.TAG.variant.part

  DW.TAG.lexical.block                 DW.TAG.volatile.type

  DW.TAG.member                        DW.TAG.with.stmt

_____________________________________________________________________________



July 15 2024               ***WORKING DRAFT***                        Page 16
                                Chapter 2. General Description



 1      As a further option, debugging information entries and other debugging

 2      information that are the same in multiple executable or shared object o*
 *les may be

 3      found in a separate supplementary object ole that contains supplementar*
 *y debug

 4      sections. See Section 7.3.6 on page 202 for further details.



 5      2.2    Attribute Types


 6      Each attribute value is characterized by an attribute name. No more tha*
 *n one

 7      attribute with a given name may appear in any debugging information ent*
 *ry.

 8      There are no limitations on the ordering of attributes within a debuggi*
 *ng

 9      information entry.


10      The attributes are listed in Table 2.2 following.



                                   Table 2.2: Attribute names
        _______________________________________________________________________*
 *_________
        _Attribute*______________________||Usage_______________________________*
 *_________

         DW.AT.abstract.origin           ||Inline instances of inline subprogra*
 *ms

                                         | Out-of-line instances of inline subp*
 *rograms
                                         |
         DW.AT.accessibility             ||Access declaration (C++, Ada)

                                         | Accessibility of base or inherited c*
 *lass (C++)
                                         |
                                         |
                                         | Accessibility of data member or memb*
 *er
                                         | function
                                         |
         DW.AT.address.class             ||Pointer or reference types

                                         | Subroutine or subroutine type
                                         |
         DW.AT.addr.base                 ||Base ooeset for address table

         DW.AT.alignment                 ||Non-default alignment of type, subpr*
 *ogram
                                         | or variable
                                         |
         DW.AT.allocated                 ||Allocation status of types

         DW.AT.artiocial                 ||Objects or types that are not actual*
 *ly declared
                                         | in the source
                                         |
         DW.AT.associated                ||Association status of types

         DW.AT.base.types                ||Primitive data types of compilation *
 *unit

         DW.AT.bias                      ||Integer bias added to an encoded val*
 *ue

        _DW.AT.binary.scale______________||Binary_scale_factor_for_oxed-point_t*
 *ype______

         Continued on next page
         *Links for attributes come to the left column of this table; links in *
 *the right column "fan-out" to one or more descriptions.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 17
                        Chapter 2. General Description



_Attribute*______________________||Identioes_or_Specioes________________________

 DW.AT.bit.size                  ||Size of a base type in bits

                                 |Size of a data member in bits
                                 |
 DW.AT.bit.stride                ||Array element stride (of array type)

                                 |Subrange stride (dimension of array type)
                                 |
                                 |Enumeration stride (dimension of array type)
                                 |
 DW.AT.byte.size                 ||Size of a data object or data type in bytes

 DW.AT.byte.stride               ||Array element stride (of array type)

                                 |Subrange stride (dimension of array type)
                                 |
                                 |Enumeration stride (dimension of array type)
                                 |
 DW.AT.call.all.calls            ||All tail and normal calls in a subprogram are
                                 |described by call site entries
                                 |
 DW.AT.call.all.source.calls     ||All tail, normal and inlined calls in a
                                 |
                                 |subprogram are described by call site and
                                 |inlined subprogram entries
                                 |
 DW.AT.call.all.tail.calls       ||All tail calls in a subprogram are described
                                 |by call site entries
                                 |
 DW.AT.call.column               ||Column position of inlined subroutine call
                                 |
                                 |Column position of call site of non-inlined
                                 |call
                                 |
 DW.AT.call.data.location        ||Address of the value pointed to by an
                                 |argument passed in a call
                                 |
 DW.AT.call.data.value           ||Value pointed to by an argument passed in a
                                 |call
                                 |
 DW.AT.call.ole                  ||File containing inlined subroutine call

                                 |File containing call site of non-inlined call
                                 |
 DW.AT.call.line                 ||Line number of inlined subroutine call

                                 |Line containing call site of non-inlined call
                                 |
 DW.AT.call.origin               ||Subprogram called in a call

 DW.AT.call.parameter            ||Parameter entry in a call

 DW.AT.call.pc                   ||Address of the call instruction in a call

 DW.AT.call.return.pc            ||Return address from a call

_DW.AT.call.tail.call____________||Call_is_a_tail_call__________________________

 Continued on next page
 *Links for attributes come to the left column of this table; links in the righ*
 *t column "fan-out" to one or more descriptions.



July 15 2024               ***WORKING DRAFT***                        Page 18
                        Chapter 2. General Description



_Attribute*______________________||Identioes_or_Specioes________________________

 DW.AT.call.target               ||Address of called routine in a call

 DW.AT.call.target.clobbered     ||Address of called routine, which may be
                                 |clobbered, in a call
                                 |
 DW.AT.call.value                ||Argument value passed in a call

 DW.AT.calling.convention        ||Calling convention for subprograms

                                 |Calling convention for types
                                 |
 DW.AT.common.reference          ||Common block usage

 DW.AT.comp.dir                  ||Compilation directory

 DW.AT.const.expr                ||Compile-time constant object

                                 |Compile-time constant function
                                 |
 DW.AT.const.value               ||Constant object

                                 |Enumeration literal value
                                 |
                                 |Template value parameter
                                 |
 DW.AT.containing.type           ||Containing type of pointer to member type

 DW.AT.count                     ||Elements of subrange type

 DW.AT.data.bit.ooeset           ||Base type bit location

                                 |Data member bit location
                                 |
 DW.AT.data.location             ||Indirection to actual data

 DW.AT.data.member.location      ||Data member location

                                 |Inherited member location
                                 |
 DW.AT.decimal.scale             ||Decimal scale factor

 DW.AT.decimal.sign              ||Decimal sign representation

 DW.AT.decl.column               ||Column position of source declaration

 DW.AT.decl.ole                  ||File containing source declaration

 DW.AT.decl.line                 ||Line number of source declaration

 DW.AT.declaration               ||Incomplete, non-deoning, or separate entity
                                 |declaration
                                 |
 DW.AT.defaulted                 ||Whether a member function has been
                                 |declared as default
                                 |
 DW.AT.default.value             ||Default value of parameter

 DW.AT.deleted                   ||Whether a member has been declared as
                                 |deleted
_________________________________|______________________________________________

 Continued on next page
 *Links for attributes come to the left column of this table; links in the righ*
 *t column "fan-out" to one or more descriptions.



July 15 2024               ***WORKING DRAFT***                        Page 19
                        Chapter 2. General Description



_Attribute*______________________||Identioes_or_Specioes________________________

 DW.AT.description               ||Artiocial name or description

 DW.AT.digit.count               ||Digit count for packed decimal or numeric
                                 |string type
                                 |
 DW.AT.discr                     ||Discriminant of variant part

 DW.AT.discr.list                ||List of discriminant values

 DW.AT.discr.value               ||Discriminant value

 DW.AT.dwo.name                  ||Name of split DWARF object ole

 DW.AT.elemental                 ||Elemental property of a subroutine

 DW.AT.encoding                  ||Encoding of base type

 DW.AT.endianity                 ||Endianity of data

 DW.AT.entry.pc                  ||Entry address of a scope (compilation unit,
                                 |subprogram,  and so on)
                                 |
 DW.AT.enum.class                ||Type safe enumeration deonition

 DW.AT.explicit                  ||Explicit property of member function

 DW.AT.export.symbols            ||Export (inline) symbols of namespace

                                 |Export symbols of a structure, union or class
                                 |
 DW.AT.extension                 ||Previous namespace extension or original
                                 |namespace
                                 |
 DW.AT.external                  ||External subroutine

                                 |External variable
                                 |
 DW.AT.frame.base                ||Subroutine frame base address

 DW.AT.friend                    ||Friend relationship

 DW.AT.high.pc                   ||Contiguous range of code addresses

 DW.AT.identioer.case            ||Identioer case rule

 DW.AT.import                    ||Imported declaration

                                 |Imported unit
                                 |
                                 |Namespace alias
                                 |
                                 |Namespace using declaration
                                 |
                                 |Namespace using directive
                                 |
 DW.AT.inline                    ||Abstract instance

                                 |Inlined subroutine
                                 |
_DW.AT.is.optional_______________||Optional_parameter___________________________

 Continued on next page
 *Links for attributes come to the left column of this table; links in the righ*
 *t column "fan-out" to one or more descriptions.



July 15 2024               ***WORKING DRAFT***                        Page 20
                        Chapter 2. General Description



_Attribute*______________________||Identioes_or_Specioes________________________

 DW.AT.language.name             ||Programming language name

 DW.AT.language.version          ||Programming language version

 DW.AT.linkage.name              ||Object ole linkage name of an entity

 DW.AT.location                  ||Data object location

 DW.AT.loclists.base             ||Location lists base

 DW.AT.low.pc                    ||Code address or range of addresses

                                 |Base address of scope
                                 |
 DW.AT.lower.bound               ||Lower bound of subrange

 DW.AT.macros                    ||Macro preprocessor information
                                 |
                                 |(#define, #undef, and so on in C, C++ and
                                 |similar languages)
                                 |
 DW.AT.main.subprogram           ||Main or starting subprogram

                                 |Unit containing main or starting subprogram
                                 |
 DW.AT.mutable                   ||Mutable property of member data

 DW.AT.name                      ||Name of declaration

                                 |Path name of compilation source
                                 |
 DW.AT.namelist.item             ||Namelist item

 DW.AT.noreturn                  ||ino returnj property of a subprogram

 DW.AT.num.lanes                 ||Number of implicitly parallel lanes

 DW.AT.object.pointer            ||Object (this, self) pointer of member
                                 |function
                                 |
 DW.AT.ordering                  ||Array row/column ordering

 DW.AT.picture.string            ||Picture string for numeric string type

 DW.AT.priority                  ||Module priority

 DW.AT.producer                  ||Compiler identiocation

 DW.AT.prototyped                ||Subroutine prototype

 DW.AT.pure                      ||Pure property of a subroutine

 DW.AT.ranges                    ||Non-contiguous range of code addresses

 DW.AT.rank                      ||Dynamic number of array dimensions

 DW.AT.recursive                 ||Recursive property of a subroutine

 DW.AT.reference                 ||&-qualioed non-static member function
                                 |(C++)
_________________________________|______________________________________________

 Continued on next page
 *Links for attributes come to the left column of this table; links in the righ*
 *t column "fan-out" to one or more descriptions.



July 15 2024               ***WORKING DRAFT***                        Page 21
                        Chapter 2. General Description



_Attribute*______________________||Identioes_or_Specioes________________________

 DW.AT.return.addr               ||Subroutine return address save location

 DW.AT.rnglists.base             ||Base ooeset for range lists

 DW.AT.rvalue.reference          ||&&-qualioed non-static member function
                                 |(C++)
                                 |
 DW.AT.scale.divisor             ||Denominator of rational scale factor

 DW.AT.scale.multiplier          ||Numerator of rational scale factor

 DW.AT.sibling                   ||Debugging information entry relationship

 DW.AT.signature                 ||Type signature

 DW.AT.small                     ||Scale factor for oxed-point type

 DW.AT.speciocation              ||Incomplete, non-deoning, or separate
                                 |declaration corresponding to a declaration
                                 |
 DW.AT.start.scope               ||Reduced scope of declaration

 DW.AT.static.link               ||Location of uplevel frame

 DW.AT.stmt.list                 ||Line number information for unit

 DW.AT.string.length             ||String length of string type

 DW.AT.string.length.bit.size    ||Size of string length of string type

 DW.AT.string.length.byte.size   ||Size of string length of string type

 DW.AT.str.ooesets1              ||String ooesets information for unit

 DW.AT.tensor                    ||Tensor (array) type

 DW.AT.threads.scaled            ||Array bound THREADS scale factor (UPC)

 DW.AT.trampoline                ||Target subroutine

 DW.AT.type                      ||Type of call site

                                 |Type of string type components
                                 |
                                 |Type of subroutine return
                                 |
                                 |Type of declaration
                                 |
 DW.AT.upper.bound               ||Upper bound of subrange

 DW.AT.use.location              ||Member location for pointer to member type

 DW.AT.use.UTF8                  ||Compilation unit uses UTF-8 strings

_DW.AT.variable.parameter________||Non-constant_parameter_AEag__________________

 Continued on next page
 *Links for attributes come to the left column of this table; links in the righ*
 *t column "fan-out" to one or more descriptions.



_______________________________
   1 DW.FORM.str.ooesets is new in DWARF Version 6. It replaces DW.AT.str.ooese*
 *ts.base

which is deprecated.



July 15 2024               ***WORKING DRAFT***                        Page 22
                                Chapter 2. General Description



        _Attribute*______________________||Identioes_or_Specioes_______________*
 *_________

         DW.AT.virtuality                ||Virtuality attribute

         DW.AT.visibility                ||Visibility of declaration

        _DW.AT.vtable.elem.location______||Virtual_function_vtable_slot________*
 *_________
         *Links for attributes come to the left column of this table; links in *
 *the right column "fan-out" to one or more descriptions.



 1      The permissible values for an attribute belong to one or more classes o*
 *f attribute

 2      value forms. Each form class may be represented in one or more ways. For

 3      example, some attribute values consist of a single piece of constant da*
 *ta.

 4      iConstant dataj is the class of attribute value that those attributes m*
 *ay have.

 5      There are several representations of constant data, including oxed leng*
 *th data of

 6      one, two, four, eight or 16 bytes in size, and variable length data). T*
 *he particular

 7      representation for any given instance of an attribute is encoded along *
 *with the

 8      attribute name as part of the information that guides the interpretatio*
 *n of a

 9      debugging information entry.


10      Attribute value forms belong to one of the classes shown in Table 2.3 f*
 *ollowing.



                             Table 2.3: Classes of attribute value
         ______________________________________________________________________*
 *______
         _Attribute_Class_||General_Use_and_Encoding___________________________*
 *______

           address        ||Refers to some location in the address space of the
                          |described program.
                          |
           addrptr        ||Specioes a location in the DWARF section that holds*
 * a
                          |
                          |series of machine address values. Certain attributes*
 * use
                          |one of these addresses by indexing relative to this *
 *location.
                          |
           block          ||An arbitrary number of uninterpreted bytes of data.*
 * The
                          |
                          |number of data bytes may be implicit from context or
                          |
                          |explicitly specioed by an initial unsigned LEB128 va*
 *lue
                          |
                          |(see Section 7.6 on page 230) that precedes that num*
 *ber of
                          |data bytes.
                          |
           constant       ||One, two, four, eight or sixteen bytes of uninterpr*
 *eted data,
                          |
                          |or data encoded in the variable length format known *
 *as
                          |LEB128 (see Section 7.6 on page 230).
                          |
           exprval        ||A DWARF expression yielding a value (see Section 2.*
 *5 on
                          |
                          |page 26). A leading unsigned ULEB128 value (see Sect*
 *ion
                          |
                          |7.6 on page 230) specioes the number of bytes in the
                          |expression.
         _________________|____________________________________________________*
 *______
          Continued on next page



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 23
                        Chapter 2. General Description



_Attribute_Class__||General_Use_and_Encoding________________________________

  AEag            ||A small constant that indicates the presence or absence of
                  |an attribute.
                  |
  lineptr         ||Specioes a location in the DWARF section that holds line
                  |number information.
                  |
  locdesc         ||A DWARF location description (see Section 2.6 on
                  |
                  |page 39). A leading unsigned ULEB128 value (see Section
                  |
                  |7.6 on page 230) specioes the number of bytes in the
                  |location description.
                  |
  vallist,  loclist,||Specioes a location in the DWARF section that holds value

  loclistsptr     ||lists and location lists, which describe objects whose
                  |attributes or location can change during their lifetime.
                  |
  macptr          ||Specioes a location in the DWARF section that holds macro
                  |deonition|information.
                  ||
  reference       ||Refers to one of the debugging information entries that
                  |describethe program. There are four types of reference.
                  |
                  |The orst is an ooeset relative to the beginning of the
                  |
                  |compilationunit in which the reference occurs and must
                  |
                  |refer to an entry within that same compilation unit. The
                  |
                  |second type of reference is the ooeset of a debugging
                  |
                  |informationentry in any compilation unit, including one
                  |
                  |dioeerent from the unit containing the reference. The third
                  |
                  |type of reference is an indirect reference to a type
                  |
                  |deonition using an 8-byte signature for that type. The
                  |
                  |fourth type of reference is a reference from within the
                  |
                  |.debug_info section of the executable or shared object ole
                  |
                  |to a debugging information entry in the .debug_info
                  |section of a supplementary object ole.
                  |
  rnglist,        ||Specioes a location in the DWARF section that holds

  rnglistsptr     ||non-contiguous address ranges.

  string          ||A null-terminated sequence of zero or more (non-null)
                  |
                  |bytes. Data in this class are generally printable strings.
                  |
                  |Strings may be represented directly in the debugging
                  |informationentry or as an ooeset in a separate string table.
__________________|_________________________________________________________
 Continued on next page



July 15 2024               ***WORKING DRAFT***                        Page 24
                                Chapter 2. General Description



        _Attribute_Class__||General_Use_and_Encoding___________________________*
 *_____

          strooesetsptr   ||Specioes a location in the DWARF section that holds*
 * a
                          |
                          |series of ooesets into the DWARF section that holds *
 *strings.
                          |
                          |Certain attributes use one of these ooesets by index*
 *ing
                          |
                          |relative to this location. The resulting ooeset is t*
 *hen used to
                          |index into the DWARF string section.
        __________________|____________________________________________________*
 *_______



 1      2.3    Relationship of Debugging Information Entries


 2      A variety of needs can be met by permitting a single debugging informat*
 *ion entry to

 3      iownj an arbitrary number of other debugging entries and by permitting *
 *the same

 4      debugging information entry to be one of many owned by another debuggin*
 *g information

 5      entry. This makes it possible, for example, to describe the static bloc*
 *k structure within a

 6      source ole, to show the members of a structure, union, or class, and to*
 * associate

 7      declarations with source oles or source oles with shared object oles.


 8      The ownership relationship of debugging information entries is achieved

 9      naturally because the debugging information is represented as a tree. T*
 *he nodes

10      of the tree are the debugging information entries themselves. The child*
 * entries of

11      any node are exactly those debugging information entries owned by that *
 *node.


12      While the ownership relation of the debugging information entries is re*
 *presented as a

13      tree, other relations among the entries exist, for example, a reference*
 * from an entry

14      representing a variable to another entry representing the type of that *
 *variable. If all such

15      relations are taken into account, the debugging entries form a graph, n*
 *ot a tree.


16      The tree itself is represented by AEattening it in preox order. Each de*
 *bugging

17      information entry is deoned either to have child entries or not to have*
 * child

18      entries (see Section 7.5.3 on page 211). If an entry is deoned not to h*
 *ave children,

19      the next physically succeeding entry is a sibling. If an entry is deone*
 *d to have

20      children, the next physically succeeding entry is its orst child. Addit*
 *ional

21      children are represented as siblings of the orst child. A chain of sibl*
 *ing entries is

22      terminated by a null entry.


23      In cases where a producer of debugging information feels that it will be

24      important for consumers of that information to quickly scan chains of s*
 *ibling

25      entries, while ignoring the children of individual siblings, that produ*
 *cer may

26      attach a DW.AT.sibling attribute to any debugging information entry. Th*
 *e value

27      of this attribute is a reference to the sibling entry of the entry to w*
 *hich the

28      attribute is attached.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 25
                                Chapter 2. General Description



 1      2.4    Target Addresses


 2      Addresses, bytes and bits in DWARF use the numbering and direction

 3      conventions that are appropriate to the current language on the target *
 *system.


 4      Many places in this document refer to the size of an address on the tar*
 *get

 5      architecture (or equivalently, target machine) to which a DWARF descrip*
 *tion

 6      applies. For processors which can be conogured to have dioeerent addres*
 *s sizes

 7      or dioeerent instruction sets, the intent is to refer to the conogurati*
 *on which is

 8      either the default for that processor or which is specioed by the objec*
 *t ole or

 9      executable ole which contains the DWARF information.


10      For example, if a particular target architecture supports both 32-bit a*
 *nd 64-bit addresses,

11      the compiler will generate an object ole which specioes that it contain*
 *s executable code

12      generated for one or the other of these address sizes. In that case, th*
 *e DWARF debugging

13      information contained in this object ole will use the same address size.



14      2.4.1   Reserved Target Address for Non-Existent Entity


15      The target address consisting of the largest representable address valu*
 *e (for

16      example, 0xffffffff for a 32-bit address) is reserved to indicate that *
 *there is no

17      entity designated by that address.


18      In some cases a producer may emit machine code or allocate storage for *
 *an entity, but a

19      linker or other subsequent processing step may remove that entity. In t*
 *hat case, rather

20      than be required to rewrite the DWARF description to eliminate the rele*
 *vant DWARF

21      construct that contains the address of that entity, the processing step*
 * may simply update

22      the address value to the reserved value.



23      2.5    DWARF Expressions


24      DWARF expressions describe how to compute a value or specify a location*
 *. They

25      are expressed in terms of DWARF operations that operate on a stack of v*
 *alues.


26      A DWARF expression is encoded as a stream of operations, each consistin*
 *g of an

27      opcode followed by zero or more literal operands. The number of operand*
 *s is

28      implied by the opcode.


29      In addition to the general operations that are deoned here, operations *
 *that are

30      specioc to location descriptions are deoned in Section 2.6 on page 39.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 26
                                Chapter 2. General Description



 1      2.5.1   General Operations


 2      Each general operation represents a postox operation on a simple stack *
 *machine.

 3      Each element of the stack has a type and a value, and can represent a v*
 *alue of

 4      any supported base type of the target machine. Instead of a base type, *
 *elements

 5      can have a generic type, which is an integral type that has the size of*
 * an address

 6      on the target machine and unspecioed signedness. The value on the top o*
 *f the

 7      stack after iexecutingj the DWARF expression is taken to be the result *
 *(the

 8      address of the object, the value of the array bound, the length of a dy*
 *namic

 9      string, the desired value itself, and so on).


10      The generic type is the same as the unspecioed type used for stack oper*
 *ations deoned in

11      DWARF Version 4 and before.



12      2.5.1.1 Literal Encodings


13      The following operations all push a value onto the DWARF stack. Operati*
 *ons

14      other than DW.OP.const.type push a value with the generic type, and if *
 *the

15      value of a constant in one of these operations is larger than can be st*
 *ored in a

16      single stack element, the value is truncated to the element size and th*
 *e low-order

17      bits are pushed on the stack.


18      1.  DW.OP.lit0, DW.OP.lit1, . . . , DW.OP.lit31

19          The DW.OP.lit!n? operations encode the unsigned literal values from*
 * 0

20          through 31, inclusive.


21      2.  DW.OP.addr

22          The DW.OP.addr operation has a single operand that encodes a machine

23          address and whose size is the size of an address on the target mach*
 *ine.


24      3.  DW.OP.const1u, DW.OP.const2u, DW.OP.const4u, DW.OP.const8u

25          The single operand of a DW.OP.const!n?u operation provides a 1, 2, *
 *4, or

26          8-byte unsigned integer constant, respectively.


27      4.  DW.OP.const1s, DW.OP.const2s, DW.OP.const4s, DW.OP.const8s

28          The single operand of a DW.OP.const!n?s operation provides a 1, 2, *
 *4, or

29          8-byte signed integer constant, respectively.


30      5.  DW.OP.constu

31          The single operand of the DW.OP.constu operation provides an unsign*
 *ed

32          LEB128 integer constant.


33      6.  DW.OP.consts

34          The single operand of the DW.OP.consts operation provides a signed

35          LEB128 integer constant.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 27
                                Chapter 2. General Description



 1      7.  DW.OP.addrx

 2          The DW.OP.addrx operation has a single operand that encodes an unsi*
 *gned

 3          LEB128 value, which is a zero-based index into the .debug_addr sect*
 *ion,

 4          where a machine address is stored. This index is relative to the va*
 *lue of the

 5          DW.AT.addr.base attribute of the associated compilation unit.


 6      8.  DW.OP.constx

 7          The DW.OP.constx operation has a single operand that encodes an uns*
 *igned

 8          LEB128 value, which is a zero-based index into the .debug_addr sect*
 *ion,

 9          where a constant, the size of a machine address, is stored. This in*
 *dex is

10          relative to the value of the DW.AT.addr.base attribute of the assoc*
 *iated

11          compilation unit.


12          The DW.OP.constx operation is provided for constants that require l*
 *ink-time

13          relocation but should not be interpreted by the consumer as a reloc*
 *atable address (for

14          example, ooesets to thread-local storage).


15      9.  DW.OP.const.type

16          The DW.OP.const.type operation takes three operands. The orst opera*
 *nd is

17          an unsigned LEB128 integer that represents the ooeset of a debugging

18          information entry in the current compilation unit, which must be a

19          DW.TAG.base.type entry that provides the type of the constant provi*
 *ded.

20          The second operand is 1-byte unsigned integer that specioes the siz*
 *e of the

21          constant value, which is the same as the size of the base type refe*
 *renced by

22          the orst operand. The third operand is a sequence of bytes of the g*
 *iven size

23          that is interpreted as a value of the referenced type.


24          While the size of the constant can be inferred from the base type d*
 *eonition, it is

25          encoded explicitly into the operation so that the operation can be *
 *parsed easily

26          without reference to the .debug_info section.



27      2.5.1.2 Register Values


28      The following operations push a value onto the stack that is either par*
 *t or all of

29      the contents of a register or the result of adding the contents of a re*
 *gister to a

30      given signed ooeset. DW.OP.regval.type pushes the contents of a register

31      together with the given base type. DW.OP.regval.bits pushes the partial

32      contents of a register together with the generic type. The other operat*
 *ions push

33      the result of adding the contents of a register to a given signed ooese*
 *t together

34      with the generic type.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 28
                                Chapter 2. General Description



 1      1.  DW.OP.fbreg

 2          The DW.OP.fbreg operation provides a signed LEB128 ooeset from the

 3          address specioed by the location description in the DW.AT.frame.base

 4          attribute of the current function.


 5          This is typically a stack pointer register plus or minus some ooese*
 *t.


 6      2.  DW.OP.breg0, DW.OP.breg1, . . . , DW.OP.breg31

 7          The single operand of the DW.OP.breg!n? operations provides a signed

 8          LEB128 ooeset from the contents of the specioed register.


 9      3.  DW.OP.bregx

10          The DW.OP.bregx operation provides the sum of two values specioed b*
 *y its

11          two operands. The orst operand is a register number which is specio*
 *ed by an

12          unsigned LEB128 number. The second operand is a signed LEB128 ooese*
 *t.


13      4.  DW.OP.regval.type

14          The DW.OP.regval.type operation pushes the contents of a given regi*
 *ster

15          interpreted as a value of a given type. The orst operand is an unsi*
 *gned

16          LEB128 number, which identioes a register whose contents is to be p*
 *ushed

17          onto the stack. The second operand is an unsigned LEB128 number that

18          represents the ooeset of a debugging information entry in the curre*
 *nt

19          compilation unit, which must be a DW.TAG.base.type entry that provi*
 *des

20          the type of the value contained in the specioed register.


21      5.  DW.OP.regval.bits

22          The DW.OP.regval.bits operation takes a single unsigned LEB128 inte*
 *ger

23          operand, which gives the number of bits to read. This number must be

24          smaller or equal to the bit size of the generic type. It pops the t*
 *op two stack

25          elements and interprets the top element as an unsigned bit ooeset f*
 *rom the

26          least signiocant bit end and the other as a register number identif*
 *ying the

27          register from which to extract the value. If the extracted value is*
 * smaller than

28          the size of the generic type, it is zero extended.



29      2.5.1.3 Stack Operations


30      The following operations manipulate the DWARF stack. Operations that in*
 *dex

31      the stack assume that the top of the stack (most recently added entry) *
 *has index 0.


32      Each entry on the stack has an associated type.


33      1.  DW.OP.dup

34          The DW.OP.dup operation duplicates the value (including its type

35          identioer) at the top of the stack.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 29
                                Chapter 2. General Description



 1      2.  DW.OP.drop

 2          The DW.OP.drop operation pops the value (including its type identio*
 *er) at

 3          the top of the stack.


 4      3.  DW.OP.pick

 5          The single operand of the DW.OP.pick operation provides a 1-byte in*
 *dex. A

 6          copy of the stack entry (including its type identioer) with the spe*
 *cioed index

 7          (0 through 255, inclusive) is pushed onto the stack.


 8      4.  DW.OP.over

 9          The DW.OP.over operation duplicates the entry currently second in t*
 *he

10          stack at the top of the stack. This is equivalent to a DW.OP.pick o*
 *peration,

11          with index 1.


12      5.  DW.OP.swap

13          The DW.OP.swap operation swaps the top two stack entries. The entry*
 * at

14          the top of the stack (including its type identioer) becomes the sec*
 *ond stack

15          entry, and the second entry (including its type identioer) becomes *
 *the top of

16          the stack.


17      6.  DW.OP.rot

18          The DW.OP.rot operation rotates the orst three stack entries. The e*
 *ntry at the

19          top of the stack (including its type identioer) becomes the third s*
 *tack entry,

20          the second entry (including its type identioer) becomes the top of *
 *the stack,

21          and the third entry (including its type identioer) becomes the seco*
 *nd entry.


22      7.  DW.OP.deref

23          The DW.OP.deref operation pops the top stack entry and treats it as*
 * an

24          address. The popped value must have an integral type. The value ret*
 *rieved

25          from that address is pushed, and has the generic type. The size of *
 *the data

26          retrieved from the dereferenced address is the size of an address o*
 *n the target

27          machine.


28      8.  DW.OP.deref.size

29          The DW.OP.deref.size operation behaves like the DW.OP.deref operati*
 *on:

30          it pops the top stack entry and treats it as an address. The popped*
 * value must

31          have an integral type. The value retrieved from that address is pus*
 *hed, and

32          has the generic type. In the DW.OP.deref.size operation, however, t*
 *he size

33          in bytes of the data retrieved from the dereferenced address is spe*
 *cioed by

34          the single operand. This operand is a 1-byte unsigned integral cons*
 *tant

35          whose value may not be larger than the size of the generic type. Th*
 *e data

36          retrieved is zero extended to the size of an address on the target *
 *machine

37          before being pushed onto the expression stack.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 30
                                Chapter 2. General Description



 1      9.  DW.OP.deref.type

 2          The DW.OP.deref.type operation behaves like the DW.OP.deref.size

 3          operation: it pops the top stack entry and treats it as an address.*
 * The popped

 4          value must have an integral type. The value retrieved from that add*
 *ress is

 5          pushed together with a type identioer. In the DW.OP.deref.type oper*
 *ation,

 6          the size in bytes of the data retrieved from the dereferenced addre*
 *ss is

 7          specioed by the orst operand. This operand is a 1-byte unsigned int*
 *egral

 8          constant whose value which is the same as the size of the base type

 9          referenced by the second operand. The second operand is an unsigned

10          LEB128 integer that represents the ooeset of a debugging informatio*
 *n entry in

11          the current compilation unit, which must be a DW.TAG.base.type entr*
 *y that

12          provides the type of the data pushed.


13          While the size of the pushed value could be inferred from the base *
 *type deonition, it is

14          encoded explicitly into the operation so that the operation can be *
 *parsed easily

15          without reference to the .debug_info section.


16    10.   DW.OP.xderef

17          The DW.OP.xderef operation provides an extended dereference mechani*
 *sm.

18          The entry at the top of the stack is treated as an address. The sec*
 *ond stack

19          entry is treated as an iaddress space identioerj for those architec*
 *tures that

20          support multiple address spaces. Both of these entries must have in*
 *tegral

21          type identioers. The top two stack elements are popped, and a data *
 *item is

22          retrieved through an implementation-deoned address calculation and *
 *pushed

23          as the new stack top together with the generic type identioer. The *
 *size of the

24          data retrieved from the dereferenced address is the size of the gen*
 *eric type.


25    11.   DW.OP.xderef.size

26          The DW.OP.xderef.size operation behaves like the DW.OP.xderef

27          operation. The entry at the top of the stack is treated as an addre*
 *ss. The

28          second stack entry is treated as an iaddress space identioerj for t*
 *hose

29          architectures that support multiple address spaces. Both of these e*
 *ntries must

30          have integral type identioers. The top two stack elements are poppe*
 *d, and a

31          data item is retrieved through an implementation-deoned address cal*
 *culation

32          and pushed as the new stack top. In the DW.OP.xderef.size operation,

33          however, the size in bytes of the data retrieved from the dereferen*
 *ced address

34          is specioed by the single operand. This operand is a 1-byte unsigne*
 *d integral

35          constant whose value may not be larger than the size of an address *
 *on the

36          target machine. The data retrieved is zero extended to the size of *
 *an address

37          on the target machine before being pushed onto the expression stack*
 * together

38          with the generic type identioer.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 31
                                Chapter 2. General Description



 1    12.   DW.OP.xderef.type

 2          The DW.OP.xderef.type operation behaves like the DW.OP.xderef.size

 3          operation: it pops the top two stack entries, treats them as an add*
 *ress and an

 4          address space identioer, and pushes the value retrieved. In the

 5          DW.OP.xderef.type operation, the size in bytes of the data retrieve*
 *d from

 6          the dereferenced address is specioed by the orst operand. This oper*
 *and is a

 7          1-byte unsigned integral constant whose value value which is the sa*
 *me as the

 8          size of the base type referenced by the second operand. The second *
 *operand

 9          is an unsigned LEB128 integer that represents the ooeset of a debug*
 *ging

10          information entry in the current compilation unit, which must be a

11          DW.TAG.base.type entry that provides the type of the data pushed.


12    13.   DW.OP.push.object.address

13          The DW.OP.push.object.address operation pushes the address of the o*
 *bject

14          currently being evaluated as part of evaluation of a user presented

15          expression. This object may correspond to an independent variable d*
 *escribed

16          by its own debugging information entry or it may be a component of *
 *an

17          array, structure, or class whose address has been dynamically deter*
 *mined by

18          an earlier step during user expression evaluation.


19          This operator provides explicit functionality (especially for array*
 *s involving

20          descriptors) that is analogous to the implicit push of the base add*
 *ress of a structure

21          prior to evaluation of a DW.AT.data.member.location to access a dat*
 *a member of a

22          structure. For an example, see Appendix D.2 on page 306.


23    14.   DW.OP.form.tls.address

24          The DW.OP.form.tls.address operation pops a value from the stack, w*
 *hich

25          must have an integral type identioer, translates this value into an*
 * address in

26          the thread-local storage for a thread, and pushes the address onto *
 *the stack

27          together with the generic type identioer. The meaning of the value *
 *on the top

28          of the stack prior to this operation is deoned by the run-time envi*
 *ronment. If

29          the run-time environment supports multiple thread-local storage blo*
 *cks for a

30          single thread, then the block corresponding to the executable or sh*
 *ared

31          library containing this DWARF expression is used.


32          Some implementations of C, C++, Fortran, and other languages, suppo*
 *rt a

33          thread-local storage class. Variables with this storage class have *
 *distinct values and

34          addresses in distinct threads, much as automatic variables have dis*
 *tinct values and

35          addresses in each function invocation. Typically, there is a single*
 * block of storage

36          containing all thread-local variables declared in the main executab*
 *le, and a separate

37          block for the variables declared in each shared library. Each threa*
 *d-local variable can

38          then be accessed in its block using an identioer. This identioer is*
 * typically an ooeset

39          into the block and pushed onto the DWARF stack by one of the



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 32
                                Chapter 2. General Description



 1         DW.OP.const!n?!x? operations prior to the DW.OP.form.tls.address

 2         operation. Computing the address of the appropriate block can be com*
 *plex (in some

 3         cases, the compiler emits a function call to do it), and diOEcult to*
 * describe using

 4         ordinary DWARF location descriptions. Instead of forcing complex thr*
 *ead-local

 5         storage calculations into the DWARF expressions, the DW.OP.form.tls.*
 *address

 6         allows the consumer to perform the computation based on the run-time*
 * environment.


 7    15.   DW.OP.call.frame.cfa

 8          The DW.OP.call.frame.cfa operation pushes the value of the CFA, obt*
 *ained

 9          from the Call Frame Information (see Section 6.4 on page 178).


10          Although the value of DW.AT.frame.base can be computed using other *
 *DWARF

11          expression operators, in some cases this would require an extensive*
 * location list

12          because the values of the registers used in computing the CFA chang*
 *e during a

13          subroutine. If the Call Frame Information is present, then it alrea*
 *dy encodes such

14          changes, and it is space eOEcient to reference that.


15    16.   DW.OP.push.lane

16          The DW.OP.push.lane operation pushes a lane index value of the gene*
 *ric

17          type, which provides the context of the lane in which the expressio*
 *n is being

18          evaluated. See section 3.3.5 on page 83.


19          Producers that widen source code into vectorized machine code may u*
 *se this

20          operation to describe the location of a source variable as function*
 * of a single lane in

21          the widened machine code.


22          Consumers supply the lane argument to obtain the location of the in*
 *stance of that

23          source variable that corresponds to the provided lane argument.


24      Examples illustrating many of these stack operations are found in Appen*
 *dix D.1.2 on

25      page 302.



26      2.5.1.4 Arithmetic and Logical Operations


27      The following provide arithmetic and logical operations. Operands of an

28      operation with two operands must have the same type, either the same ba*
 *se type

29      or the generic type. The result of the operation which is pushed back h*
 *as the

30      same type as the type of the operand(s).


31      If the type of the operands is the generic type, except as otherwise sp*
 *ecioed, the

32      arithmetic operations perform addressing arithmetic, that is, unsigned *
 *arithmetic

33      that is performed modulo one plus the largest representable address.


34      Operations other than DW.OP.abs, DW.OP.div, DW.OP.minus,

35      DW.OP.mul, DW.OP.neg and DW.OP.plus require integral types of the



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 33
                                Chapter 2. General Description



 1      operand (either integral base type or the generic type). Operations do *
 *not cause

 2      an exception on overAEow.


 3      1.  DW.OP.abs

 4          The DW.OP.abs operation pops the top stack entry, interprets it as *
 *a signed

 5          value and pushes its absolute value. If the absolute value cannot be

 6          represented, the result is undeoned.


 7      2.  DW.OP.and

 8          The DW.OP.and operation pops the top two stack values, performs a

 9          bitwise and operation on the two, and pushes the result.


10      3.  DW.OP.div

11          The DW.OP.div operation pops the top two stack values, divides the *
 *former

12          second entry by the former top of the stack using signed division, *
 *and pushes

13          the result.


14      4.  DW.OP.minus

15          The DW.OP.minus operation pops the top two stack values, subtracts *
 *the

16          former top of the stack from the former second entry, and pushes th*
 *e result.


17      5.  DW.OP.mod

18          The DW.OP.mod operation pops the top two stack values and pushes the

19          result of the calculation: former second stack entry modulo the for*
 *mer top of

20          the stack.


21      6.  DW.OP.mul

22          The DW.OP.mul operation pops the top two stack entries, multiplies *
 *them

23          together, and pushes the result.


24      7.  DW.OP.neg

25          The DW.OP.neg operation pops the top stack entry, interprets it as *
 *a signed

26          value and pushes its negation. If the negation cannot be represente*
 *d, the

27          result is undeoned.


28      8.  DW.OP.not

29          The DW.OP.not operation pops the top stack entry, and pushes its bi*
 *twise

30          complement.


31      9.  DW.OP.or

32          The DW.OP.or operation pops the top two stack entries, performs a b*
 *itwise

33          or operation on the two, and pushes the result.


34    10.   DW.OP.plus

35          The DW.OP.plus operation pops the top two stack entries, adds them

36          together, and pushes the result.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 34
                                Chapter 2. General Description



 1    11.   DW.OP.plus.uconst

 2          The DW.OP.plus.uconst operation pops the top stack entry, adds it t*
 *o the

 3          unsigned LEB128 constant operand interpreted as the same type as the

 4          operand popped from the top of the stack and pushes the result.


 5          This operation is supplied speciocally to be able to encode more oe*
 *ld ooesets in two

 6          bytes than can be done with iDW.OP.lit!n? DW.OP.plus.j


 7    12.   DW.OP.shl

 8          The DW.OP.shl operation pops the top two stack entries, shifts the *
 *former

 9          second entry left (olling with zero bits) by the number of bits spe*
 *cioed by the

10          former top of the stack, and pushes the result.


11    13.   DW.OP.shr

12          The DW.OP.shr operation pops the top two stack entries, shifts the *
 *former

13          second entry right logically (olling with zero bits) by the number *
 *of bits

14          specioed by the former top of the stack, and pushes the result.


15    14.   DW.OP.shra

16          The DW.OP.shra operation pops the top two stack entries, shifts the*
 * former

17          second entry right arithmetically (divide the magnitude by 2, keep *
 *the same

18          sign for the result) by the number of bits specioed by the former t*
 *op of the

19          stack, and pushes the result.


20    15.   DW.OP.xor

21          The DW.OP.xor operation pops the top two stack entries, performs a *
 *bitwise

22          exclusive-or operation on the two, and pushes the result.



23      2.5.1.5 Control Flow Operations


24      The following operations provide simple control of the AEow of a DWARF

25      expression.


26      1.  DW.OP.le, DW.OP.ge, DW.OP.eq, DW.OP.lt, DW.OP.gt, DW.OP.ne

27          The six relational operators each:


28            # pop the top two stack values, which have the same type, either *
 *the same

29              base type or the generic type,


30            # compare the operands:

31              ! former second entry ?! relational operator ?! former top entr*
 *y ?


32            # push the constant value 1 onto the stack if the result of the o*
 *peration is

33              true or the constant value 0 if the result of the operation is *
 *false. The

34              pushed value has the generic type.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 35
                                Chapter 2. General Description



 1         If the operands have the generic type, the comparisons are performed*
 * as

 2         signed operations.


 3      2.  DW.OP.skip

 4          DW.OP.skip is an unconditional branch. Its single operand is a 2-by*
 *te

 5          signed integer constant. The 2-byte constant is the number of bytes*
 * of the

 6          DWARF expression to skip forward or backward from the current opera*
 *tion,

 7          beginning after the 2-byte constant.


 8      3.  DW.OP.bra

 9          DW.OP.bra is a conditional branch. Its single operand is a 2-byte s*
 *igned

10          integer constant. This operation pops the top of stack. If the valu*
 *e popped is

11          not the constant 0, the 2-byte constant operand is the number of by*
 *tes of the

12          DWARF expression to skip forward or backward from the current opera*
 *tion,

13          beginning after the 2-byte constant.


14      4.  DW.OP.call2, DW.OP.call4, DW.OP.call.ref

15          DW.OP.call2, DW.OP.call4, and DW.OP.call.ref perform DWARF

16          procedure calls during evaluation of a DWARF expression or location

17          description. For DW.OP.call2 and DW.OP.call4, the operand is the 2-*
 * or

18          4-byte unsigned ooeset, respectively, of a debugging information en*
 *try in the

19          current compilation unit. The DW.OP.call.ref operator has a single *
 *operand.

20          In the 32-bit DWARF format, the operand is a 4-byte unsigned value;*
 * in the

21          64-bit DWARF format, it is an 8-byte unsigned value (see Section 7.*
 *4 on

22          page 203). The operand is used as the ooeset of a debugging informa*
 *tion entry

23          in the .debug_info section of the current executable or shared obje*
 *ct ole.


24          Operand interpretation of DW.OP.call2, DW.OP.call4 and DW.OP.call.r*
 *ef is

25          exactly like that for DW.FORM.ref2, DW.FORM.ref4 and DW.FORM.ref.ad*
 *dr,

26          respectively (see Section 7.5.4 on page 216).


27          These operations transfer control of DWARF expression evaluation to*
 * the

28          DW.AT.location attribute of the referenced debugging information en*
 *try. If

29          there is no such attribute, then there is no eoeect. Execution of t*
 *he DWARF

30          expression of a DW.AT.location attribute may add to and/or remove f*
 *rom

31          values on the stack. Execution returns to the point following the c*
 *all when

32          the end of the attribute is reached. Values on the stack at the tim*
 *e of the call

33          may be used as parameters by the called expression and values left *
 *on the

34          stack by the called expression may be used as return values by prior

35          agreement between the calling and called expressions.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 36
                                Chapter 2. General Description



 1      2.5.1.6 Type Conversions


 2      The following operations provide for explicit type conversion.


 3      1.  DW.OP.convert

 4          The DW.OP.convert operation pops the top stack entry, converts it t*
 *o a

 5          dioeerent type, then pushes the result. It takes one operand, which*
 * is an

 6          unsigned LEB128 integer that represents the ooeset of a debugging

 7          information entry in the current compilation unit, or value 0 which*
 * represents

 8          the generic type. If the operand is non-zero, the referenced entry *
 *must be a

 9          DW.TAG.base.type entry that provides the type to which the value is

10          converted.


11      2.  DW.OP.reinterpret

12          The DW.OP.reinterpret operation pops the top stack entry, reinterpr*
 *ets the

13          bits in its value as a value of a dioeerent type, then pushes the r*
 *esult. It takes

14          one operand, which is an unsigned LEB128 integer that represents th*
 *e ooeset

15          of a debugging information entry in the current compilation unit, o*
 *r value 0

16          which represents the generic type. If the operand is non-zero, the *
 *referenced

17          entry must be a DW.TAG.base.type entry that provides the type to wh*
 *ich

18          the value is converted. The type of the operand and result type mus*
 *t have the

19          same size in bits.



20      2.5.1.7 Special Operations


21      There are these special operations currently deoned:


22      1.  DW.OP.nop

23          The DW.OP.nop operation is a place holder. It has no eoeect on the *
 *location

24          stack or any of its values.


25      2.  DW.OP.entry.value

26          The DW.OP.entry.value operation pushes the value that an expression

27          would have had, or a register location would have held, upon enteri*
 *ng the

28          current subprogram. It has two operands: an unsigned LEB128 length,

29          followed by a block containing a DWARF expression or a register loc*
 *ation

30          description (see Section 2.6.1.1.3 on page 40). The length operand *
 *specioes

31          the length in bytes of the block. If the block contains a DWARF exp*
 *ression,

32          the DWARF expression is evaluated as if it had been evaluated upon *
 *entering

33          the current subprogram. The DWARF expression assumes no values are

34          present on the DWARF stack initially and results in exactly one val*
 *ue being

35          pushed on the DWARF stack when completed. If the block contains a r*
 *egister

36          location description, DW.OP.entry.value pushes the value that regis*
 *ter held

37          upon entering the current subprogram.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 37
                                Chapter 2. General Description



 1         DW.OP.push.object.address is not meaningful inside of this DWARF

 2         operation.


 3         The register location description provides a more compact form for t*
 *he case where the

 4         value was in a register on entry to the subprogram.


 5         The values needed to evaluate DW.OP.entry.value could be obtained in*
 * several

 6         ways. The consumer could suspend execution on entry to the subprogra*
 *m, record

 7         values needed by DW.OP.entry.value expressions within the subprogram*
 *, and then

 8         continue; when evaluating DW.OP.entry.value, the consumer would use *
 *these

 9         recorded values rather than the current values. Or, when evaluating

10         DW.OP.entry.value, the consumer could virtually unwind using the Cal*
 *l Frame

11         Information (see Section 6.4 on page 178) to recover register values*
 * that might have

12         been clobbered since the subprogram entry point.


13      3.  DW.OP.extended

14          The DW.OP.extended opcode encodes an extension operation. It has at*
 * least

15          one operand: a ULEB128 constant identifying the extension operation*
 *. The

16          remaining operands are deoned by the extension opcode, which are na*
 *med

17          using a preox of DW.OP.EXT. The extension opcode 0 is reserved.


18      4.  DW.OP.user.extended

19          The DW.OP.user.extended opcode encodes a producer extension operati*
 *on.

20          It has at least one operand: a ULEB128 constant identifying a produ*
 *cer

21          extension operation. The remaining operands are deoned by the produ*
 *cer

22          extension. The producer extension opcode 0 is reserved and cannot b*
 *e used

23          by any producer extension.


24          The DW.OP.user.extended encoding space can be understood to supplem*
 *ent the

25          space deoned by DW.OP.lo.user and DW.OP.hi.user that is allocated b*
 *y the

26          standard for the same purpose.



27      2.5.2   Value Lists


28      Value lists are used in place of DWARF expressions whenever the value o*
 *f an

29      object's attribute can change during the lifetime of that object.


30      Value lists are contained in a separate object ole section, along with *
 *location lists

31      (see 2.6.2 on page 44).


32      A value list is indicated by an attribute whose value is of class valli*
 *st (see Section

33      7.5.5 on page 221).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 38
                                Chapter 2. General Description



 1      A value list consists of a series of value list entries. The representa*
 *tion of a value

 2      list is the same as for a location list (see 2.6.2 on page 44), except *
 *that bounded

 3      location description and default location description entries are under*
 *stood to

 4      provide DWARF expressions that produce values rather than location

 5      descriptions.


 6      The DWARF expressions in value list entries, being expressions and not *
 *location

 7      descriptions, may not contain any of the DWARF operations described in *
 *Section 2.6.


 8      The address ranges deoned by the bounded expressions of a value list may

 9      overlap. When they do, the meaning is undeoned if the overlapping expre*
 *ssions

10      do not produce the same value.



11      2.6    Location Descriptions


12      Debugging information must provide consumers a way to ond the location *
 *of program

13      variables, determine the bounds of dynamic arrays and strings, and poss*
 *ibly to ond the

14      base address of a subroutine's stack frame or the return address of a s*
 *ubroutine.

15      Furthermore, to meet the needs of recent computer architectures and opt*
 *imization

16      techniques, debugging information must be able to describe the location*
 * of an object

17      whose location changes over the object's lifetime.


18      Information about the location of program objects is provided by locati*
 *on

19      descriptions. Location descriptions can be either of two forms:


20      1.  Single location descriptions, which are a language independent repr*
 *esentation

21          of addressing rules of arbitrary complexity built from DWARF expres*
 *sions

22          (See Section 2.5 on page 26) and/or other DWARF operations specioc *
 *to

23          describing locations. They are suOEcient for describing the locatio*
 *n of any

24          object as long as its lifetime is either static or the same as the *
 *lexical block that

25          owns it, excluding any prologue or epilogue ranges, and it does not*
 * move

26          during its lifetime.


27      2.  Location lists, which are used to describe objects that have a limi*
 *ted lifetime or

28          change their location during their lifetime. Location lists are des*
 *cribed in

29          Section 2.6.2 on page 44 below.


30      Location descriptions are distinguished in a context sensitive manner. *
 *As the

31      value of an attribute, a single location description is encoded using c*
 *lass locdesc

32      and a location list is encoded using class loclist (which serves as an *
 *index into a

33      separate section containing location lists).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 39
                                Chapter 2. General Description



 1      2.6.1   Single Location Descriptions


 2      A single location description is either:


 3      1.  A simple location description, representing an object which exists *
 *in one

 4          contiguous piece at the given location, or


 5      2.  A composite location description consisting of one or more simple l*
 *ocation

 6          descriptions, each of which is followed by one composition operatio*
 *n. Each

 7          simple location description describes the location of one piece of *
 *the object;

 8          each composition operation describes which part of the object is lo*
 *cated

 9          there. Each simple location description that is a DWARF expression *
 *is

10          evaluated independently of any others.



11      2.6.1.1 Simple Location Descriptions


12      A simple location description represents one contiguous piece or all of*
 * an object

13      or value.



14      2.6.1.1.1  Empty Location Descriptions

15      An empty location description consists of a DWARF expression containing*
 * no

16      operations. It represents a piece or all of an object that is present i*
 *n the source but

17      not in the object code (perhaps due to optimization).



18      2.6.1.1.2  Memory Location Descriptions

19      A memory location description consists of a non-empty DWARF expression *
 *(see

20      Section 2.5 on page 26), whose value is the address of a piece or all o*
 *f an object or

21      other entity in memory.



22      2.6.1.1.3  Register Location Descriptions

23      A register location description consists of a register name operation, *
 *which

24      represents a piece or all of an object located in a given register.


25      Register location descriptions describe an object (or a piece of an obj*
 *ect) that resides in a

26      register, while the opcodes listed in Section 2.5.1.2 on page 28 are us*
 *ed to describe an

27      object (or a piece of an object) that is located in memory at an addres*
 *s that is contained in

28      a register (possibly ooeset by some constant). A register location desc*
 *ription must stand

29      alone as the entire description of an object or a piece of an object.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 40
                                Chapter 2. General Description



 1      The following DWARF operations can be used to specify a register locati*
 *on.


 2      Note that the register number represents a DWARF specioc mapping of num*
 *bers onto

 3      the actual registers of a given architecture. The mapping should be cho*
 *sen to gain optimal

 4      density and should be shared by all users of a given architecture. It i*
 *s recommended that

 5      this mapping be deoned by the ABI authoring committee for each architec*
 *ture.


 6      1.  DW.OP.reg0, DW.OP.reg1, ..., DW.OP.reg31

 7          The DW.OP.reg!n? operations encode the names of up to 32 registers,

 8          numbered from 0 through 31, inclusive. The object addressed is in r*
 *egister n.


 9      2.  DW.OP.regx

10          The DW.OP.regx operation has a single unsigned LEB128 literal opera*
 *nd

11          that encodes the name of a register.


12      These operations name a register location. To fetch the contents of a r*
 *egister, it is

13      necessary to use one of the register based addressing operations, such *
 *as DW.OP.bregx

14      (Section 2.5.1.2 on page 28).



15      2.6.1.1.4  Implicit Location Descriptions

16      An implicit location description represents a piece or all of an object*
 * which has

17      no actual location but whose contents are nonetheless either known or k*
 *nown to

18      be undeoned.


19      The following DWARF operations may be used to specify a value that has *
 *no

20      location in the program but is a known constant or is computed from oth*
 *er

21      locations and values in the program.


22      1.  DW.OP.implicit.value

23          The DW.OP.implicit.value operation specioes an immediate value using

24          two operands: an unsigned LEB128 length, followed by a sequence of *
 *bytes

25          of the given length that contain the value.


26      2.  DW.OP.stack.value

27          The DW.OP.stack.value operation specioes that the object does not e*
 *xist in

28          memory but its value is nonetheless known and is at the top of the *
 *DWARF

29          expression stack. In this form of location description, the DWARF e*
 *xpression

30          represents the actual value of the object, rather than its location*
 *. The

31          DW.OP.stack.value operation terminates the expression.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 41
                                Chapter 2. General Description



 1      3.  DW.OP.implicit.pointer

 2          An optimizing compiler may eliminate a pointer, while still retaini*
 *ng the value that

 3          the pointer addressed. DW.OP.implicit.pointer allows a producer to *
 *describe this

 4          value.


 5          The DW.OP.implicit.pointer operation specioes that the object is a *
 *pointer

 6          that cannot be represented as a real pointer, even though the value*
 * it would

 7          point to can be described. In this form of location description, th*
 *e DWARF

 8          expression refers to a debugging information entry that represents *
 *the actual

 9          value of the object to which the pointer would point. Thus, a consu*
 *mer of the

10          debug information would be able to show the value of the dereferenc*
 *ed

11          pointer, even when it cannot show the value of the pointer itself.


12          The DW.OP.implicit.pointer operation has two operands: a reference *
 *to a

13          debugging information entry that describes the dereferenced object'*
 *s value,

14          and a signed number that is treated as a byte ooeset from the start*
 * of that

15          value. The orst operand is a 4-byte unsigned value in the 32-bit DW*
 *ARF

16          format, or an 8-byte unsigned value in the 64-bit DWARF format (see*
 * Section

17          7.4 on page 203) that is used as the ooeset of a debugging informat*
 *ion entry in

18          the .debug_info section of the current executable or shared object *
 *ole. The

19          second operand is a signed LEB128 number.


20          The debugging information entry referenced by a DW.OP.implicit.poin*
 *ter

21          operation is typically a DW.TAG.variable or DW.TAG.formal.parameter*
 * entry

22          whose DW.AT.location attribute gives a second DWARF expression or a*
 * location

23          list that describes the value of the object, but the referenced ent*
 *ry may be any entry

24          that contains a DW.AT.location or DW.AT.const.value attribute (for *
 *example,

25          DW.TAG.dwarf.procedure). By using the second DWARF expression, a co*
 *nsumer

26          can reconstruct the value of the object when asked to dereference t*
 *he pointer described

27          by the original DWARF expression containing the DW.OP.implicit.poin*
 *ter

28          operation.


29      DWARF location descriptions are intended to yield the location of a val*
 *ue rather than

30      the value itself. An optimizing compiler may perform a number of code t*
 *ransformations

31      where it becomes impossible to give a location for a value, but it rema*
 *ins possible to

32      describe the value itself. Section 2.6.1.1.3 on page 40 describes opera*
 *tors that can be used

33      to describe the location of a value when that value exists in a registe*
 *r but not in memory.

34      The operations in this section are used to describe values that exist n*
 *either in memory nor

35      in a single register.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 42
                                Chapter 2. General Description



 1      2.6.1.2 Composite Location Descriptions


 2      A composite location description describes an object or value which may*
 * be

 3      contained in part of a register or stored in more than one location. Ea*
 *ch piece is

 4      described by a composition operation, which does not compute a value no*
 *r store

 5      any result on the DWARF stack. There may be one or more composition

 6      operations in a single composite location description. A series of such*
 * operations

 7      describes the parts of a value in memory address order.


 8      Each composition operation is immediately preceded by a simple location

 9      description which describes the location where part of the resultant va*
 *lue is

10      contained.


11      1.  DW.OP.piece

12          The DW.OP.piece operation takes a single operand, which is an unsig*
 *ned

13          LEB128 number. The number describes the size in bytes of the piece *
 *of the

14          object referenced by the preceding simple location description. If *
 *the piece is

15          located in a register, but does not occupy the entire register, the*
 * placement of

16          the piece within that register is deoned by the ABI.


17          Many compilers store a single variable in sets of registers, or sto*
 *re a variable partially

18          in memory and partially in registers. DW.OP.piece provides a way of*
 * describing

19          how large a part of a variable a particular DWARF location descript*
 *ion refers to.


20      2.  DW.OP.bit.piece

21          The DW.OP.bit.piece operation takes two operands. The orst is an un*
 *signed

22          LEB128 number that gives the size in bits of the piece. The second *
 *is an

23          unsigned LEB128 number that gives the ooeset in bits from the locat*
 *ion

24          deoned by the preceding DWARF location description.


25          Interpretation of the ooeset depends on the location description. I*
 *f the location

26          description is empty (see Section 2.6.1.1.1 on page 40), the DW.OP.*
 *bit.piece

27          operation describes a piece consisting of the given number of bits *
 *whose

28          values are undeoned, and the ooeset is ignored. If the location is *
 *a memory

29          address (see Section 2.6.1.1.2 on page 40), the DW.OP.bit.piece ope*
 *ration

30          describes a sequence of bits relative to the location whose address*
 * is on the

31          top of the DWARF stack using the bit numbering and direction conven*
 *tions

32          that are appropriate to the current language on the target system. *
 *In all other

33          cases, the source of the piece is given by either a register locati*
 *on (see Section

34          2.6.1.1.3 on page 40) or an implicit value description (see Section*
 * 2.6.1.1.4 on

35          page 41); the ooeset is from the least signiocant bit of the source*
 * value.


36      A composition operation that follows an empty location description indi*
 *cates

37      that the piece is undeoned, for example because it has been optimized a*
 *way.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 43
                                Chapter 2. General Description



 1      DW.OP.bit.piece is used instead of DW.OP.piece when the piece to be ass*
 *embled into

 2      a value or assigned to is not byte-sized or is not at the start of a re*
 *gister or addressable

 3      unit of memory.


 4      Whether or not a DW.OP.piece operation is equivalent to any DW.OP.bit.p*
 *iece

 5      operation with an ooeset of 0 is ABI dependent.



 6      2.6.2   Location Lists


 7      Location lists are used in place of location descriptions whenever the *
 *object

 8      whose location is being described can change location during its lifeti*
 *me.

 9      Location lists are contained in a separate object ole section called

10      .debug_loclists or .debug_loclists.dwo (for split DWARF object oles).


11      A location list is indicated by a location or other attribute whose val*
 *ue is of class

12      loclist (see Section 7.5.5 on page 221).


13      This location list representation, the loclist class, and the related D*
 *W.AT.loclists.base

14      attribute are new in DWARF Version 5. Together they eliminate most or a*
 *ll of the object

15      language relocations previously needed for location lists.


16      A location list consists of a series of location list entries. Each loc*
 *ation list entry is

17      one of the following kinds:


18        #  Bounded location description. This kind of entry provides a locati*
 *on

19           description that specioes the location of an object that is valid *
 *over a

20           lifetime bounded by a starting and ending address. The starting ad*
 *dress is

21           the lowest address of the address range over which the location is*
 * valid.

22           The ending address is the address of the orst location past the hi*
 *ghest

23           address of the address range. When the current PC is within the gi*
 *ven

24           range, the location description may be used to locate the specioed*
 * object.

25           The location description is valid even if the address range includ*
 *es

26           addresses within a prologue or epilogue range.


27           There are several kinds of bounded location description entries wh*
 *ich

28           dioeer in the way that they specify the starting and ending addres*
 *ses.


29           The address ranges deoned by the bounded location descriptions of a

30           location list may overlap. When they do, they describe a situation*
 * in which

31           an object exists simultaneously in more than one place. If all of *
 *the address

32           ranges in a given location list do not collectively cover the enti*
 *re range over

33           which the object in question is deoned, and there is no following *
 *default

34           location description, it is assumed that the object is not availab*
 *le for the

35           portion of the range that is not covered.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 44
                                Chapter 2. General Description



 1           In the case of a bounded location description where the range is d*
 *eoned by

 2           a starting address and either an ending address or a length, a sta*
 *rting

 3           address consisting of the reserved address value (see Section 2.4.*
 *1 on

 4           page 26) indicates a non-existent range, which is equivalent to om*
 *itting the

 5           description.


 6        #  Default location description. This kind of entry provides a locati*
 *on

 7           description that specioes the location of an object that is valid *
 *when no

 8           bounded location description applies. As with simple location desc*
 *riptions,

 9           the lifetime of a default location excludes any prologue or epilog*
 *ue ranges.


10        #  Base address. This kind of entry provides an address to be used as*
 * the base

11           address for beginning and ending address ooesets given in certain *
 *kinds of

12           bounded location description. The applicable base address of a bou*
 *nded

13           location description entry is the address specioed by the closest *
 *preceding

14           base address entry in the same location list. If there is no prece*
 *ding base

15           address entry, then the applicable base address defaults to the ba*
 *se address

16           of the compilation unit (see Section 3.1.1 on page 62).


17           In the case of a compilation unit where all of the machine code is*
 * contained

18           in a single contiguous section, no base address entry is needed.


19           If the base address is the reserved target address, either explici*
 *tly or by

20           default, then the range of any bounded location description deoned*
 * relative

21           to that base address is non-existent, which is equivalent to omitt*
 *ing the

22           description.


23        #  End-of-list. This kind of entry marks the end of the location list.


24      A location list consists of a sequence of zero or more bounded location

25      description or base address entries, optionally followed by a default l*
 *ocation

26      entry, and terminated by an end-of-list entry.


27      Each location list entry begins with a single byte identifying the kind*
 * of that

28      entry, followed by zero or more operands depending on the kind.


29      In the descriptions that follow, these terms are used for operands:


30        #  A counted location description operand consists of an unsigned ULEB

31           integer giving the length of the location description (see Section*
 * 2.6.1 on

32           page 40) that immediately follows.


33        #  An address index operand is the index of an address in the .debug_*
 *addr

34           section. This index is relative to the value of the DW.AT.addr.base

35           attribute of the associated compilation unit. The address given by*
 * this kind

36           of operand is not relative to the compilation unit base address.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 45
                                Chapter 2. General Description



 1        #  A target address operand is an address on the target machine. (Its*
 * size is

 2           the same as used for attribute values of class address, speciocall*
 *y,

 3           DW.FORM.addr.)


 4      The following entry kinds are deoned for use in both split or non-split*
 * units:


 5      1.  DW.LLE.end.of.list

 6          An end-of-list entry contains no further data.


 7          A series of this kind of entry may be used for padding or alignment*
 * purposes.


 8      2.  DW.LLE.base.addressx

 9          This is a form of base address entry that has one unsigned LEB128 o*
 *perand.

10          The operand value is an address index (into the .debug_addr section*
 *) that

11          indicates the applicable base address used by subsequent

12          DW.LLE.ooeset.pair entries.


13      3.  DW.LLE.startx.endx

14          This is a form of bounded location description entry (see page 44) *
 *that has

15          two unsigned LEB128 operands. The operand values are address indice*
 *s (into

16          the .debug_addr section). These indicate the starting and ending ad*
 *dresses,

17          respectively, that deone the address range for which this location *
 *is valid.

18          These operands are followed by a counted location description.


19      4.  DW.LLE.startx.length

20          This is a form of bounded location description entry (see page 44) *
 *that has

21          two unsigned LEB128 operands. The orst value is an address index (i*
 *nto the

22          .debug_addr section) that indicates the beginning of the address ra*
 *nge over

23          which the location is valid. The second value is the length of the *
 *range. These

24          operands are followed by a counted location description.


25      5.  DW.LLE.ooeset.pair

26          This is a form of bounded location description entry (see page 44) *
 *that has

27          two unsigned LEB128 operands. The values of these operands are the *
 *starting

28          and ending ooesets, respectively, relative to the applicable base a*
 *ddress, that

29          deone the address range for which this location is valid. These ope*
 *rands are

30          followed by a counted location description.


31      6.  DW.LLE.default.location

32          The operand is a counted location description which deones where an*
 * object

33          is located if no prior location description is valid.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 46
                                Chapter 2. General Description



 1      7.  DW.LLE.include.loclistx

 2          This is a form of list inclusion, that has one unsigned LEB128 oper*
 *and. The

 3          value is an index into the .debug_loclists section, interpreted the*
 * same way

 4          as the operand of DW.FORM.loclistx to ond a target list of entries,*
 * which

 5          will be regarded as part of the current location list, up to the

 6          DW.LLE.end.of.list entry.


 7      The following kinds of location list entries are deoned for use only in*
 * non-split

 8      DWARF units:


 9      7.  DW.LLE.base.address

10          A base address entry has one target address operand. This address i*
 *s used as

11          the base address when interpreting ooesets in subsequent location l*
 *ist entries

12          of kind DW.LLE.ooeset.pair.


13      8.  DW.LLE.start.end

14          This is a form of bounded location description entry (see page 44) *
 *that has

15          two target address operands. These indicate the starting and ending

16          addresses, respectively, that deone the address range for which the*
 * location is

17          valid. These operands are followed by a counted location descriptio*
 *n.


18      9.  DW.LLE.start.length

19          This is a form of bounded location description entry (see page 44) *
 *that has

20          one target address operand value and an unsigned LEB128 integer ope*
 *rand

21          value. The address is the beginning address of the range over which*
 * the

22          location description is valid, and the length is the number of byte*
 *s in that

23          range. These operands are followed by a counted location descriptio*
 *n.


24    10.   DW.LLE.include.loclist

25          This is a form of list inclusion, that has one ooeset operand. The *
 *value is an

26          ooeset into the .debug_loclists section, like the operand of

27          DW.FORM.sec.ooeset. The ooeset identioes the orst entry of a locati*
 *on list

28          whose entries are to be regarded as part of the current location li*
 *st, up to the

29          DW.LLE.end.of.list entry.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 47
                                Chapter 2. General Description



 1      2.7    Types of Program Entities


 2      Any debugging information entry describing a declaration that has a typ*
 *e has a

 3      DW.AT.type attribute, whose value is a reference to another debugging

 4      information entry. The entry referenced may describe a base type, that *
 *is, a type

 5      that is not deoned in terms of other data types, or it may describe a u*
 *ser-deoned

 6      type, such as an array, structure or enumeration. Alternatively, the en*
 *try

 7      referenced may describe a type modioer, such as constant, packed, point*
 *er,

 8      reference or volatile, which in turn will reference another entry descr*
 *ibing a type

 9      or type modioer (using a DW.AT.type attribute of its own). See Chapter 5

10      following for descriptions of the entries describing base types, user-d*
 *eoned types

11      and type modioers.



12      2.8    Accessibility of Declarations


13      Some languages, notably C++ and Ada, have the concept of the accessibil*
 *ity of an object

14      or of some other program entity. The accessibility specioes which class*
 *es of other program

15      objects are permitted access to the object in question.


16      The accessibility of a declaration is represented by a DW.AT.accessibil*
 *ity

17      attribute, whose value is a constant drawn from the set of codes listed*
 * in Table

18      2.4.


                                 Table 2.4: Accessibility codes

                                  _________________________

                                   DW.ACCESS.public

                                   DW.ACCESS.private

                                   DW.ACCESS.protected
                                  _________________________



19      2.9    Visibility of Declarations


20      Several languages (such as Modula-2) have the concept of the visibility*
 * of a declaration.

21      The visibility specioes which declarations are to be visible outside of*
 * the entity in which

22      they are declared.


23      The visibility of a declaration is represented by a DW.AT.visibility at*
 *tribute,

24      whose value is a constant drawn from the set of codes listed in Table 2*
 *.5 on the

25      following page.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 48
                                Chapter 2. General Description



                                  Table 2.5: Visibility codes

                                     ____________________

                                     DW.VIS.local

                                     DW.VIS.exported

                                     DW.VIS.qualioed
                                     ____________________



 1      2.10     Virtuality of Declarations


 2      C++ provides for virtual and pure virtual structure or class member fun*
 *ctions and for

 3      virtual base classes.


 4      The virtuality of a declaration is represented by a DW.AT.virtuality at*
 *tribute,

 5      whose value is a constant drawn from the set of codes listed in Table 2*
 *.6.


                                  Table 2.6: Virtuality codes

                              ________________________________

                               DW.VIRTUALITY.none

                               DW.VIRTUALITY.virtual

                               DW.VIRTUALITY.pure.virtual
                              ________________________________



 6      2.11     Artiocial Entries


 7      A compiler may wish to generate debugging information entries for objec*
 *ts or types that

 8      were not actually declared in the source of the application. An example*
 * is a formal

 9      parameter entry to represent the hidden this parameter that most C++ im*
 *plementations

10      pass as the orst argument to non-static member functions.


11      Any debugging information entry representing the declaration of an obje*
 *ct or

12      type artiocially generated by a compiler and not explicitly declared by*
 * the source

13      program may have a DW.AT.artiocial attribute, which is a AEag.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 49
                                Chapter 2. General Description



 1      2.12     Address Classes


 2      Some systems support dioeerent classes of addresses. The address class *
 *may aoeect the way

 3      a pointer is dereferenced or the way a subroutine is called.


 4      Any debugging information entry representing a pointer or reference typ*
 *e or a

 5      subroutine or subroutine type may have a DW.AT.address.class attribute,

 6      whose value is an integer constant. The set of permissible values is sp*
 *ecioc to

 7      each target architecture. The value DW.ADDR.none, however, is common to*
 * all

 8      encodings, and means that no address class has been specioed.



 9      2.13     Non-Deoning Declarations and Completions


10      A debugging information entry representing a program entity typically

11      represents the deoning declaration of that entity. In certain contexts,*
 * however, a

12      debugger might need information about a declaration of an entity that i*
 *s not also

13      a deonition, or is otherwise incomplete, to evaluate an expression corr*
 *ectly.


14      As an example, consider the following fragment of C code:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||voidmyfunc()
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||intx;
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||externfloatx;
       |||=====================================================================*
 *=====|||g(x);
       |||=====================================================================*
 *=====|||}
       |||=====================================================================*
 *=====|||}_|___|



15      C scoping rules require that the value of the variable x passed to the *
 *function g is the

16      value of the global float variable x rather than of the local int varia*
 *ble x.



17      2.13.1   Non-Deoning Declarations


18      A debugging information entry that represents a non-deoning or otherwise

19      incomplete declaration of a program entity has a DW.AT.declaration attr*
 *ibute,

20      which is a AEag.


21      A non-deoning type declaration may nonetheless have children as illustr*
 *ated in Section

22      E.2.3 on page 412.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 50
                                Chapter 2. General Description



 1      2.13.2   Declarations Completing Non-Deoning Declarations


 2      A debugging information entry that represents a declaration that comple*
 *tes

 3      another (earlier) non-deoning declaration may have a DW.AT.speciocation

 4      attribute whose value is a reference to the debugging information entry

 5      representing the non-deoning declaration. A debugging information entry*
 * with a

 6      DW.AT.speciocation attribute does not need to duplicate information pro*
 *vided

 7      by the debugging information entry referenced by that speciocation attr*
 *ibute.


 8      When the non-deoning declaration is contained within a type that has be*
 *en

 9      placed in a separate type unit (see Section 3.1.4 on page 72), the

10      DW.AT.speciocation attribute cannot refer directly to the entry in the *
 *type unit.

11      Instead, the current compilation unit may contain a iskeletonj declarat*
 *ion of the

12      type, which contains only the relevant declaration and its ancestors as*
 * necessary

13      to provide the context (including containing types and namespaces). The

14      DW.AT.speciocation attribute would then be a reference to the declarati*
 *on entry

15      within the skeleton declaration tree. The debugging information entry f*
 *or the

16      top-level type in the skeleton tree may contain a DW.AT.signature attri*
 *bute

17      whose value is the type signature (see Section 7.32 on page 257).


18      Not all attributes of the debugging information entry referenced by a

19      DW.AT.speciocation attribute apply to the referring debugging informati*
 *on

20      entry. For example, DW.AT.sibling and DW.AT.declaration cannot apply to*
 * a

21      referring entry.



22      2.14     Declaration Coordinates


23      It is sometimes useful in a debugger to be able to associate a declarat*
 *ion with its

24      occurrence in the program source.


25      Any debugging information entry representing the declaration of an obje*
 *ct,

26      module, subprogram or type may have DW.AT.decl.ole, DW.AT.decl.line and

27      DW.AT.decl.column attributes, each of whose value is an unsigned integer

28      constant.


29      The value of the DW.AT.decl.ole attribute corresponds to a ole number f*
 *rom

30      the line number information table for the compilation unit containing t*
 *he

31      debugging information entry and represents the source ole in which the

32      declaration appeared (see Section 6.2 on page 154).


33      The value of the DW.AT.decl.line attribute represents the source line n*
 *umber at

34      which the orst character of the identioer of the declared object appear*
 *s. The

35      value 0 indicates that no source line has been specioed.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 51
                                Chapter 2. General Description



 1      The value of the DW.AT.decl.column attribute represents the source colu*
 *mn

 2      number at which the orst character of the identioer of the declared obj*
 *ect

 3      appears. The value 0 indicates that no column has been specioed.



 4      2.15     Identioer Names


 5      Any debugging information entry representing a program entity that has *
 *been

 6      given a name may have a DW.AT.name attribute, whose value of class stri*
 *ng

 7      represents the name. A debugging information entry containing no name

 8      attribute, or containing a name attribute whose value consists of a name

 9      containing a single null byte, represents a program entity for which no*
 * name was

10      given in the source.


11      Because the names of program objects described by DWARF are the names a*
 *s they appear

12      in the source program, implementations of language translators that use*
 * some form of

13      mangled name (as do many implementations of C++) should use the unmangl*
 *ed form of

14      the name in the DW.AT.name attribute, including the keyword operator (i*
 *n names such

15      as ioperator +j), if present. See also Section 2.22 following regarding*
 * the use of

16      DW.AT.linkage.name for mangled names. Sequences of multiple whitespace *
 *characters

17      may be compressed.


18      For additional discussion, see the Best Practices section of the DWARF *
 *Wiki

19      (http: // wiki. dwarfstd. org/ index. php? title= Best_ Practices .)



20      2.16     Data Locations and DWARF Procedures


21      Any debugging information entry describing a data object (which includes

22      variables and parameters) or common blocks may have a DW.AT.location

23      attribute, whose value is a location description (see Section 2.6 on pa*
 *ge 39).


24      A DWARF procedure is represented by any debugging information entry that

25      has a DW.AT.location attribute. If a suitable entry is not otherwise av*
 *ailable, a

26      DWARF procedure can be represented using a debugging information entry *
 *with

27      the tag DW.TAG.dwarf.procedure together with a DW.AT.location attribute.


28      A DWARF procedure is called by a DW.OP.call2, DW.OP.call4 or

29      DW.OP.call.ref DWARF expression operator (see Section 2.5.1.5 on page 3*
 *5).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 52
                                Chapter 2. General Description



 1      2.17     Code Addresses, Ranges and Base Addresses


 2      Any debugging information entry describing an entity that has a machine*
 * code

 3      address or range of machine code addresses, which includes compilation *
 *units,

 4      module initialization, subroutines, lexical blocks, try/catch blocks (s*
 *ee Section

 5      3.8 on page 98), labels and the like, may have


 6        #  A DW.AT.low.pc attribute for a single address,


 7        #  A DW.AT.low.pc and DW.AT.high.pc pair of attributes for a single

 8           contiguous range of addresses, or


 9        #  A DW.AT.ranges attribute for a non-contiguous range of addresses.


10      If a producer emits no machine code for an entity, none of these attrib*
 *utes are

11      specioed. Equivalently, a producer may emit such an attribute using the*
 * reserved

12      target address (see Section 2.4.1 on page 26) for the non-existent enti*
 *ty.


13      The base address of the scope for any of the debugging information entr*
 *ies listed

14      above is given by either the DW.AT.low.pc attribute or the orst address*
 * in the

15      orst range entry in the list of ranges given by the DW.AT.ranges attrib*
 *ute. If

16      there is no such attribute, the base address is undeoned.



17      2.17.1   Single Address


18      When there is a single address associated with an entity, such as a lab*
 *el or

19      alternate entry point of a subprogram, the entry has a DW.AT.low.pc att*
 *ribute

20      whose value is the address for the entity.



21      2.17.2   Contiguous Address Range


22      When the set of addresses of a debugging information entry can be descr*
 *ibed as

23      a single contiguous range, the entry may have a DW.AT.low.pc and

24      DW.AT.high.pc pair of attributes. The value of the DW.AT.low.pc attribu*
 *te is

25      the address of the orst instruction associated with the entity. If the *
 *value of the

26      DW.AT.high.pc is of class address, it is the address of the orst locati*
 *on past the

27      last instruction associated with the entity; if it is of class constant*
 *, the value is an

28      unsigned integer ooeset which when added to the low PC gives the addres*
 *s of the

29      orst location past the last instruction associated with the entity.


30      The high PC value may be beyond the last valid instruction in the execu*
 *table.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 53
                                Chapter 2. General Description



 1      2.17.3   Non-Contiguous Address Ranges


 2      Range lists are used when the set of addresses for a debugging informat*
 *ion entry

 3      cannot be described as a single contiguous range. Range lists are conta*
 *ined in a

 4      separate object ole section called .debug_rnglists or .debug_rnglists.d*
 *wo (in

 5      split units).


 6      A range list is identioed by a DW.AT.ranges or other attribute whose va*
 *lue is of

 7      class rnglist (see Section 7.5.5 on page 221).


 8      This range list representation, the rnglist class, and the related DW.A*
 *T.rnglists.base

 9      attribute are new in DWARF Version 5. Together they eliminate most or a*
 *ll of the object

10      language relocations previously needed for range lists.


11      Each range list entry is one of the following kinds:


12        #  Bounded range. This kind of entry deones an address range that is

13           included in the range list. The starting address is the lowest add*
 *ress of the

14           address range. The ending address is the address of the orst locat*
 *ion past

15           the highest address of the address range.


16           There are several kinds of bounded range entries which specify the*
 * starting

17           and ending addresses in dioeerent ways.


18           In the case of a range list entry where the range is deoned by a s*
 *tarting

19           address and either an ending address or a length, a starting addre*
 *ss

20           consisting of the reserved address value (see Section 2.4.1 on pag*
 *e 26)

21           indicates a non-existent range, which is equivalent to omitting the

22           description.


23        #  Base address. This kind of entry provides an address to be used as*
 * the base

24           address for the beginning and ending address ooesets given in cert*
 *ain

25           bounded range entries. The applicable base address of a range list*
 * entry is

26           determined by the closest preceding base address entry in the same*
 * range

27           list. If there is no preceding base address entry, then the applic*
 *able base

28           address defaults to the base address of the compilation unit (see *
 *Section

29           3.1.1 on page 62).


30           In the case of a compilation unit where all of the machine code is*
 * contained

31           in a single contiguous section, no base address entry is needed.


32           If the base address is the reserved target address, either explici*
 *tly or by

33           default, then the range of any range list entry deoned relative to*
 * that base

34           address is non-existent, which is equivalent to omitting the range*
 * list entry.


35        #  End-of-list. This kind of entry marks the end of the range list.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 54
                                Chapter 2. General Description



 1      Each range list consists of a sequence of zero or more bounded range or*
 * base

 2      address entries, terminated by an end-of-list entry.


 3      A range list containing only an end-of-list entry describes an empty sc*
 *ope (which

 4      contains no instructions).


 5      Bounded range entries in a range list may not overlap. There is no requ*
 *irement

 6      that the entries be ordered in any particular way.


 7      A bounded range entry whose beginning and ending addresses are equal (i*
 *ncluding zero)

 8      indicates an empty range and may be ignored.


 9      Each range list entry begins with a single byte identifying the kind of*
 * that entry,

10      followed by zero or more operands depending on the kind.


11      In the descriptions that follow, the term address index means the index*
 * of an

12      address in the .debug_addr section. This index is relative to the value*
 * of the

13      DW.AT.addr.base attribute of the associated compilation unit. The addre*
 *ss

14      given by this kind of operand is not relative to the compilation unit b*
 *ase address.


15      The following entry kinds are deoned for use in both split or non-split*
 * units:


16      1.  DW.RLE.end.of.list

17          An end-of-list entry contains no further data.


18          A series of this kind of entry may be used for padding or alignment*
 * purposes.


19      2.  DW.RLE.base.addressx

20          A base address entry has one unsigned LEB128 operand. The operand v*
 *alue

21          is an address index (into the .debug_addr section) that indicates t*
 *he

22          applicable base address used by following DW.RLE.ooeset.pair entrie*
 *s.


23      3.  DW.RLE.startx.endx

24          This is a form of bounded range (see page 54) entry that has two un*
 *signed

25          LEB128 operands. The operand values are address indices (into the

26          .debug_addr section) that indicate the starting and ending addresse*
 *s,

27          respectively, that deone the address range.


28      4.  DW.RLE.startx.length

29          This is a form of bounded range (see page 54) entry that has two un*
 *signed

30          ULEB operands. The orst value is an address index (into the .debug_*
 *addr

31          section) that indicates the beginning of the address range. The sec*
 *ond value is

32          the length of the range.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 55
                                Chapter 2. General Description



 1      5.  DW.RLE.ooeset.pair

 2          This is a form of bounded range (see page 54) entry that has two un*
 *signed

 3          LEB128 operands. The values of these operands are the starting and *
 *ending

 4          ooesets, respectively, relative to the applicable base address, tha*
 *t deone the

 5          address range.


 6      6.  DW.RLE.include.rnglistx

 7          This is a form of range inclusion, that has one unsigned LEB128 ope*
 *rand. The

 8          value is an index into the .debug_rnglists section, interpreted the*
 * same way

 9          as the operand of DW.FORM.rnglistx to ond a target list of entries,*
 * which

10          will be regarded as part of the current range list, up to the

11          DW.RLE.end.of.list entry.


12      The following kinds of range entry may be used only in non-split units:


13      6.  DW.RLE.base.address

14          A base address entry has one target address operand. This operand i*
 *s the

15          same size as used in DW.FORM.addr. This address is used as the base

16          address when interpreting ooesets in subsequent location list entri*
 *es of kind

17          DW.RLE.ooeset.pair.


18      7.  DW.RLE.start.end

19          This is a form of bounded range (see page 54) entry that has two ta*
 *rget

20          address operands. Each operand is the same size as used in

21          DW.FORM.addr. These indicate the starting and ending addresses,

22          respectively, that deone the address range for which the following *
 *location is

23          valid.


24      8.  DW.RLE.start.length

25          This is a form of bounded range (see page 54) entry that has one ta*
 *rget

26          address operand value and an unsigned LEB128 integer length operand

27          value. The address is the beginning address of the range over which*
 * the

28          location description is valid, and the length is the number of byte*
 *s in that

29          range.


30      9.  DW.RLE.include.rnglist

31          This is a form of list inclusion, that has one ooeset operand. The *
 *value is an

32          ooeset into the .debug_rnglists section, like the operand of a

33          DW.FORM.sec.ooeset location list. The ooeset identioes the orst ent*
 *ry of a

34          location list whose entries are to be regarded as part of the curre*
 *nt location

35          list, up to the DW.RLE.end.of.list entry.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 56
                                Chapter 2. General Description



 1      2.18     Entry Address


 2      The entry or orst executable instruction generated for an entity, if ap*
 *plicable, is often the

 3      lowest addressed instruction of a contiguous range of instructions. In *
 *other cases, the

 4      entry address needs to be specioed explicitly.


 5      Any debugging information entry describing an entity that has a range o*
 *f code

 6      addresses, which includes compilation units, module initialization, sub*
 *routines,

 7      lexical blocks, try/catch blocks, and the like, may have a DW.AT.entry.*
 *pc

 8      attribute to indicate the entry address which is the address of the ins*
 *truction

 9      where execution begins within that range of addresses. If the value of *
 *the

10      DW.AT.entry.pc attribute is of class address that address is the entry *
 *address;

11      or, if it is of class constant, the value is an unsigned integer ooeset*
 * which, when

12      added to the base address of the function, gives the entry address.


13      If no DW.AT.entry.pc attribute is present, then the entry address is as*
 *sumed to

14      be the same as the base address of the containing scope.



15      2.19     Static and Dynamic Values of Attributes


16      Some attributes that apply to types specify a property (such as the low*
 *er bound

17      of an array) that is an integer value, where the value may be known dur*
 *ing

18      compilation or may be computed dynamically during execution.


19      The value of these attributes is determined based on the class as follo*
 *ws:


20        #  For a constant, the value of the constant is the value of the attr*
 *ibute.


21        #  For a reference, the value of the attribute is determined indirect*
 *ly via a

22           reference to another debugging information entry.


23              ~ If the referenced entry describes a constant (e.g., has a

24                DW.AT.const.value attribute), the attribute value is the valu*
 *e of that

25                constant.


26              ~ If the referenced entry describes a data object (see Section *
 *4.1 on

27                page 101) or common block (see Section 4.2 on page 104), the *
 *attribute

28                value is the value of the data object or common block.


29              ~ If the referenced entry represents a data member (e.g. has ei*
 *ther a

30                DW.AT.data.member.location or a DW.AT.data.bit.ooeset

31                attribute), the attribute value is the value of the data memb*
 *er.


32        #  For an exprval, the value is interpreted as a DWARF expression; ev*
 *aluation

33           of the expression yields the value of the attribute.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 57
                                Chapter 2. General Description



 1      Prior to DWARF Version 6, a reference to a DWARF procedure (see Section*
 * 2.16 on

 2      page 52) that is not a data object or common block was allowed. This ty*
 *pe of reference

 3      was removed in DWARF Version 6. Instead, a producer may use a form of c*
 *lass exprval

 4      or locdesc with a DW.OP.call.ref operator to call the DWARF procedure.



 5      2.20     Entity Descriptions


 6      Some debugging information entries may describe entities in the program*
 * that are

 7      artiocial, or which otherwise have a inamej that is not a valid identio*
 *er in the

 8      programming language. This attribute provides a means for the producer *
 *to indicate the

 9      purpose or usage of the containing debugging infor


10      Generally, any debugging information entry that has, or may have, a

11      DW.AT.name attribute, may also have a DW.AT.description attribute whose

12      value is a null-terminated string providing a description of the entity.


13      It is expected that a debugger will display these descriptions as part *
 *of displaying other

14      properties of an entity.



15      2.21     Byte and Bit Sizes


16      Many debugging information entries allow either a DW.AT.byte.size attri*
 *bute

17      or a DW.AT.bit.size attribute, whose integer constant value (see Sectio*
 *n 2.19)

18      specioes an amount of storage. The value of the DW.AT.byte.size attribu*
 *te is

19      interpreted in bytes and the value of the DW.AT.bit.size attribute is i*
 *nterpreted

20      in bits. The DW.AT.string.length.byte.size and DW.AT.string.length.bit.*
 *size

21      attributes are similar.


22      In addition, the integer constant value of a DW.AT.byte.stride attribut*
 *e is

23      interpreted in bytes and the integer constant value of a DW.AT.bit.stri*
 *de

24      attribute is interpreted in bits.



25      2.22     Linkage Names


26      Some language implementations, notably C++ and similar languages, make *
 *use of

27      implementation-deoned names within object oles that are dioeerent from *
 *the identioer

28      names (see Section 2.15 on page 52) of entities as they appear in the s*
 *ource. Such names,

29      sometimes known as mangled names, are used in various ways, such as: to*
 * encode

30      additional information about an entity, to distinguish multiple entitie*
 *s that have the

31      same name, and so on. When an entity has an associated distinct linkage*
 * name it may

32      sometimes be useful for a producer to include this name in the DWARF de*
 *scription of the



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 58
                                Chapter 2. General Description



 1      program to facilitate consumer access to and use of object ole informat*
 *ion about an entity

 2      and/or information that is encoded in the linkage name itself.

 3      A debugging information entry may have a DW.AT.linkage.name attribute

 4      whose value is a null-terminated string containing the object ole linka*
 *ge name

 5      associated with the corresponding entity.



 6      2.23     Template Parameters


 7      In C++, a template is a generic deonition of a class, function, member *
 *function, or

 8      typedef (alias). A template has formal parameters that can be types or *
 *constant values;

 9      the class, function, member function, or typedef is instantiated dioeer*
 *ently for each

10      distinct combination of type or value actual parameters. DWARF does not*
 * represent the

11      generic template deonition, but does represent each instantiation.

12      A debugging information entry that represents a template instantiation *
 *will

13      contain child entries describing the actual template parameters. The co*
 *ntaining

14      entry and each of its child entries reference a template parameter entr*
 *y in any

15      circumstance where the template deonition referenced a formal template

16      parameter.

17      A template type parameter is represented by a debugging information ent*
 *ry with

18      the tag DW.TAG.template.type.parameter. A template value parameter is

19      represented by a debugging information entry with the tag

20      DW.TAG.template.value.parameter. The actual template parameter entries

21      appear in the same order as the corresponding template formal parameter

22      declarations in the source program.

23      A type or value parameter entry may have a DW.AT.name attribute, whose

24      value is a null-terminated string containing the name of the correspond*
 *ing

25      formal parameter. The entry may also have a DW.AT.default.value attribu*
 *te,

26      which is a AEag indicating that the value corresponds to the default ar*
 *gument for

27      the template parameter.

28      A template type parameter entry has a DW.AT.type attribute describing t*
 *he

29      actual type by which the formal is replaced.

30      A template value parameter entry has a DW.AT.type attribute describing *
 *the

31      type of the parameterized value. The entry also has an attribute giving*
 * the actual

32      compile-time or run-time constant value of the value parameter for this

33      instantiation. This can be a DW.AT.const.value attribute,  whose value *
 *is the

34      compile-time constant value as represented on the target architecture, *
 *or a

35      DW.AT.location attribute, whose value is a single location description *
 *for the

36      run-time constant address.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 59
                               Chapter 2. General Description



1      2.24     Alignment


2      A debugging information entry may have a DW.AT.alignment attribute whose

3      value of class constant is a positive, non-zero, integer describing the *
 *alignment of

4      the entity.


5      For example, an alignment attribute whose value is 8 indicates that the *
 *entity to which it

6      applies occurs at an address that is a multiple of eight (not a multiple*
 * of 28 or 256).



       July 15 2024               ***WORKING DRAFT***                        Pa*
 *ge 60




 1      Chapter 3



 2      Program Scope Entries



 3      This section describes debugging information entries that relate to dio*
 *eerent

 4      levels of program scope: compilation, module, subprogram, and so on. Ex*
 *cept

 5      for separate type entries (see Section 3.1.4 on page 72), these entries*
 * may be

 6      thought of as ranges of text addresses within the program.



 7      3.1    Unit Entries


 8      A DWARF object ole is an object ole that contains one or more DWARF

 9      compilation units, of which there are these kinds:


10        #  A full compilation unit describes a complete compilation, possibly*
 * in

11           combination with related partial compilation units and/or type uni*
 *ts.


12        #  A partial compilation unit describes a part of a compilation (gene*
 *rally

13           corresponding to an imported module) which is imported into one or*
 * more

14           related full compilation units.


15        #  A type unit is a specialized unit (similar to a compilation unit) *
 *that

16           represents a type whose description may be usefully shared by mult*
 *iple

17           other units.


18      These orst three kinds of compilation unit are sometimes called iconven*
 *tionalj

19      compilation units~they are kinds of compilation units that were deoned *
 *prior to DWARF

20      Version 5. Conventional compilation units are part of the same object o*
 *le as the compiled

21      code and data (whether relocatable, executable, shared and so on). The *
 *word

22      iconventionalj is usually omitted in these names, unless needed to dist*
 *inguish them

23      from the similar split compilation units below.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 61
                              Chapter 3. Program Scope Entries



 1        #  A skeleton compilation unit represents the DWARF debugging informa*
 *tion

 2           for a compilation using a minimal description that identioes a sep*
 *arate split

 3           compilation unit that provides the remainder (and most) of the des*
 *cription.


 4      A skeleton compilation acts as a minimal conventional full compilation *
 *(see above) that

 5      identioes and is paired with a corresponding split full compilation (as*
 * described below).

 6      Like the conventional compilation units, a skeleton compilation unit is*
 * part of the same

 7      object ole as the compiled code and data.


 8        #  A split compilation unit describes a complete compilation, possibl*
 *y in

 9           combination with related type compilation units. It corresponds to*
 * a

10           specioc skeleton compilation unit.


11        #  A split type unit is a specialized compilation unit that represent*
 *s a type

12           whose description may be usefully shared by multiple other units.


13      Split compilation units and split type units may be contained in object*
 * oles separate from

14      those containing the program code and data. These object oles are not p*
 *rocessed by a

15      linker; thus, split units do not depend on underlying object ole reloca*
 *tions.


16      Either a full compilation unit or a partial compilation unit may be log*
 *ically incorporated

17      into another compilation unit using an imported unit entry (see Section*
 * 3.2.5 on

18      page 78).


19      A partial compilation unit is not deoned for use within a split object *
 *ole.


20      In the remainder of this document, the word icompilationj in the phrase*
 * icompilation

21      unitj is generally omitted, unless it is deemed needed for clarity or e*
 *mphasis.



22      3.1.1   Full and Partial Compilation Unit Entries


23      A full compilation unit is represented by a debugging information entry*
 * with the

24      tag DW.TAG.compile.unit. A partial compilation unit is represented by a

25      debugging information entry with the tag DW.TAG.partial.unit.


26      In a simple compilation, a single compilation unit with the tag

27      DW.TAG.compile.unit represents a complete object ole and the tag

28      DW.TAG.partial.unit (as well as tag DW.TAG.type.unit) is not used. In a

29      compilation employing the DWARF space compression and duplicate

30      elimination techniques from Appendix E.1 on page 390, multiple compilat*
 *ion

31      units using the tags DW.TAG.compile.unit, DW.TAG.partial.unit and/or

32      DW.TAG.type.unit are used to represent portions of an object ole.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 62
                              Chapter 3. Program Scope Entries



 1      A full compilation unit typically represents the text and data contribu*
 *ted to an

 2      executable by a single relocatable object ole. It may be derived from s*
 *everal source oles,

 3      including pre-processed header oles. A partial compilation unit typical*
 *ly represents a

 4      part of the text and data of a relocatable object ole, in a manner that*
 * can potentially be

 5      shared with the results of other compilations to save space. It may be *
 *derived from an

 6      iinclude ole,j template instantiation, or other implementation-dependen*
 *t portion of a

 7      compilation. A full compilation unit can also function in a manner simi*
 *lar to a partial

 8      compilation unit in some cases. See Appendix E on page 390 for discussi*
 *on of related

 9      compression techniques.


10      A full or partial compilation unit entry owns debugging information ent*
 *ries that

11      represent all or part of the declarations made in the corresponding com*
 *pilation.

12      In the case of a partial compilation unit, the containing scope of its *
 *owned

13      declarations is indicated by imported unit entries in one or more other

14      compilation unit entries that refer to that partial compilation unit (s*
 *ee Section

15      3.2.5 on page 78).


16      A full or partial compilation unit entry may have the following attribu*
 *tes:


17      1.  Either a DW.AT.low.pc and DW.AT.high.pc pair of attributes or a

18          DW.AT.ranges attribute whose values encode the contiguous or

19          non-contiguous address ranges, respectively, of the machine instruc*
 *tions

20          generated for the compilation unit (see Section 2.17 on page 53).


21          A DW.AT.low.pc attribute may also be specioed in combination with

22          DW.AT.ranges to specify the default base address for use in locatio*
 *n lists

23          (see Section 2.6.2 on page 44) and range lists (see Section 2.17.3 *
 *on page 54).


24      2.  A DW.AT.name attribute whose value is a null-terminated string cont*
 *aining

25          the full or relative path name (relative to the value of the DW.AT.*
 *comp.dir

26          attribute, see below) of the primary source ole from which the comp*
 *ilation

27          unit was derived.


28      3.  A DW.AT.language.name attribute whose constant value is an integer *
 *code

29          indicating the source language of the compilation unit. The set of *
 *language

30          names and their meanings are given in Table 3.1 on the next page.


31          The most recent list of approved language names and applicable vers*
 *ions may be

32          found at http://dwarfstd.org/languages-v6.html.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 63
                      Chapter 3. Program Scope Entries



                         Table 3.1: Language names
_____________________________________________________________________________
 Language name                 || Meaning                 ||Version Scheme
                               |                          |(See Table 3.2)
_______________________________|__________________________|__________________
 DW.LNAME.Ada              ||     ISO Ada                 ||YYYY

 DW.LNAME.Assembly         ||     Assembly                ||

 DW.LNAME.BLISS             ||    BLISS                   ||

 DW.LNAME.C                 ||    ISO C                   ||YYYYMM

 DW.LNAME.C.plus.plus      ||     ISO C++                 ||YYYYMM

 DW.LNAME.Cobol             ||    ISO COBOL               ||YYYY

 DW.LNAME.CPP.for.OpenCL ||       C++ for OpenCL          ||VVMM

 DW.LNAME.Crystal           ||    Crystal                 ||

 DW.LNAME.C.sharp          ||     C#                      ||

 DW.LNAME.D                 ||    D                       ||

 DW.LNAME.Dylan            ||     Dylan                   ||

 DW.LNAME.Fortran           ||    ISO Fortran             ||YYYY

 DW.LNAME.Go               ||     Go                      ||

 DW.LNAME.GLSL             ||     OpenGL Shading          ||VVMMPP
                           |      Language                |
                           |                              |
 DW.LNAME.GLSL.ES         ||      OpenGL ES Shading       ||VVMMPP
                          |       Language                |
                          |                               |
 DW.LNAME.Haskell           ||    Haskell                 ||

 DW.LNAME.HIP              ||     HIP Language            ||

 DW.LNAME.HLSL             ||     High-Level Shading      ||YYYY
                           |      Language                |
                           |                              |
 DW.LNAME.Hylo             ||     Hylo Language           ||

 DW.LNAME.Java              ||    Java                    ||

 DW.LNAME.Julia              ||   Julia                   ||

 DW.LNAME.Kotlin            ||    Kotlin                  ||

 DW.LNAME.Modula2          ||     ISO Modula-2            ||

 DW.LNAME.Modula3          ||     Modula-3                ||

 DW.LNAME.Mojo             ||     Mojo Language           ||

 DW.LNAME.Move             ||     Move Language           ||YYYYMM

_DW.LNAME.ObjC_____________||_____Objective_C_____________||YYYYMM___________

 Continued on next page



July 15 2024               ***WORKING DRAFT***                        Page 64
                              Chapter 3. Program Scope Entries



        _Language_name_________________||_Meaning_________________||Version_Sch*
 *eme___

         DW.LNAME.ObjC.plus.plus   ||     Objective C++           ||YYYYMM

         DW.LNAME.OCaml           ||      OCaml                   ||

         DW.LNAME.Odin             ||     Odin                    ||YYYYMM

         DW.LNAME.OpenCL.C1       ||      OpenCL C                ||VVMM

         DW.LNAME.OpenCL.CPP     ||       OpenCL C++              ||VVMM

         DW.LNAME.Pascal            ||    ISO Pascal              ||YYYY

         DW.LNAME.PLI               ||    ANSI PL/I               ||

         DW.LNAME.Python           ||     Python                  ||

         DW.LNAME.RenderScript      ||    RenderScript Kernel     ||
                                    |     Language                |
                                    |                             |
         DW.LNAME.Ruby             ||     Ruby                    ||VVMMPP

         DW.LNAME.Rust              ||    Rust                    ||

         DW.LNAME.Swift             ||    Swift                   ||VVMM

         DW.LNAME.SYCL             ||     SYCL                    ||YYYYRR

         DW.LNAME.UPC              ||     UPC (Unioed Parallel C) ||

         DW.LNAME.Zig               ||    Zig                     ||

                                         |
        _________________________________|_____________________________________*
 *______



 1      4.  A DW.AT.language.version attribute may be specioed whose constant

 2          value is an integer value that indicates the version of the source *
 *language.

 3          This value is encoded using one of several schemes as shown in Tabl*
 *e 3.2 on

 4          the following page. A value of zero is equivalent to omitting this *
 *attribute.


 5      5.  A DW.AT.stmt.list attribute whose value is a section ooeset to the *
 *line

 6          number information for this compilation unit.


 7          This information is placed in a separate object ole section from th*
 *e debugging

 8          information entries themselves. The value of the statement list att*
 *ribute is the

 9          ooeset in the .debug_line section of the orst byte of the line numb*
 *er

10          information for this compilation unit (see Section 6.2 on page 154).


11      6.  A DW.AT.macros attribute whose value is a section ooeset to the mac*
 *ro

12          information for this compilation unit.


13          This information is placed in a separate object ole section from th*
 *e debugging

14          information entries themselves. The value of the macro information *
 *attribute
        _______________________________
           1This is equivalent to DW.LANG.OpenCL in DWARF Version 5



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 65
                              Chapter 3. Program Scope Entries



                             Table 3.2: Version Encoding Schemes
              __________________________________________________________________
              _Scheme_____||Encoding____________________________________________

               YYYY      || Year in which the language deonition was released.

               YYYYMM #||   Year in which the language deonition was released
                       |
                       |    times 100 plus the ordinal number of the month
                       |
                       |    (from 1 to 12).
                       |    For example, 202206 represents June of 2022.
                       |
               YYYYRR    || Year in which the language deonition was released
                         |
                         |  times 100 plus the revision number.
                         |
                         |  For example, 202007 represents version 2020 revisio*
 *n 7
                         |  while 202011 represents version 2020 revision 11.
                         |
               VVMM     ||  Major version number times 100 plus the minor
                        |
                        |   version number.
                        |
                        |   For example, 306 represents version 3.6 while 312
                        |   represents version 3.12.
                        |
               VVMMPP  ||   Major version number times 10,000 plus the minor
                       |
                       |    version number times 100 plus the patch version
                       |
                       |    number.
                       |
                       |    For example, 30607 represents version 3.6.7 while 3*
 *1215
                       |    represents version 3.12.15.
              _________|________________________________________________________
              #For the YYYYMM version scheme, to convert a version number to a *
 *specioc

              release, it is good practice to treat the version numbers listed *
 *on the
              http://dwarfstd.org/languages-v6.htmlwebsite as the maximum versi*
 *on that
              is interpreted as belonging to a specioc release. This way produc*
 *ers can emit
              version numbers for unreleased upcoming speciocations, by using, *
 *e.g., the date the
              compiler was built.



 1         is the ooeset in the .debug_macro section of the orst byte of the ma*
 *cro

 2         information for this compilation unit (see Section 6.3 on page 171).


 3      7.  A DW.AT.comp.dir attribute whose value is a null-terminated string

 4          containing the current working directory of the compilation command*
 * that

 5          produced this compilation unit in whatever form makes sense for the*
 * host

 6          system.


 7          If a relative path is used in DW.AT.comp.dir, it will be relative t*
 *o the

 8          location of the linked image containing the DW.AT.comp.dir entry.


 9          In some cases a producer may allow the user to specify a relative p*
 *ath for

10          DW.AT.comp.dir. There are a few cases in which this is useful, but *
 *in general using

11          a relative path for DW.AT.comp.dir is discouraged as it will not wo*
 *rk well in many



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 66
                              Chapter 3. Program Scope Entries



 1         cases including the following: dioeerent relative paths are used wit*
 *hin the same build;

 2         the build system creates multiple linked images in dioeerent directo*
 *ries; the onal linked

 3         image is moved before being debugged; .o oles that need to be debugg*
 *ed directly.

 4      8.  A DW.AT.producer attribute whose value is a null-terminated string

 5          containing information about the compiler that produced the compila*
 *tion

 6          unit.

 7          The actual contents of the string will be specioc to each producer,*
 * but should begin

 8          with the name of the compiler producer or some other identifying ch*
 *aracter sequence

 9          that will avoid confusion with other producer values.

10      9.  A DW.AT.identioer.case attribute whose integer constant value is a *
 *code

11          describing the treatment of identioers within this compilation unit*
 *. The set of

12          identioer case codes is given in Table 3.3.


                                Table 3.3: Identioer case codes

                                 __________________________

                                  DW.ID.case.sensitive

                                  DW.ID.up.case

                                  DW.ID.down.case

                                  DW.ID.case.insensitive
                                 __________________________


13          DW.ID.case.sensitive is the default for all compilation units that *
 *do not

14          have this attribute. It indicates that names given as the values of

15          DW.AT.name attributes in debugging information entries for the

16          compilation unit reAEect the names as they appear in the source pro*
 *gram.

17          A debugger should be sensitive to the case of identioer names when *
 *doing identioer

18          lookups.

19          DW.ID.up.case means that the producer of the debugging information *
 *for

20          this compilation unit converted all source names to upper case. The*
 * values of

21          the name attributes may not reAEect the names as they appear in the*
 * source

22          program.

23          A debugger should convert all names to upper case when doing lookup*
 *s.

24          DW.ID.down.case means that the producer of the debugging information

25          for this compilation unit converted all source names to lower case.*
 * The values

26          of the name attributes may not reAEect the names as they appear in *
 *the source

27          program.

28          A debugger should convert all names to lower case when doing lookup*
 *s.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 67
                              Chapter 3. Program Scope Entries



 1          DW.ID.case.insensitive means that the values of the name attributes*
 * reAEect

 2          the names as they appear in the source program but that case is not

 3          signiocant.


 4          A debugger should ignore case when doing lookups.


 5    10.   A DW.AT.base.types attribute whose value is a reference. This attri*
 *bute

 6          points to a debugging information entry representing another compil*
 *ation

 7          unit. It may be used to specify the compilation unit containing the*
 * base type

 8          entries used by entries in the current compilation unit (see Sectio*
 *n 5.1 on

 9          page 106).


10          This attribute provides a consumer a way to ond the deonition of ba*
 *se types for a

11          compilation unit that does not itself contain such deonitions. This*
 * allows a consumer,

12          for example, to interpret a type conversion to a base type correctl*
 *y.


13    11.   A DW.AT.use.UTF8 attribute, which is a AEag whose presence indicate*
 *s that

14          all strings (such as the names of declared entities in the source p*
 *rogram, or

15          olenames in the line number table) are represented using the UTF-8

16          representation.


17    12.   A DW.AT.main.subprogram attribute, which is a AEag, whose presence

18          indicates that the compilation unit contains a subprogram that has *
 *been

19          identioed as the starting subprogram of the program. If more than o*
 *ne

20          compilation unit contains this AEag, any one of them may contain th*
 *e starting

21          function.


22          Fortran has a PROGRAM statement which is used to specify and provid*
 *e a

23          user-specioed name for the main subroutine of a program. C uses the*
 * name imainj to

24          identify the main subprogram of a program. Some other languages pro*
 *vide similar or

25          other means to identify the main subprogram of a program. The

26          DW.AT.main.subprogram attribute may also be used to identify such s*
 *ubprograms

27          (see Section 3.3.1 on page 79).


28    13.   A DW.AT.entry.pc attribute whose value is the address of the orst

29          executable instruction of the unit (see Section 2.18 on page 57).


30    14.   A DW.AT.str.ooesets attribute, whose value is of class strooesetspt*
 *r. This

31          attribute points to the header of the compilation unit's contributi*
 *on to the

32          .debug_str_offsets (or .debug_str_offsets.dwo) section. Indirect st*
 *ring

33          references (using DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2,

34          DW.FORM.strx3 or DW.FORM.strx4) within the compilation unit are

35          interpreted as indices into the array of ooesets following that hea*
 *der.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 68
                              Chapter 3. Program Scope Entries



 1    15.   A DW.AT.addr.base attribute, whose value is of class addrptr. This

 2          attribute points to the beginning of the compilation unit's contrib*
 *ution to the

 3          .debug_addr section. Indirect references (using DW.FORM.addrx,

 4          DW.FORM.addrx1, DW.FORM.addrx2, DW.FORM.addrx3,

 5          DW.FORM.addrx4, DW.OP.addrx, DW.OP.constx,

 6          DW.LLE.base.addressx, DW.LLE.startx.endx, DW.LLE.startx.length,

 7          DW.RLE.base.addressx, DW.RLE.startx.endx or DW.RLE.startx.length)

 8          within the compilation unit are interpreted as indices relative to *
 *this base.


 9    16.   A DW.AT.rnglists.base attribute, whose value is of class rnglistspt*
 *r. This

10          attribute points to the beginning of the ooesets table (immediately*
 * following

11          the header) of the compilation unit's contribution to the .debug_rn*
 *glists

12          section. References to range lists (using DW.FORM.rnglistx) within *
 *the

13          compilation unit are interpreted relative to this base.


14    17.   A DW.AT.loclists.base attribute, whose value is of class loclistspt*
 *r. This

15          attribute points to the beginning of the ooesets table (immediately*
 * following

16          the header) of the compilation unit's contribution to the .debug_lo*
 *clists

17          section. References to value lists and location lists (using DW.FOR*
 *M.loclistx)

18          within the compilation unit are interpreted relative to this base.


19      The base address of a compilation unit is deoned as the value of the

20      DW.AT.low.pc attribute, if present; otherwise, it is undeoned. If the b*
 *ase

21      address is undeoned, then any DWARF entry or structure deoned in terms *
 *of the

22      base address of that compilation unit is not valid.



23      3.1.2   Skeleton Compilation Unit Entries


24      When generating a split DWARF object ole (see Section 7.3.2 on page 194*
 *), the

25      compilation unit in the .debug_info section is a "skeleton" compilation*
 * unit with

26      the tag DW.TAG.skeleton.unit, which contains a DW.AT.dwo.name attribute

27      as well as a subset of the attributes of a full or partial compilation *
 *unit. In

28      general, it contains those attributes that are necessary for the consum*
 *er to locate

29      the object ole where the split full compilation unit can be found, and *
 *for the

30      consumer to interpret references to addresses in the program.


31      A skeleton compilation unit has no children.


32      A skeleton compilation unit has the following attributes:


33      1.  A DW.AT.dwo.name attribute whose value is a null-terminated string

34          containing the full or relative path name (relative to the value of*
 * the

35          DW.AT.comp.dir attribute, see below) of the object ole that contain*
 *s the full

36          compilation unit.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 69
                              Chapter 3. Program Scope Entries



 1         The value in the dwo_id oeld of the unit header for this unit is the*
 * same as the

 2         value in the dwo_id oeld of the unit header of the corresponding full

 3         compilation unit (see Section 7.5.1 on page 207).


 4         The means of determining a compilation unit ID does not need to be s*
 *imilar or related

 5         to the means of determining a type unit signature. However, it shoul*
 *d be suitable for

 6         detecting ole version skew or other kinds of mismatched oles and for*
 * looking up a full

 7         split unit in a DWARF package ole (see Section 7.3.5 on page 197).


 8      A skeleton compilation unit may have additional attributes, which are t*
 *he same

 9      as for conventional compilation unit entries except as noted, from amon*
 *g the

10      following:


11      2.  Either a DW.AT.low.pc and DW.AT.high.pc pair of attributes or a

12          DW.AT.ranges attribute.


13      3.  A DW.AT.stmt.list attribute.


14      4.  A DW.AT.comp.dir attribute.


15      5.  A DW.AT.use.UTF8 attribute.


16          This attribute applies to strings referred to by the skeleton compi*
 *lation unit entry

17          itself, and strings in the associated line number information. The *
 *representation for

18          strings in the object ole referenced by the DW.AT.dwo.name attribut*
 *e is determined

19          by the presence of a DW.AT.use.UTF8 attribute in the full compilati*
 *on unit (see

20          Section 3.1.3 on the following page).


21      6.  A DW.AT.str.ooesets attribute, for indirect strings references from*
 * the

22          corresponding split full compilation unit.


23      7.  A DW.AT.addr.base attribute.


24      8.  A DW.AT.rnglists.base attribute, for range list entry references fr*
 *om the

25          corresponding split full compilation unit.


26      All other attributes of a compilation unit entry (described in Section *
 *3.1.1 on

27      page 62) are placed in the split full compilation unit (see 3.1.3 on th*
 *e following

28      page). The attributes provided by the skeleton compilation unit entry d*
 *o not

29      need to be repeated in the full compilation unit entry.


30      The DW.AT.addr.base, DW.AT.str.ooesets, and DW.AT.rnglists.base attribu*
 *tes

31      provide context that may be necessary to interpret the contents of the *
 *corresponding split

32      DWARF object ole.


33      The DW.AT.base.types attribute is not deoned for a skeleton compilation*
 * unit.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 70
                              Chapter 3. Program Scope Entries



 1      3.1.3   Split Full Compilation Unit Entries


 2      A split full compilation unit is represented by a debugging information*
 * entry

 3      with tag DW.TAG.compile.unit. It is very similar to a conventional full

 4      compilation unit but is logically paired with a specioc skeleton compil*
 *ation unit

 5      while being physically separate.


 6      A split full compilation unit may have the following attributes, which *
 *are the

 7      same as for conventional compilation unit entries except as noted:


 8      1.  A DW.AT.name attribute.


 9      2.  A DW.AT.language.name attribute.


10      3.  A DW.AT.language.version attribute.


11      4.  A DW.AT.macros attribute.


12      5.  A DW.AT.producer attribute.


13      6.  A DW.AT.identioer.case attribute.


14      7.  A DW.AT.main.subprogram attribute.


15      8.  A DW.AT.entry.pc attribute.


16      9.  A DW.AT.use.UTF8 attribute.


17      The following attributes are not part of a split full compilation unit *
 *entry but instead are

18      inherited (if present) from the corresponding skeleton compilation unit:

19      DW.AT.addr.base, DW.AT.comp.dir, DW.AT.high.pc, DW.AT.low.pc,

20      DW.AT.ranges and DW.AT.stmt.list.


21      The DW.AT.base.types attribute is not deoned for a split full compilati*
 *on unit.


22      Use of DW.FORM.sec.ooeset and other equivalent encodings (for example, *
 *the abbrev

23      ooeset in a compilation unit header) are resolved relative to the begin*
 *ning of the

24      contribution of the relevant section within the dwo or dwp ole and cann*
 *ot be used for

25      sharing content between multiple compilation units. DW.FORM.sec.ooeset *
 *may not be

26      used when a reference to content in the skeleton unit is required (as t*
 *he value present in

27      the dwo ole could not be relocated during linking of the skeleton units*
 *), such as for the

28      addrptr class.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 71
                              Chapter 3. Program Scope Entries



 1      3.1.4   Type Unit Entries


 2      An object ole may contain any number of separate type unit entries, each

 3      representing a single complete type deonition. Each type unit must be u*
 *niquely

 4      identioed by an 8-byte signature, stored as part of the type unit, whic*
 *h can be

 5      used to reference the type deonition from debugging information entries*
 * in other

 6      compilation units and type units.


 7      Conventional and split type units are identical except for the sections*
 * in which

 8      they are represented (see Section 7.3.2 on page 194 for details).  More*
 *over, the

 9      DW.AT.str.ooesets attribute (see below) is not used in a split type uni*
 *t.


10      A type unit is represented by a debugging information entry with the tag

11      DW.TAG.type.unit. A type unit entry owns debugging information entries *
 *that

12      represent the deonition of a single type, plus additional debugging inf*
 *ormation

13      entries that may be necessary to include as part of the deonition of th*
 *e type.


14      A type unit entry may have the following attributes:


15      1.  A DW.AT.language.name attribute, whose constant value is an integer

16          code indicating the source language used to deone the type. The set*
 * of

17          language names and their meanings are given in Table 3.1 on page 64.


18      2.  A DW.AT.language.version attribute, whose constant value is an inte*
 *ger

19          code indicating the source language version as described in Table 3*
 *.2 on

20          page 66.


21      3.  A DW.AT.stmt.list attribute whose value of class lineptr points to *
 *the line

22          number information for this type unit.


23          Because type units do not describe any code, they do not actually n*
 *eed a line number

24          table, but the line number headers contain a list of directories an*
 *d ole names that may

25          be referenced by the DW.AT.decl.ole attribute of the type or part o*
 *f its description.


26          In an object ole with a conventional compilation unit entry, the ty*
 *pe unit entries may

27          refer to (share) the line number table used by the compilation unit*
 *. In a type unit

28          located in a split compilation unit, the DW.AT.stmt.list attribute *
 *refers to a

29          ispecializedj line number table in the .debug_line.dwo section, whi*
 *ch contains

30          only the list of directories and ole names.


31          All type unit entries in a split DWARF object ole may (but are not *
 *required to) refer

32          to the same specialized line number table.


33      4.  A DW.AT.use.UTF8 attribute, which is a AEag whose presence indicate*
 *s that

34          all strings referred to by this type unit entry, its children, and *
 *its associated

35          specialized line number table, are represented using the UTF-8

36          representation.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 72
                              Chapter 3. Program Scope Entries



 1      5.  A DW.AT.str.ooesets attribute, whose value is of class strooesetspt*
 *r. This

 2          attribute points to the header of the type unit's contribution to t*
 *he

 3          .debug_str_offsets section. Indirect string references (using

 4          DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

 5          DW.FORM.strx4) within the type unit are interpreted as indices into*
 * the

 6          array of ooesets following that header.


 7      A type unit entry for a given type T owns a debugging information entry*
 * that

 8      represents a deoning declaration of type T. If the type is nested withi*
 *n enclosing

 9      types or namespaces, the debugging information entry for T is nested wi*
 *thin

10      debugging information entries describing its containers; otherwise, T i*
 *s a direct

11      child of the type unit entry.


12      A type unit entry may also own additional debugging information entries*
 * that

13      represent declarations of additional types that are referenced by type *
 *T and have

14      not themselves been placed in separate type units. Like T, if an additi*
 *onal type U

15      is nested within enclosing types or namespaces, the debugging informati*
 *on entry

16      for U is nested within entries describing its containers; otherwise, U *
 *is a direct

17      child of the type unit entry.


18      The containing entries for types T and U are declarations, and the oute*
 *rmost

19      containing entry for any given type T or U is a direct child of the typ*
 *e unit entry.

20      The containing entries may be shared among the additional types and bet*
 *ween T

21      and the additional types.


22      Examples of these kinds of relationships are found in Section E.2.1 on *
 *page 402 and

23      Section E.2.3 on page 412.


24      Types are not required to be placed in type units. In general, only lar*
 *ge types such as

25      structure, class, enumeration, and union types included from header ole*
 *s should be

26      considered for separate type units. Base types and other small types ar*
 *e not usually worth

27      the overhead of placement in separate type units. Types that are unlike*
 *ly to be replicated,

28      such as those deoned in the main source ole, are also better left in th*
 *e main compilation

29      unit.



30      3.2    Module, Namespace and Importing Entries


31      Modules and namespaces provide a means to collect related entities into*
 * a single entity

32      and to manage the names of those entities.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 73
                              Chapter 3. Program Scope Entries



 1      3.2.1   Module Entries


 2      Several languages have the concept of a imodule.j A Modula-2 deonition *
 *module may be

 3      represented by a module entry containing a declaration attribute (DW.AT*
 *.declaration).

 4      A Fortran 90 module may also be represented by a module entry (but no d*
 *eclaration

 5      attribute is warranted because Fortran has no concept of a correspondin*
 *g module body).


 6      A module is represented by a debugging information entry with the tag

 7      DW.TAG.module. Module entries may own other debugging information

 8      entries describing program entities whose declaration scopes end at the*
 * end of

 9      the module itself.


10      If the module has a name, the module entry has a DW.AT.name attribute w*
 *hose

11      value is a null-terminated string containing the module name.


12      The module entry may have either a DW.AT.low.pc and DW.AT.high.pc pair

13      of attributes or a DW.AT.ranges attribute whose values encode the conti*
 *guous

14      or non-contiguous address ranges, respectively, of the machine instruct*
 *ions

15      generated for the module initialization code (see Section 2.17 on page *
 *53). It may

16      also have a DW.AT.entry.pc attribute whose value is the address of the *
 *orst

17      executable instruction of that initialization code (see Section 2.18 on*
 * page 57).


18      If the module has been assigned a priority, it may have a DW.AT.priority

19      attribute. The value of this attribute is a reference to another debugg*
 *ing

20      information entry describing a variable with a constant value. The valu*
 *e of this

21      variable is the actual constant value of the module's priority, represe*
 *nted as it

22      would be on the target architecture.



23      3.2.2   Namespace Entries


24      C++ has the notion of a namespace, which provides a way to implement na*
 *me hiding, so

25      that names of unrelated things do not accidentally clash in the global *
 *namespace when an

26      application is linked together.


27      A namespace is represented by a debugging information entry with the tag

28      DW.TAG.namespace. A namespace extension is represented by a

29      DW.TAG.namespace entry with a DW.AT.extension attribute referring to the

30      previous extension, or if there is no previous extension, to the origin*
 *al

31      DW.TAG.namespace entry. A namespace extension entry does not need to

32      duplicate information in a previous extension entry of the namespace no*
 *r need it

33      duplicate information in the original namespace entry. (Thus, for a nam*
 *espace

34      with a name, a DW.AT.name attribute need only be attached directly to t*
 *he

35      original DW.TAG.namespace entry.)



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 74
                              Chapter 3. Program Scope Entries



 1      Namespace and namespace extension entries may own other debugging

 2      information entries describing program entities whose declarations occu*
 *r in the

 3      namespace.


 4      A namespace may have a DW.AT.export.symbols attribute which is a AEag

 5      which indicates that all member names deoned within the namespace may be

 6      referenced as if they were deoned within the containing namespace.


 7      This may be used to describe an inline namespace in C++.


 8      If a type, variable, or function declared in a namespace is deoned outs*
 *ide of the

 9      body of the namespace declaration, that type, variable, or function deo*
 *nition

10      entry has a DW.AT.speciocation attribute whose value is a reference to *
 *the

11      debugging information entry representing the declaration of the type, v*
 *ariable or

12      function. Type, variable, or function entries with a DW.AT.speciocation

13      attribute do not need to duplicate information provided by the declarat*
 *ion entry

14      referenced by the speciocation attribute.


15      The C++ global namespace (the namespace referred to by ::f, for example*
 *) is not

16      explicitly represented in DWARF with a namespace entry (thus mirroring *
 *the situation

17      in C++ source). Global items may be simply declared with no reference t*
 *o a namespace.


18      The C++ compilation unit specioc iunnamed namespacej may be represented*
 * by a

19      namespace entry with no name attribute in the original namespace declar*
 *ation entry

20      (and therefore no name attribute in any namespace extension entry of th*
 *is namespace).

21      C++ states that declarations in the unnamed namespace are implicitly av*
 *ailable in the

22      containing scope; a producer should make this eoeect explicit with the

23      DW.AT.export.symbols attribute, or by using a DW.TAG.imported.module th*
 *at is a

24      sibling of the namespace entry and references it.


25      A compiler emitting namespace information may choose to explicitly repr*
 *esent

26      namespace extensions, or to represent the onal namespace declaration of*
 * a compilation

27      unit; this is a quality-of-implementation issue and no specioc requirem*
 *ents are given

28      here. If only the onal namespace is represented, it is impossible for a*
 * debugger to interpret

29      using declaration references in exactly the manner deoned by the C++ la*
 *nguage.


30      For C++ namespace examples, see Appendix D.3 on page 333.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 75
                              Chapter 3. Program Scope Entries



 1      3.2.3   Imported (or Renamed) Declaration Entries


 2      Some languages support the concept of importing into or making accessib*
 *le in a given

 3      unit certain declarations that occur in a dioeerent module or scope. An*
 * imported

 4      declaration may sometimes be given another name.


 5      An imported declaration is represented by one or more debugging informa*
 *tion

 6      entries with the tag DW.TAG.imported.declaration. When an overloaded en*
 *tity

 7      is imported, there is one imported declaration entry for each overloadi*
 *ng. Each

 8      imported declaration entry has a DW.AT.import attribute, whose value is*
 * a

 9      reference to the debugging information entry representing the declarati*
 *on that is

10      being imported.


11      An imported declaration may also have a DW.AT.name attribute whose valu*
 *e is

12      a null-terminated string containing the name by which the imported enti*
 *ty is to

13      be known in the context of the imported declaration entry (which may be

14      dioeerent than the name of the entity being imported). If no name is pr*
 *esent, then

15      the name by which the entity is to be known is the same as the name of *
 *the entity

16      being imported.


17      An imported declaration entry with a name attribute may be used as a ge*
 *neral

18      means to rename or provide an alias for an entity, regardless of the co*
 *ntext in

19      which the importing declaration or the imported entity occurs.


20      A C++ namespace alias may be represented by an imported declaration ent*
 *ry with a

21      name attribute whose value is a null-terminated string containing the a*
 *lias name and a

22      DW.AT.import attribute whose value is a reference to the applicable ori*
 *ginal namespace

23      or namespace extension entry.


24      A C++ using declaration may be represented by one or more imported decl*
 *aration entries.

25      When the using declaration refers to an overloaded function, there is o*
 *ne imported

26      declaration entry corresponding to each overloading. Each imported decl*
 *aration entry

27      has no name attribute but it does have a DW.AT.import attribute that re*
 *fers to the entry

28      for the entity being imported. (C++ provides no means to irenamej an im*
 *ported entity,

29      other than a namespace).


30      A Fortran use statement with an ionly listj may be represented by a ser*
 *ies of imported

31      declaration entries, one (or more) for each entity that is imported. An*
 * entity that is

32      renamed in the importing context may be represented by an imported decl*
 *aration entry

33      with a name attribute that specioes the new local name.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 76
                              Chapter 3. Program Scope Entries



 1      3.2.4   Imported Module Entries


 2      Some languages support the concept of importing into or making accessib*
 *le in a given

 3      unit all of the declarations contained within a separate module or name*
 *space.


 4      An imported module declaration is represented by a debugging information

 5      entry with the tag DW.TAG.imported.module. An imported module entry

 6      contains a DW.AT.import attribute whose value is a reference to the mod*
 *ule or

 7      namespace entry containing the deonition and/or declaration entries for*
 * the

 8      entities that are to be imported into the context of the imported modul*
 *e entry.


 9      An imported module declaration may own a set of imported declaration en*
 *tries,

10      each of which refers to an entry in the module whose corresponding enti*
 *ty is to

11      be known in the context of the imported module declaration by a name ot*
 *her

12      than its name in that module. Any entity in the module that is not rena*
 *med in

13      this way is known in the context of the imported module entry by the sa*
 *me name

14      as it is declared in the module.


15      A C++ using directive may be represented by an imported module entry, w*
 *ith a

16      DW.AT.import attribute referring to the namespace entry of the appropri*
 *ate extension

17      of the namespace (which might be the original namespace entry) and no o*
 *wned entries.


18      A Fortran use statement with a irename listj may be represented by an i*
 *mported module

19      entry with an import attribute referring to the module and owned entrie*
 *s corresponding

20      to those entities that are renamed as part of being imported.


21      A Fortran use statement with neither a irename listj nor an ionly listj*
 * may be

22      represented by an imported module entry with an import attribute referr*
 *ing to the

23      module and no owned child entries.


24      A use statement with an ionly listj is represented by a series of indiv*
 *idual imported

25      declaration entries as described in Section 3.2.3 on the previous page.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 77
                              Chapter 3. Program Scope Entries



 1      A Fortran use statement for an entity in a module that is itself import*
 *ed by a use

 2      statement without an explicit mention may be represented by an imported*
 * declaration

 3      entry that refers to the original debugging information entry. For exam*
 *ple, given

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||moduleA
       |||=====================================================================*
 *=====|||integerX,Y,Z
       |||=====================================================================*
 *=====|||endmodule
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||moduleB
       |||=====================================================================*
 *=====|||useA
       |||=====================================================================*
 *=====|||endmodule
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||moduleC
       |||=====================================================================*
 *=====|||useB,onlyQ=>X
       |||=====================================================================*
 *=====|||endmodule_|___|


 4      the imported declaration entry for Q within module C refers directly to*
 * the variable

 5      declaration entry for X in module A because there is no explicit repres*
 *entation for X in

 6      module B.


 7      A similar situation arises for a C++ using declaration that imports an *
 *entity in terms of

 8      a namespace alias. See Appendix D.3 on page 333 for an example.



 9      3.2.5   Imported Unit Entries


10      The place where a normal or partial compilation unit is imported is rep*
 *resented

11      by a debugging information entry with the tag DW.TAG.imported.unit. An

12      imported unit entry contains a DW.AT.import attribute whose value is a

13      reference to the normal or partial compilation unit entry whose declara*
 *tions

14      logically belong at the place of the imported unit entry.


15      An imported unit entry does not necessarily correspond to any entity or*
 * construct in the

16      source program. It is merely igluej used to relate a partial unit, or a*
 * compilation unit

17      used as a partial unit, to a place in some other compilation unit.



18      3.3    Subroutine and Entry Point Entries


19      The following tags exist to describe debugging information entries for

20      subroutines and entry points:


         DW.TAG.subprogram              A subroutine or function

         DW.TAG.inlined.subroutine      A particular inlined instance of a subr*
 *outine or

                                        function

         DW.TAG.entry.point             An alternate entry point



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 78
                              Chapter 3. Program Scope Entries



 1      3.3.1   General Subroutine and Entry Point Information


 2      The subroutine or entry point entry has a DW.AT.name attribute whose va*
 *lue is

 3      a null-terminated string containing the subroutine or entry point name.*
 * It may

 4      also have a DW.AT.linkage.name attribute as described in Section 2.22 on

 5      page 58.


 6      If the name of the subroutine described by an entry with the tag

 7      DW.TAG.subprogram is visible outside of its containing compilation unit*
 *, that

 8      entry has a DW.AT.external attribute, which is a AEag.


 9      Additional attributes for functions that are members of a class or stru*
 *cture are described

10      in Section 5.7.8 on page 124.


11      A subroutine entry may contain a DW.AT.main.subprogram attribute which *
 *is

12      a AEag whose presence indicates that the subroutine has been identioed *
 *as the

13      starting function of the program. If more than one subprogram contains *
 *this AEag,

14      any one of them may be the starting subroutine of the program.


15      See also Section 3.1 on page 61) regarding the related use of this attr*
 *ibute to indicate that

16      a compilation unit contains the main subroutine of a program.



17      3.3.1.1 Calling Convention Information


18      A subroutine entry may contain a DW.AT.calling.convention attribute, wh*
 *ose

19      value is an integer constant. The set of calling convention codes for s*
 *ubroutines

20      is given in Table 3.4.



                      Table 3.4: Calling convention codes for subroutines

                                     __________________

                                      DW.CC.normal

                                      DW.CC.program

                                      DW.CC.nocall
                                     __________________



21      If this attribute is not present, or its value is the constant DW.CC.no*
 *rmal, then

22      the subroutine may be safely called by obeying the istandardj calling

23      conventions of the target architecture. If the value of the calling con*
 *vention

24      attribute is the constant DW.CC.nocall, the subroutine does not obey st*
 *andard

25      calling conventions, and it may not be safe for the debugger to call th*
 *is

26      subroutine.


27      Note that DW.CC.normal is also used as a calling convention code for ce*
 *rtain types (see

28      Table 5.5 on page 120).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 79
                              Chapter 3. Program Scope Entries



 1      If the semantics of the language of the compilation unit containing the

 2      subroutine entry distinguishes between ordinary subroutines and subrout*
 *ines

 3      that can serve as the imain program,j that is, subroutines that cannot *
 *be called

 4      directly according to the ordinary calling conventions, then the debugg*
 *ing

 5      information entry for such a subroutine may have a calling convention a*
 *ttribute

 6      whose value is the constant DW.CC.program.


 7      A common debugger feature is to allow the debugger user to call a subro*
 *utine within the

 8      subject program. In certain cases, however, the generated code for a su*
 *broutine will not

 9      obey the standard calling conventions for the target architecture and w*
 *ill therefore not be

10      safe to call from within a debugger.


11      The DW.CC.program value is intended to support Fortran main programs wh*
 *ich in

12      some implementations may not be callable or which must be invoked in a *
 *special way. It

13      is not intended as a way of onding the entry address for the program.



14      3.3.1.2 Miscellaneous Subprogram Properties


15      In C there is a dioeerence between the types of functions declared usin*
 *g function prototype

16      style declarations and those declared using non-prototype declarations.


17      A subroutine entry declared with a function prototype style declaration*
 * may

18      have a DW.AT.prototyped attribute, which is a AEag. The attribute indic*
 *ates

19      whether a subroutine entry point corresponds to a function declaration *
 *that

20      includes parameter prototype information.


21      A subprogram entry may have a DW.AT.elemental attribute, which is a AEa*
 *g.

22      The attribute indicates whether the subroutine or entry point was decla*
 *red with

23      the ielementalj keyword or property.


24      A subprogram entry may have a DW.AT.pure attribute, which is a AEag. The

25      attribute indicates whether the subroutine was declared with the ipurej

26      keyword or property.


27      A subprogram entry may have a DW.AT.recursive attribute, which is a AEa*
 *g. The

28      attribute indicates whether the subroutine or entry point was declared *
 *with the

29      irecursivej keyword or property.


30      A subprogram entry may have a DW.AT.noreturn attribute, which is a AEag*
 *. The

31      attribute indicates whether the subprogram was declared with the inoret*
 *urnj

32      keyword or property indicating that the subprogram can be called, but w*
 *ill never

33      return to its caller.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 80
                              Chapter 3. Program Scope Entries



 1      The Fortran language allows the keywords elemental, pure and recursive *
 *to be

 2      included as part of the declaration of a subroutine; these attributes r*
 *eAEect that usage.

 3      These attributes are not relevant for languages that do not support sim*
 *ilar keywords or

 4      syntax. In particular, the DW.AT.recursive attribute is neither needed *
 *nor appropriate

 5      in languages such as C where functions support recursion by default.



 6      3.3.1.3 Call Site-Related Attributes


 7      While subprogram attributes in the previous section provide information*
 * about the

 8      subprogram and its entry point(s) as a whole, the following attributes *
 *provide summary

 9      information about the calls that occur within a subprogram.


10      A subroutine entry may have DW.AT.call.all.tail.calls, DW.AT.call.all.c*
 *alls

11      and/or DW.AT.call.all.source.calls attributes, each of which is a AEag.*
 *  These

12      AEags indicate the completeness of the call site information provided b*
 *y call site

13      entries (see Section 3.4.1 on page 94) within the subprogram.


14      The DW.AT.call.all.tail.calls attribute indicates that every tail call *
 *that occurs

15      in the code for the subprogram is described by a DW.TAG.call.site entry*
 *. (There

16      may or may not be other non-tail calls to some of the same target subpr*
 *ograms.)


17      The DW.AT.call.all.calls attribute indicates that every non-inlined cal*
 *l (either a

18      tail call or a normal call) that occurs in the code for the subprogram *
 *is described

19      by a DW.TAG.call.site entry.


20      The DW.AT.call.all.source.calls attribute indicates that every call tha*
 *t occurs in

21      the code for the subprogram, including every call inlined into it, is d*
 *escribed by

22      either a DW.TAG.call.site entry or a DW.TAG.inlined.subroutine entry;

23      further, any call that is optimized out is nonetheless also described u*
 *sing a

24      DW.TAG.call.site entry that has neither a DW.AT.call.pc nor

25      DW.AT.call.return.pc attribute.


26      The DW.AT.call.all.source.calls attribute is intended for debugging inf*
 *ormation

27      format consumers that analyze call graphs.


28      If the the DW.AT.call.all.source.calls attribute is present then the

29      DW.AT.call.all.calls and DW.AT.call.all.tail.calls attributes are also

30      implicitly present. Similarly, if the DW.AT.call.all.calls attribute is*
 * present then

31      the DW.AT.call.all.tail.calls attribute is implicitly present.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 81
                              Chapter 3. Program Scope Entries



 1      3.3.2   Subroutine and Entry Point Return Types


 2      If the subroutine or entry point is a function that returns a value, th*
 *en its

 3      debugging information entry has a DW.AT.type attribute to denote the ty*
 *pe

 4      returned by that function.


 5      Debugging information entries for C void functions should not have an a*
 *ttribute for the

 6      return type.


 7      Debugging information entries for declarations of C++ member functions *
 *with an auto

 8      return type specioer should use an unspecioed type entry (see Section 5*
 *.2 on page 112).

 9      The debugging information entry for the corresponding deonition should *
 *provide the

10      deduced return type. This practice causes the description of the contai*
 *ning class to be

11      consistent across compilation units, allowing the class declaration to *
 *be placed into a

12      separate type unit if desired.



13      3.3.3   Subroutine and Entry Point Locations


14      A subroutine entry may have either a DW.AT.low.pc and DW.AT.high.pc

15      pair of attributes or a DW.AT.ranges attribute whose values encode the

16      contiguous or non-contiguous address ranges, respectively, of the machi*
 *ne

17      instructions generated for the subroutine (see Section 2.17 on page 53).


18      A subroutine entry may also have a DW.AT.entry.pc attribute whose value*
 * is

19      the address of the orst executable instruction of the subroutine (see S*
 *ection 2.18

20      on page 57).


21      An entry point has a DW.AT.low.pc attribute whose value is the relocated

22      address of the orst machine instruction generated for the entry point.


23      Subroutines and entry points may also have a DW.AT.address.class attrib*
 *ute, if

24      appropriate, to specify the addressing mode to be used in calling that *
 *subroutine.


25      A subroutine entry representing a subroutine declaration that is not al*
 *so a

26      deonition does not have code address or range attributes.



27      3.3.4   Declarations Owned by Subroutines and Entry Points


28      The declarations enclosed by a subroutine or entry point are represente*
 *d by

29      debugging information entries that are owned by the subroutine or entry*
 * point

30      entry. Entries representing the formal parameters of the subroutine or *
 *entry point

31      appear in the same order as the corresponding declarations in the source

32      program.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 82
                              Chapter 3. Program Scope Entries



 1      There is no ordering requirement for entries for declarations other tha*
 *n formal

 2      parameters. The formal parameter entries may be interspersed with other*
 * entries used by

 3      formal parameter entries, such as type entries.


 4      The unspecioed (sometimes called ivaryingj) parameters of a subroutine

 5      parameter list are represented by a debugging information entry with th*
 *e tag

 6      DW.TAG.unspecioed.parameters.


 7      The entry for a subroutine that includes a Fortran common block has a c*
 *hild

 8      entry with the tag DW.TAG.common.inclusion. The common inclusion entry

 9      has a DW.AT.common.reference attribute whose value is a reference to the

10      debugging information entry for the common block being included (see Se*
 *ction

11      4.2 on page 104).



12      3.3.5   Low-Level Information


13      3.3.5.1 Return Address Location


14      A subroutine or entry point entry may have a DW.AT.return.addr attribut*
 *e,

15      whose value is a location description. The location specioed is the pla*
 *ce where

16      the return address for the subroutine or entry point is stored.



17      3.3.5.2 Frame Base


18      A subroutine or entry point entry may also have a DW.AT.frame.base attr*
 *ibute,

19      whose value is a location description that describes the iframe basej f*
 *or the

20      subroutine or entry point. If the location description is a simple regi*
 *ster location

21      description, the given register contains the frame base address. If the*
 * location

22      description is a DWARF expression, the result of evaluating that expres*
 *sion is the

23      frame base address. Finally, for a location list, this interpretation a*
 *pplies to each

24      location description contained in the list of location list entries.


25      The use of one of the DW.OP.reg!n? operations in this context is equiva*
 *lent to using

26      DW.OP.breg!n?(0) but more compact. However, these are not equivalent in*
 * general.


27      The frame base for a subprogram is typically an address relative to the*
 * orst unit of storage

28      allocated for the subprogram's stack frame. The DW.AT.frame.base attrib*
 *ute can be

29      used in several ways:


30      1.  In subprograms that need location lists to locate local variables, *
 *the

31          DW.AT.frame.base can hold the needed location list, while all varia*
 *bles' location

32          descriptions can be simpler ones involving the frame base.


33      2.  It can be used in resolving iup-levelj addressing within nested rou*
 *tines. (See also

34          DW.AT.static.link, below)



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 83
                              Chapter 3. Program Scope Entries



 1      3.3.5.3 Nested subroutines and up-level references


 2      Some languages support nested subroutines. In such languages, it is pos*
 *sible to reference

 3      the local variables of an outer subroutine from within an inner subrout*
 *ine. The

 4      DW.AT.static.link and DW.AT.frame.base attributes allow debuggers to su*
 *pport this

 5      same kind of referencing.


 6      If a subroutine or entry point is nested, it may have a DW.AT.static.li*
 *nk

 7      attribute, whose value is a location description that computes the fram*
 *e base of

 8      the relevant instance of the subroutine that immediately encloses the s*
 *ubroutine

 9      or entry point.


10      In the context of supporting nested subroutines, the DW.AT.frame.base

11      attribute value obeys the following constraints:


12      1.  It computes a value that does not change during the life of the sub*
 *program,

13          and


14      2.  The computed value is unique among instances of the same subroutine.


15          For typical DW.AT.frame.base use, this means that a recursive subro*
 *utine's stack

16          frame must have non-zero size.


17      If a debugger is attempting to resolve an up-level reference to a varia*
 *ble, it uses the

18      nesting structure of DWARF to determine which subroutine is the lexical*
 * parent and the

19      DW.AT.static.link value to identify the appropriate active frame of the*
 * parent. It can

20      then attempt to ond the reference within the context of the parent.



21      3.3.5.4 Lanes in SIMD Vectorization


22      SIMD instructions process multiple data elements in one instruction. Th*
 *e number of

23      data elements that is processed with one instruction is typically refer*
 *red to as the SIMD

24      width. Each individual data element is typically referred to as SIMD la*
 *ne.


25      When generating code for a SIMD architecture, compilers may need to imp*
 *licitly widen

26      the source code to match the SIMD width of the instruction set they are*
 * using. Source

27      variables are widened into a vector of variables, with one instance per*
 * SIMD lane.


28      A subroutine that is implicitly vectorized may have a DW.AT.num.lanes

29      attribute whose value describes the implicit vectorization factor and t*
 *he

30      corresponding number of lanes in the generated code. The value of this *
 *attribute

31      is determined as described in Section 2.19 on page 57.


32      To refer to individual lanes in such vectorized code, for example to de*
 *scribe the

33      location of widened source variables, producers may use the DW.OP.push.*
 *lane

34      operation (see Section 2.5.1.3 on page 29) to have the consumer supply *
 *the



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 84
                              Chapter 3. Program Scope Entries



 1      current focus lane for which to evaluate the expression. The pushed lan*
 *e index

 2      must be an unsigned integer value between zero (inclusive) and the valu*
 *e of

 3      DW.AT.num.lanes (exclusive) at the current location.


 4      If the attribute is omitted, its value is deoned by the ABI.


 5      If the source code had already been vectorized and is not further widen*
 *ed by the compiler,

 6      the value should be one.


 7      This value does not only apply to vector instructions. If a loop or fun*
 *ction has been

 8      widened, the entire loop or function body shall be annotated with the v*
 *ectorization factor.



 9      3.3.6   Types Thrown by Exceptions


10      In C++ a subroutine may declare a set of types which it may validly thr*
 *ow.


11      If a subroutine explicitly declares that it may throw an exception of o*
 *ne or more

12      types, each such type is represented by a debugging information entry w*
 *ith the

13      tag DW.TAG.thrown.type. Each such entry is a child of the entry represe*
 *nting

14      the subroutine that may throw this type. Each thrown type entry contain*
 *s a

15      DW.AT.type attribute, whose value is a reference to an entry describing*
 * the type

16      of the exception that may be thrown.



17      3.3.7   Function Template Instantiations


18      In C++, a function template is a generic deonition of a function that i*
 *s instantiated

19      dioeerently for calls with values of dioeerent types. DWARF does not re*
 *present the generic

20      template deonition, but does represent each instantiation.


21      A function template instantiation is represented by a debugging informa*
 *tion

22      entry with the tag DW.TAG.subprogram. With the following exceptions, su*
 *ch

23      an entry will contain the same attributes and will have the same types *
 *of child

24      entries as would an entry for a subroutine deoned explicitly using the

25      instantiation types and values. The exceptions are:


26      1.  Template parameters are described and referenced as specioed in Sec*
 *tion 2.23

27          on page 59.


28      2.  If the compiler has generated a separate compilation unit to hold t*
 *he template

29          instantiation and that compilation unit has a dioeerent name from t*
 *he

30          compilation unit containing the template deonition, the name attrib*
 *ute for

31          the debugging information entry representing that compilation unit *
 *is empty

32          or omitted.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 85
                              Chapter 3. Program Scope Entries



 1      3.  If the subprogram entry representing the template instantiation or *
 *any of its

 2          child entries contain declaration coordinate attributes, those attr*
 *ibutes refer to

 3          the source for the template deonition, not to any source generated *
 *artiocially

 4          by the compiler for this instantiation.



 5      3.3.8   Inlinable and Inlined Subroutines


 6      A declaration or a deonition of an inlinable subroutine is represented *
 *by a

 7      debugging information entry with the tag DW.TAG.subprogram. The entry f*
 *or

 8      a subroutine that is explicitly declared to be available for inline exp*
 *ansion or that

 9      was expanded inline implicitly by the compiler has a DW.AT.inline attri*
 *bute

10      whose value is an integer constant. The set of values for the DW.AT.inl*
 *ine

11      attribute is given in Table 3.5.



                                    Table 3.5: Inline codes
         ______________________________________________________________________*
 *____
         _Name_________________________||_Meaning______________________________*
 *____

          DW.INL.not.inlined          ||  Not declared inline nor inlined by the
                                      |
                                      |   compiler (equivalent to the absence o*
 *f the
                                      |   containing DW.AT.inline attribute)
                                      |
          DW.INL.inlined               || Not declared inline but inlined by the
                                       |  compiler
                                       |
          DW.INL.declared.not.inlined ||  Declared inline but not inlined by the
                                      |   compiler
                                      |
          DW.INL.declared.inlined     ||  Declared inline and inlined by the
                                      |   compiler
         _____________________________|________________________________________*
 *____


12      In C++, a function or a constructor declared with constexpr is implicit*
 *ly declared

13      inline. The abstract instance (see Section 3.3.8.1) is represented by a*
 * debugging

14      information entry with the tag DW.TAG.subprogram. Such an entry has a

15      DW.AT.inline attribute whose value is DW.INL.inlined.



16      3.3.8.1 Abstract Instances


17      Any subroutine entry that contains a DW.AT.inline attribute whose value*
 * is

18      other than DW.INL.not.inlined is known as an abstract instance root.  A*
 *ny

19      debugging information entry that is owned (either directly or indirectl*
 *y) by an

20      abstract instance root is known as an abstract instance entry. Any set *
 *of abstract

21      instance entries that are all children (either directly or indirectly) *
 *of some abstract

22      instance root, together with the root itself, is known as an abstract i*
 *nstance tree.

23      However, in the case where an abstract instance tree is nested within a*
 *nother



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 86
                              Chapter 3. Program Scope Entries



 1      abstract instance tree, the entries in the nested abstract instance tre*
 *e are not

 2      considered to be entries in the outer abstract instance tree.


 3      Each abstract instance root is either part of a larger tree (which give*
 *s a context for

 4      the root) or uses DW.AT.speciocation to refer to the declaration in con*
 *text.


 5      For example, in C++ the context might be a namespace declaration or a c*
 *lass declaration.


 6      Abstract instance trees are deoned so that no entry is part of more tha*
 *n one abstract

 7      instance tree.


 8      Attributes and children in an abstract instance are shared by all concr*
 *ete

 9      instances (see Section 3.3.8.2).


10      A debugging information entry that is a member of an abstract instance *
 *tree may

11      not contain any attributes which describe aspects of the subroutine whi*
 *ch vary

12      between distinct inlined expansions or distinct out-of-line expansions.


13      For example, the DW.AT.low.pc, DW.AT.high.pc, DW.AT.ranges,

14      DW.AT.entry.pc, DW.AT.location, DW.AT.return.addr and DW.AT.start.scope

15      attributes typically should be omitted; however, this list is not exhau*
 *stive.


16      It would not make sense normally to put these attributes into abstract *
 *instance entries

17      since such entries do not represent actual (concrete) instances and thu*
 *s do not actually

18      exist at run-time. However, see Appendix D.7.3 on page 353 for a contra*
 *ry example.


19      The rules for the relative location of entries belonging to abstract in*
 *stance trees

20      are exactly the same as for other similar types of entries that are not*
 * abstract.

21      Speciocally, the rule that requires that an entry representing a declar*
 *ation be a

22      direct child of the entry representing the scope of the declaration app*
 *lies equally

23      to both abstract and non-abstract entries. Also, the ordering rules for*
 * formal

24      parameter entries, member entries, and so on, all apply regardless of w*
 *hether or

25      not a given entry is abstract.



26      3.3.8.2 Concrete Instances


27      Each inline expansion of a subroutine is represented by a debugging inf*
 *ormation

28      entry with the tag DW.TAG.inlined.subroutine. Each such entry is a dire*
 *ct

29      child of the entry that represents the scope within which the inlining *
 *occurs.


30      Each inlined subroutine entry may have either a DW.AT.low.pc and

31      DW.AT.high.pc pair of attributes or a DW.AT.ranges attribute whose valu*
 *es

32      encode the contiguous or non-contiguous address ranges, respectively, o*
 *f the

33      machine instructions generated for the inlined subroutine (see Section *
 *2.17

34      following). An inlined subroutine entry may also contain a DW.AT.entry.*
 *pc



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 87
                              Chapter 3. Program Scope Entries



 1      attribute, representing the orst executable instruction of the inline e*
 *xpansion (see

 2      Section 2.18 on page 57).


 3      An inlined subroutine entry may also have DW.AT.call.ole, DW.AT.call.li*
 *ne

 4      and DW.AT.call.column attributes, each of whose value is an integer con*
 *stant.

 5      These attributes represent the source ole, source line number, and sour*
 *ce column

 6      number, respectively, of the orst character of the statement or express*
 *ion that

 7      caused the inline expansion. The call ole, call line, and call column a*
 *ttributes are

 8      interpreted in the same way as the declaration ole, declaration line, a*
 *nd

 9      declaration column attributes, respectively (see Section 2.14 on page 5*
 *1).


10      The call ole, call line and call column coordinates do not describe the*
 * coordinates of the

11      subroutine declaration that was inlined, rather they describe the coord*
 *inates of the call.


12      An inlined subroutine entry may have a DW.AT.const.expr attribute, whic*
 *h is a

13      AEag whose presence indicates that the subroutine has been evaluated as*
 * a

14      compile-time constant. Such an entry may also have a DW.AT.const.value

15      attribute, whose value may be of any form that is appropriate for the

16      representation of the subroutine's return value. The value of this attr*
 *ibute is the

17      actual return value of the subroutine, represented as it would be on th*
 *e target

18      architecture.


19      In C++, if a function or a constructor declared with constexpr is calle*
 *d with constant

20      expressions, then the corresponding concrete inlined instance has a DW.*
 *AT.const.expr

21      attribute, as well as a DW.AT.const.value attribute whose value represe*
 *nts the actual

22      return value of the concrete inlined instance.


23      Any debugging information entry that is owned (either directly or indir*
 *ectly) by

24      a debugging information entry with the tag DW.TAG.inlined.subroutine is

25      referred to as a iconcrete inlined instance entry.j Any entry that has *
 *the tag

26      DW.TAG.inlined.subroutine is known as a iconcrete inlined instance root*
 *.j

27      Any set of concrete inlined instance entries that are all children (eit*
 *her directly or

28      indirectly) of some concrete inlined instance root, together with the r*
 *oot itself, is

29      known as a iconcrete inlined instance tree.j However, in the case where*
 * a

30      concrete inlined instance tree is nested within another concrete instan*
 *ce tree, the

31      entries in the nested concrete inline instance tree are not considered *
 *to be entries

32      in the outer concrete instance tree.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 88
                              Chapter 3. Program Scope Entries



 1      Concrete inlined instance trees are deoned so that no entry is part of *
 *more than one

 2      concrete inlined instance tree. This simplioes later descriptions.


 3      Each concrete inlined instance tree is uniquely associated with one (an*
 *d only

 4      one) abstract instance tree.


 5      Note, however, that the reverse is not true. Any given abstract instanc*
 *e tree may be

 6      associated with several dioeerent concrete inlined instance trees, or m*
 *ay even be associated

 7      with zero concrete inlined instance trees.


 8      Concrete inlined instance entries may omit attributes that are not spec*
 *ioc to the

 9      concrete instance (but present in the abstract instance) and need inclu*
 *de only

10      attributes that are specioc to the concrete instance (but omitted in th*
 *e abstract

11      instance). In place of these omitted attributes, each concrete inlined *
 *instance

12      entry has a DW.AT.abstract.origin attribute that may be used to obtain *
 *the

13      missing information (indirectly) from the associated abstract instance *
 *entry. The

14      value of the abstract origin attribute is a reference to the associated*
 * abstract

15      instance entry.


16      If an entry within a concrete inlined instance tree contains attributes*
 * describing

17      the declaration coordinates of that entry, then those attributes refer *
 *to the ole, line

18      and column of the original declaration of the subroutine, not to the po*
 *int at

19      which it was inlined. As a consequence, they may usually be omitted fro*
 *m any

20      entry that has an abstract origin attribute.


21      For each pair of entries that are associated via a DW.AT.abstract.origin

22      attribute, both members of the pair have the same tag. So, for example,*
 * an entry

23      with the tag DW.TAG.variable can only be associated with another entry *
 *that

24      also has the tag DW.TAG.variable. The only exception to this rule is th*
 *at the

25      root of a concrete instance tree (which must always have the tag

26      DW.TAG.inlined.subroutine) can only be associated with the root of its

27      associated abstract instance tree (which must have the tag

28      DW.TAG.subprogram).


29      In general, the structure and content of any given concrete inlined ins*
 *tance tree

30      will be closely analogous to the structure and content of its associate*
 *d abstract

31      instance tree. There are a few exceptions:


32      1.  An entry in the concrete instance tree may be omitted if it contain*
 *s only a

33          DW.AT.abstract.origin attribute and either has no children, or its *
 *children

34          are omitted. Such entries would provide no useful information. In C*
 *-like

35          languages, such entries frequently include types, including structu*
 *re, union,

36          class, and interface types; and members of types. If any entry with*
 *in a

37          concrete inlined instance tree needs to refer to an entity declared*
 * within the



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 89
                              Chapter 3. Program Scope Entries



 1         scope of the relevant inlined subroutine and for which no concrete i*
 *nstance

 2         entry exists, the reference refers to the abstract instance entry.


 3      2.  Entries in the concrete instance tree which are associated with ent*
 *ries in the

 4          abstract instance tree such that neither has a DW.AT.name attribute*
 *, and

 5          neither is referenced by any other debugging information entry, may*
 * be

 6          omitted. This may happen for debugging information entries in the a*
 *bstract

 7          instance trees that became unnecessary in the concrete instance tre*
 *e because

 8          of additional information available there. For example, an anonymous

 9          variable might have been created and described in the abstract inst*
 *ance tree,

10          but because of the actual parameters for a particular inlined expan*
 *sion, it

11          could be described as a constant value without the need for that se*
 *parate

12          debugging information entry.


13      3.  A concrete instance tree may contain entries which do not correspon*
 *d to

14          entries in the abstract instance tree to describe new entities that*
 * are specioc to

15          a particular inlined expansion. In that case, they will not have as*
 *sociated

16          entries in the abstract instance tree, do not contain DW.AT.abstrac*
 *t.origin

17          attributes, and must contain all their own attributes directly. Thi*
 *s allows an

18          abstract instance tree to omit debugging information entries for an*
 *onymous

19          entities that are unlikely to be needed in most inlined expansions.*
 * In any

20          expansion which deviates from that expectation, the entries can be *
 *described

21          in its concrete inlined instance tree.



22      3.3.8.3 Out-of-Line Instances of Inlined Subroutines


23      Under some conditions, compilers may need to generate concrete executab*
 *le

24      instances of inlined subroutines other than at points where those subro*
 *utines are

25      actually called. Such concrete instances of inlined subroutines are ref*
 *erred to as

26      iconcrete out-of-line instances.j


27      In C++, for example, taking the address of a function declared to be in*
 *line can necessitate

28      the generation of a concrete out-of-line instance of the given function.


29      The DWARF representation of a concrete out-of-line instance of an inlin*
 *ed

30      subroutine is essentially the same as for a concrete inlined instance o*
 *f that

31      subroutine (as described in the preceding section). The representation *
 *of such a

32      concrete out-of-line instance  makes use of DW.AT.abstract.origin attri*
 *butes in

33      exactly the same way as they are used for a concrete inlined instance (*
 *that is, as

34      references to corresponding entries within the associated abstract inst*
 *ance tree).


35      The dioeerences between the DWARF representation of a concrete out-of-l*
 *ine

36      instance of a given subroutine and the representation of a concrete inl*
 *ined

37      instance of that same subroutine are as follows:



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 90
                              Chapter 3. Program Scope Entries



 1      1.  The root entry for a concrete out-of-line instance of a given inlin*
 *ed subroutine

 2          has the same tag as does its associated (abstract) inlined subrouti*
 *ne entry

 3          (that is, tag DW.TAG.subprogram rather than

 4          DW.TAG.inlined.subroutine).


 5      2.  The root entry for a concrete out-of-line instance tree is normally*
 * owned by

 6          the same parent entry that also owns the root entry of the associat*
 *ed abstract

 7          instance. However, it is not required that the abstract and out-of-*
 *line instance

 8          trees be owned by the same parent entry.



 9      3.3.8.4 Nested Inlined Subroutines


10      Some languages and compilers may permit the logical nesting of a subrou*
 *tine

11      within another subroutine, and may permit either the outer or the nested

12      subroutine, or both, to be inlined.


13      For a non-inlined subroutine nested within an inlined subroutine, the n*
 *ested

14      subroutine is described normally in both the abstract and concrete inli*
 *ned

15      instance trees for the outer subroutine. All rules pertaining to the ab*
 *stract and

16      concrete instance trees for the outer subroutine apply also to the abst*
 *ract and

17      concrete instance entries for the nested subroutine.


18      For an inlined subroutine nested within another inlined subroutine, the

19      following rules apply to their abstract and concrete instance trees:


20      1.  The abstract instance tree for the nested subroutine is described w*
 *ithin the

21          abstract instance tree for the outer subroutine according to the ru*
 *les in

22          Section 3.3.8.1 on page 86, and without regard to the fact that it *
 *is within an

23          outer abstract instance tree.


24      2.  Any abstract instance tree for a nested subroutine is always omitte*
 *d within

25          the concrete instance tree for an outer subroutine.


26      3.  A concrete instance tree for a nested subroutine is always omitted *
 *within the

27          abstract instance tree for an outer subroutine.


28      4.  The concrete instance tree for any inlined or out-of-line expansion*
 * of the

29          nested subroutine is described within a concrete instance tree for *
 *the outer

30          subroutine according to the rules in Sections 3.3.8.2 on page 87 or*
 * 3.3.8.3

31          following , respectively, and without regard to the fact that it is*
 * within an

32          outer concrete instance tree.


33      See Appendix D.7 on page 349 for discussion and examples.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 91
                              Chapter 3. Program Scope Entries



 1      3.3.9   Trampolines


 2      A trampoline is a compiler-generated subroutine that serves as an inter*
 *mediary in

 3      making a call to another subroutine. It may adjust parameters and/or th*
 *e result (if any)

 4      as appropriate to the combined calling and called execution contexts.


 5      A trampoline is represented by a debugging information entry with the t*
 *ag

 6      DW.TAG.subprogram or DW.TAG.inlined.subroutine that has a

 7      DW.AT.trampoline attribute. The value of that attribute indicates the t*
 *arget

 8      subroutine of the trampoline, that is, the subroutine to which the tram*
 *poline

 9      passes control. (A trampoline entry may but need not also have a

10      DW.AT.artiocial attribute.)


11      The value of the trampoline attribute may be represented using any of t*
 *he

12      following forms:


13        #  If the value is of class reference, then the value specioes the de*
 *bugging

14           information entry of the target subprogram.


15        #  If the value is of class address, then the value is the relocated *
 *address of the

16           target subprogram.


17        #  If the value is of class string, then the value is the (possibly m*
 *angled) name

18           of the target subprogram.


19        #  If the value is of class AEag, then the value true indicates that *
 *the containing

20           subroutine is a trampoline but that the target subroutine is not k*
 *nown.


21      The target subprogram may itself be a trampoline. (A sequence of trampo*
 *lines

22      necessarily ends with a non-trampoline subprogram.)


23      In C++, trampolines may be used to implement derived virtual member fun*
 *ctions; such

24      trampolines typically adjust the implicit this parameter in the course *
 *of passing control.

25      Other languages and environments may use trampolines in a manner someti*
 *mes known

26      as transfer functions or transfer vectors.


27      Trampolines may sometimes pass control to the target subprogram using a*
 * branch or

28      jump instruction instead of a call instruction, thereby leaving no trac*
 *e of their existence

29      in the subsequent execution context.


30      This attribute helps make it feasible for a debugger to arrange that st*
 *epping into a

31      trampoline or setting a breakpoint in a trampoline will result in stepp*
 *ing into or setting

32      the breakpoint in the target subroutine instead. This helps to hide the*
 * compiler generated

33      subprogram from the user.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 92
                              Chapter 3. Program Scope Entries



 1      3.4    Call Site Entries and Parameters


 2       A call site entry describes a call from one subprogram to another in t*
 *he source program.

 3      It provides information about the actual parameters of the call so that*
 * they may be more

 4      easily accessed by a debugger. When used together with call frame infor*
 *mation (see

 5      Section 6.4 on page 178), call site entries can be useful for computing*
 * the value of an

 6      actual parameter passed by a caller, even when the location description*
 * for the callee's

 7      corresponding formal parameter does not provide a current location for *
 *the formal

 8      parameter.


 9      The DWARF expression for computing the value of an actual parameter at *
 *a call site may

10      refer to registers or memory locations. The expression assumes these co*
 *ntain the values

11      they would have at the point where the call is executed. After the call*
 *ed subprogram has

12      been entered, these registers and memory locations might have been modi*
 *oed. In order to

13      recover the values that existed at the point of the call (to allow eval*
 *uation of the DWARF

14      expression for the actual parameter), a debugger may virtually unwind t*
 *he subprogram

15      activation (see Section 6.4 on page 178). Any register or memory locati*
 *on that cannot be

16      recovered is referred to as "clobbered by the call."


17      A source call can be compiled into dioeerent types of machine code:


18        #  A normal call uses a call-like instruction which transfers control*
 * to the start

19           of some subprogram and preserves the call site location for use by*
 * the

20           callee.


21        #  A tail call uses a jump-like instruction which transfers control t*
 *o the start of

22           some subprogram, but there is no call site location address to pre*
 *serve (and

23           thus none is available using the virtual unwind information).


24        #  A tail recursion call is a call to the current subroutine which is*
 * compiled as a

25           jump to the current subroutine.


26        #  An inline (or inlined) call is a call to an inlined subprogram, wh*
 *ere at least

27           one instruction has the location of the inlined subprogram or any *
 *of its

28           blocks or inlined subprograms.


29      There are also dioeerent types of ioptimized outj calls:


30        #  An optimized out (normal) call is a call that is in unreachable co*
 *de that has

31           not been emitted (such as, for example, the call to foo in if (0) *
 *foo();).


32        #  An optimized out inline call is a call to an inlined subprogram wh*
 *ich either

33           did not expand to any instructions or only parts of instructions b*
 *elong to it

34           and for debug information purposes those instructions are given a *
 *location

35           in the caller.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 93
                              Chapter 3. Program Scope Entries



 1      DW.TAG.call.site entries describe normal and tail calls but not tail re*
 *cursion

 2      calls, while DW.TAG.inlined.subroutine entries describe inlined calls (*
 *see

 3      Section 3.3.8 on page 86). Call site entries cannot fully describe tail*
 * recursion or

 4      optimized out calls.


 5      For optimized out calls there is no code address to use for DW.AT.call.*
 *return.pc or

 6      DW.AT.call.pc attributes; however, the fact that the souce code makes a*
 * call to a certain

 7      function at a specioc source code location and whether some of the argu*
 *ments have

 8      constant values can be useful for certain consumers.



 9      3.4.1   Call Site Entries


10      A call site is represented by a debugging information entry with the tag

11      DW.TAG.call.site. The entry for a call site is owned by the innermost

12      debugging information entry representing the scope within which the cal*
 *l is

13      present in the source program.


14      A scope entry (for example, a lexical block) that would not otherwise b*
 *e present in the

15      debugging information of a subroutine need not be introduced solely to *
 *represent the

16      immediately containing scope of a call.


17      The call site entry may have a DW.AT.call.return.pc attribute which is *
 *the

18      return address after the call. The value of this attribute corresponds *
 *to the return

19      address computed by call frame information in the called subprogram (see

20      Section 7.24 on page 250).


21      On many architectures the return address is the address immediately fol*
 *lowing the call

22      instruction, but on architectures with delay slots it might be an addre*
 *ss after the delay

23      slot of the call.


24      The call site entry may have a DW.AT.call.pc attribute which is the add*
 *ress of

25      the call-like instruction for a normal call or the jump-like instructio*
 *n for a tail call.


26      If the call site entry corresponds to a tail call, it has the DW.AT.cal*
 *l.tail.call

27      attribute, which is a AEag.


28      The call site entry may have a DW.AT.call.origin attribute which is a r*
 *eference.

29      For direct calls or jumps where the called subprogram is known it is a *
 *reference

30      to the called subprogram's debugging information entry. For indirect ca*
 *lls it may

31      be a reference to a DW.TAG.variable, DW.TAG.formal.parameter or

32      DW.TAG.member entry representing the subroutine pointer that is called.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 94
                              Chapter 3. Program Scope Entries



 1      The call site may have a DW.AT.call.target attribute which is a DWARF

 2      expression. For indirect calls or jumps where it is unknown at compile *
 *time

 3      which subprogram will be called the expression computes the address of *
 *the

 4      subprogram that will be called.


 5      The DWARF expression should not use register or memory locations that m*
 *ight be

 6      clobbered by the call.


 7      The call site entry may have a DW.AT.call.target.clobbered attribute wh*
 *ich is a

 8      DWARF expression. For indirect calls or jumps where the address is not

 9      computable without use of registers or memory locations that might be

10      clobbered by the call the DW.AT.call.target.clobbered attribute is used*
 * instead

11      of the DW.AT.call.target attribute.


12      The expression of a call target clobbered attribute may only be valid a*
 *t the time the call or

13      call-like transfer of control is executed.


14      The call site entry may have a DW.AT.type attribute referencing a debug*
 *ging

15      information entry for the type of the called function.


16      When DW.AT.call.origin is present, DW.AT.type is usually omitted.


17      The call site entry may have DW.AT.call.ole, DW.AT.call.line and

18      DW.AT.call.column attributes,  each of whose value is an integer consta*
 *nt.

19      These attributes represent the source ole, source line number, and sour*
 *ce column

20      number, respectively, of the orst character of the call statement or ex*
 *pression.

21      The call ole, call line, and call column attributes are interpreted in *
 *the same way

22      as the declaration ole, declaration line, and declaration column attrib*
 *utes,

23      respectively (see Section 2.14 on page 51).


24      The call ole, call line and call column coordinates do not describe the*
 * coordinates of the

25      subroutine declaration that was called, rather they describe the coordi*
 *nates of the call.



26      3.4.2   Call Site Parameters


27      The call site entry may own DW.TAG.call.site.parameter debugging

28      information entries representing the parameters passed to the call. Cal*
 *l site

29      parameter entries occur in the same order as the corresponding paramete*
 *rs in the

30      source. Each such entry has a DW.AT.location attribute which is a locat*
 *ion

31      description. This location description describes where the parameter is*
 * passed

32      (usually either some register, or a memory location expressible as the *
 *contents of

33      the stack register plus some ooeset).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 95
                              Chapter 3. Program Scope Entries



 1      Each DW.TAG.call.site.parameter entry may have a DW.AT.call.value

 2      attribute which is a DWARF expression which when evaluated yields the v*
 *alue

 3      of the parameter at the time of the call.


 4      If it is not possible to avoid registers or memory locations that might*
 * be clobbered by the

 5      call in the expression, then the DW.AT.call.value attribute should not *
 *be provided. The

 6      reason for the restriction is that the value of the parameter may be ne*
 *eded in the midst of

 7      the callee, where the call clobbered registers or memory might be alrea*
 *dy clobbered, and if

 8      the consumer is not assured by the producer it can safely use those val*
 *ues, the consumer

 9      can not safely use the values at all.


10      For parameters passed by reference, where the code passes a pointer to *
 *a location

11      which contains the parameter, or for reference type parameters, the

12      DW.TAG.call.site.parameter entry may also have a DW.AT.call.data.locati*
 *on

13      attribute whose value is a location description and a DW.AT.call.data.v*
 *alue

14      attribute whose value is a DWARF expression. The DW.AT.call.data.locati*
 *on

15      attribute describes where the referenced value lives during the call. I*
 *f it is just

16      DW.OP.push.object.address, it may be left out. The DW.AT.call.data.value

17      attribute describes the value in that location. The expression should n*
 *ot use

18      registers or memory locations that might be clobbered by the call, as i*
 *t might be

19      evaluated after virtually unwinding from the called function back to th*
 *e caller.


20      Each call site parameter entry may also have a DW.AT.call.parameter att*
 *ribute

21      which contains a reference to a DW.TAG.formal.parameter entry, DW.AT.ty*
 *pe

22      attribute referencing the type of the parameter or DW.AT.name attribute

23      describing the parameter's name.


24      Examples using call site entries and related attributes are found in Ap*
 *pendix D.15 on

25      page 373.



26      3.5    Lexical Block Entries


27      A lexical block is a bracketed sequence of source statements that may c*
 *ontain any number

28      of declarations. In some languages (including C and C++), blocks can be*
 * nested within

29      other blocks to any depth.


30      A lexical block is represented by a debugging information entry with th*
 *e tag

31      DW.TAG.lexical.block.


32      The lexical block entry may have either a DW.AT.low.pc and DW.AT.high.pc

33      pair of attributes or a DW.AT.ranges attribute whose values encode the

34      contiguous or non-contiguous address ranges, respectively, of the machi*
 *ne

35      instructions generated for the lexical block (see Section 2.17 on page *
 *53).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 96
                              Chapter 3. Program Scope Entries



 1      A lexical block entry may also have a DW.AT.entry.pc attribute whose va*
 *lue is

 2      the address of the orst executable instruction of the lexical block (se*
 *e Section 2.18

 3      on page 57).


 4      If a name has been given to the lexical block in the source program, th*
 *en the

 5      corresponding lexical block entry has a DW.AT.name attribute whose valu*
 *e is a

 6      null-terminated string containing the name of the lexical block.


 7      This is not the same as a C or C++ label (see Section 3.6).


 8      The lexical block entry owns debugging information entries that describ*
 *e the

 9      declarations within that lexical block. There is one such debugging inf*
 *ormation

10      entry for each local declaration of an identioer or inner lexical block.



11      3.6    Label Entries


12      A label is a way of identifying a source location. A labeled statement *
 *is usually the target

13      of one or more igo toj statements.


14      A label is represented by a debugging information entry with the tag

15      DW.TAG.label. The entry for a label is owned by the debugging informati*
 *on

16      entry representing the scope within which the name of the label could b*
 *e legally

17      referenced within the source program.


18      The label entry has a DW.AT.low.pc attribute whose value is the address*
 * of the

19      orst executable instruction for the location identioed by the label in *
 *the source

20      program. The label entry also has a DW.AT.name attribute whose value is*
 * a

21      null-terminated string containing the name of the label.



22      3.7    With Statement Entries


23      Both Pascal and Modula-2 support the concept of a iwithj statement. The*
 * with

24      statement specioes a sequence of executable statements within which the*
 * oelds of a record

25      variable may be referenced, unqualioed by the name of the record variab*
 *le.


26      A with statement is represented by a debugging information entry with t*
 *he tag

27      DW.TAG.with.stmt.


28      A with statement entry may have either a DW.AT.low.pc and DW.AT.high.pc

29      pair of attributes or a DW.AT.ranges attribute whose values encode the

30      contiguous or non-contiguous address ranges, respectively, of the machi*
 *ne

31      instructions generated for the with statement (see Section 2.17 on page*
 * 53).



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 97
                              Chapter 3. Program Scope Entries



 1      A with statement entry may also have a DW.AT.entry.pc attribute whose v*
 *alue

 2      is the address of the orst executable instruction of the with statement*
 * (see Section

 3      2.18 on page 57).


 4      The with statement entry has a DW.AT.type attribute, denoting the type *
 *of

 5      record whose oelds may be referenced without full qualiocation within t*
 *he body

 6      of the statement. It also has a DW.AT.location attribute, describing ho*
 *w to ond

 7      the base address of the record object referenced within the body of the*
 * with

 8      statement.



 9      3.8    Try and Catch Block Entries


10      In C++, a lexical block may be designated as a icatch block.j A catch b*
 *lock is an

11      exception handler that handles exceptions thrown by an immediately prec*
 *eding itry

12      block.j A catch block designates the type of the exception that it can *
 *handle.


13      A try block is represented by a debugging information entry with the tag

14      DW.TAG.try.block. A catch block is represented by a debugging informati*
 *on

15      entry with the tag DW.TAG.catch.block.


16      Both try and catch block entries may have either a DW.AT.low.pc and

17      DW.AT.high.pc pair of attributes or a DW.AT.ranges attribute whose valu*
 *es

18      encode the contiguous or non-contiguous address ranges, respectively, o*
 *f the

19      machine instructions generated for the block (see Section 2.17 on page *
 *53).


20      A try or catch block entry may also have a DW.AT.entry.pc attribute who*
 *se

21      value is the address of the orst executable instruction of the try or c*
 *atch block

22      (see Section 2.18 on page 57).


23      Catch block entries have at least one child entry, an entry representin*
 *g the type of

24      exception accepted by that catch block. This child entry has one of the*
 * tags

25      DW.TAG.formal.parameter or DW.TAG.unspecioed.parameters, and will

26      have the same form as other parameter entries.


27      The siblings immediately following a try block entry are its correspond*
 *ing catch

28      block entries.



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 98
                              Chapter 3. Program Scope Entries



 1      3.9    Declarations with Reduced Scope


 2      Any debugging information entry for a declaration (including objects,

 3      subprograms, types and modules) whose scope has an address range that i*
 *s a

 4      subset of the address range for the lexical scope most closely enclosin*
 *g the

 5      declared entity may have a DW.AT.start.scope attribute to specify that *
 *reduced

 6      range of addresses.


 7      There are two cases:


 8      1.  If the address range for the scope of the entry includes all of add*
 *resses for the

 9          containing scope except for a contiguous sequence of bytes at the b*
 *eginning

10          of the address range for the containing scope, then the address is *
 *specioed

11          using a value of class constant.


12          a) If the address range of the containing scope is contiguous, the *
 *value of

13             this attribute is the ooeset in bytes of the beginning of the ad*
 *dress range

14             for the scope of the object from the low PC value of the debuggi*
 *ng

15             information entry that deones that containing scope.


16          b) If the address range of the containing scope is non-contiguous (*
 *see 2.17.3

17             on page 54) the value of this attribute is the ooeset in bytes o*
 *f the

18             beginning of the address range for the scope of the entity from *
 *the

19             beginning of the orst range list entry for the containing scope *
 *that is not a

20             base address entry or an end-of-list entry.


21      2.  Otherwise, the set of addresses for the scope of the entity is spec*
 *ioed using a

22          value of class rnglistsptr. This value indicates the beginning of a*
 * range list

23          (see Section 2.17.3 on page 54).


24      For example, the scope of a variable may begin somewhere in the midst o*
 *f a lexical block

25      in a language that allows executable code in a block before a variable *
 *declaration, or where

26      one declaration containing initialization code may change the scope of *
 *a subsequent

27      declaration.


28      Consider the following example C code:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||floatx=99.99;
       |||=====================================================================*
 *=====|||intmyfunc()
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||floatf=x;
       |||=====================================================================*
 *=====|||floatx=88.99;
       |||=====================================================================*
 *=====|||return0;
       |||=====================================================================*
 *=====|||}_|___|



        July 15 2024               ***WORKING DRAFT***                        P*
 *age 99
                             Chapter 3. Program Scope Entries



1      C scoping rules require that the value of the variable x assigned to the*
 * variable f in the

2      initialization sequence is the value of the global variable x, rather th*
 *an the local x,

3      because the scope of the local variable x only starts after the full dec*
 *larator for the local x.


4      Due to optimization, the scope of an object may be non-contiguous and re*
 *quire use of a

5      range list even when the containing scope is contiguous. Conversely, the*
 * scope of an

6      object may not require its own range list even when the containing scope*
 * is

7      non-contiguous.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 100




 1      Chapter 4



 2      Data Object and Object List Entries



 3      This section presents the debugging information entries that describe i*
 *ndividual

 4      data objects: variables, parameters and constants, and lists of those o*
 *bjects that

 5      may be grouped in a single declaration, such as a common block.



 6      4.1    Data Object Entries


 7      Program variables, formal parameters and constants are represented by

 8      debugging information entries with the tags DW.TAG.variable,

 9      DW.TAG.formal.parameter and DW.TAG.constant, respectively.


10      The tag DW.TAG.constant is used for languages that have true named cons*
 *tants.


11      The debugging information entry for a program variable, formal paramete*
 *r or

12      constant may have the following attributes:


13      1.  A DW.AT.name attribute, whose value is a null-terminated string

14          containing the data object name.


15          If a variable entry describes an anonymous object (for example an a*
 *nonymous

16          union), the name attribute is omitted or its value consists of a si*
 *ngle zero byte.


17      2.  A DW.AT.external attribute, which is a AEag, if the name of a varia*
 *ble is

18          visible outside of its enclosing compilation unit.


19          The deonitions of C++ static data members of structures or classes *
 *are represented by

20          variable entries AEagged as external. Both ole static and local var*
 *iables in C and C++

21          are represented by non-external variable entries.


22      3.  A DW.AT.declaration attribute, which is a AEag that indicates wheth*
 *er this

23          entry represents a non-deoning declaration of an object.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 101
                            Chapter 4. Data Object and Object List



 1      4.  A DW.AT.location attribute, whose value describes the location of a*
 * variable

 2          or parameter at run-time.


 3          If no location attribute is present in a variable entry representin*
 *g the

 4          deonition of a variable (that is, with no DW.AT.declaration attribu*
 *te), or if

 5          the location attribute is present but has an empty location descrip*
 *tion (as

 6          described in Section 2.6 on page 39), the variable is assumed to ex*
 *ist in the

 7          source code but not in the executable program (but see number 10, b*
 *elow).


 8          In a variable entry representing a non-deoning declaration of a var*
 *iable, the

 9          location specioed supersedes the location specioed by the deoning

10          declaration but only within the scope of the variable entry; if no *
 *location is

11          specioed, then the location specioed in the deoning declaration app*
 *lies.


12          This can occur, for example, for a C or C++ external variable (one *
 *that is deoned and

13          allocated in another compilation unit) and whose location varies in*
 * the current unit

14          due to optimization.


15      5.  A DW.AT.type attribute describing the type of the variable, constan*
 *t or

16          formal parameter.


17      6.  If the variable entry represents the deoning declaration for a C++ *
 *static data

18          member of a structure, class or union, the entry has a DW.AT.specio*
 *cation

19          attribute, whose value is a reference to the debugging information *
 *entry

20          representing the declaration of this data member. The referenced en*
 *try also

21          has the tag DW.TAG.variable and will be a child of some class, stru*
 *cture or

22          union type entry.


23          If the variable entry represents a non-deoning declaration,

24          DW.AT.speciocation may be used to reference the deoning declaration*
 * of

25          the variable. If no DW.AT.speciocation attribute is present, the de*
 *oning

26          declaration may be found as a global deonition either in the current

27          compilation unit or in another compilation unit with the DW.AT.exte*
 *rnal

28          attribute.


29          Variable entries containing the DW.AT.speciocation attribute do not*
 * need to

30          duplicate information provided by the declaration entry referenced *
 *by the

31          speciocation attribute. In particular, such variable entries do not*
 * need to

32          contain attributes for the name or type of the data member whose de*
 *onition

33          they represent.


34      7.  A DW.AT.variable.parameter attribute, which is a AEag, if a formal

35          parameter entry represents a parameter whose value in the calling f*
 *unction

36          may be modioed by the callee. The absence of this attribute implies*
 * that the

37          parameter's value in the calling function cannot be modioed by the *
 *callee.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 102
                            Chapter 4. Data Object and Object List



 1      8.  A DW.AT.is.optional attribute, which is a AEag, if a parameter entry

 2          represents an optional parameter.


 3      9.  A DW.AT.default.value attribute for a formal parameter entry. The v*
 *alue of

 4          this attribute may be a constant, a reference to the debugging info*
 *rmation

 5          entry for a variable, a reference to a debugging information entry *
 *for a

 6          DWARF procedure, or a string containing a source language fragment.


 7            # If the attribute form is of class constant, that constant is in*
 *terpreted as a

 8              value whose type is the same as the type of the formal paramete*
 *r.


 9              For a constant form there is no way to express the absence of a*
 * default value.


10            # If the attribute form is of class reference, and the referenced*
 * entry is for a

11              variable, the default value of the parameter is the value of th*
 *e referenced

12              variable. If the reference value is 0, no default value has bee*
 *n specioed.



13            # If the attribute form is of class string, that string is interp*
 *reted as an

14              expression in the source language, as deoned by the compilation*
 * unit's

15              DW.AT.language.name and DW.AT.language.version attributes, that

16              is to be evaluated according to the rules deoned by that source*
 * language.


17              The source language fragment may be dioeerent from the actual s*
 *ource text if the

18              latter contains macros which have been expanded.



19    10.   A DW.AT.const.value attribute for an entry describing a variable or*
 * formal

20          parameter whose value is constant and not represented by an object *
 *in the

21          address space of the program, or an entry describing a named consta*
 *nt. (Note

22          that such an entry does not have a location attribute.) The value o*
 *f this

23          attribute may be a string or any of the constant data or data block*
 * forms, as

24          appropriate for the representation of the variable's value. The val*
 *ue is the

25          actual constant value of the variable, represented as it would be o*
 *n the target

26          architecture.


27          One way in which a formal parameter with a constant value and no lo*
 *cation can arise

28          is for a formal parameter of an inlined subprogram that corresponds*
 * to a constant

29          actual parameter of a call that is inlined.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 103
                            Chapter 4. Data Object and Object List



 1    11.   A DW.AT.endianity attribute, whose value is a constant that specioe*
 *s the

 2          endianity of the object. The value of this attribute specioes an AB*
 *I-deoned

 3          byte ordering for the value of the object. If omitted, the default *
 *endianity of

 4          data for the given type is assumed.


 5          The set of values and their meaning for this attribute is given in *
 *Table 4.1.

 6          These represent the default encoding formats as deoned by the target

 7          architecture's ABI or processor deonition. The exact deonition of t*
 *hese

 8          formats may dioeer in subtle ways for dioeerent architectures.


                             Table 4.1: Endianity attribute values
             ___________________________________________________________________
             _Name_____________||_Meaning_______________________________________

              DW.END.default ||   Default endian encoding (equivalent to the
                             |    absence of a DW.AT.endianity attribute)
                             |
              DW.END.big     ||   Big-endian encoding

             _DW.END.little____||_Little-endian_encoding________________________


 9    12.   A DW.AT.const.expr attribute, constant expression attribute which i*
 *s a AEag,

10          if a variable entry represents a C++ object declared with the const*
 *expr

11          specioer. This attribute indicates that the variable can be evaluat*
 *ed as a

12          compile-time constant.


13          In C++, a variable declared with constexpr is implicitly const. Suc*
 *h a variable has

14          a DW.AT.type attribute whose value is a reference to a debugging in*
 *formation entry

15          describing a const qualioed type.


16    13.   A DW.AT.linkage.name attribute for a variable or constant entry as

17          described in Section 2.22 on page 58.



18      4.2    Common Block Entries


19      A Fortran common block may be described by a debugging information entry

20      with the tag DW.TAG.common.block.


21      The common block entry has a DW.AT.name attribute whose value is a

22      null-terminated string containing the common block name. It may also ha*
 *ve a

23      DW.AT.linkage.name attribute as described in Section 2.22 on page 58.


24      A common block entry also has a DW.AT.location attribute whose value

25      describes the location of the beginning of the common block.


26      The common block entry owns debugging information entries describing the

27      variables contained within the common block.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 104
                            Chapter 4. Data Object and Object List



 1      Fortran allows each declarer of a common block to independently deone i*
 *ts contents;

 2      thus, common blocks are not types.



 3      4.3    Namelist Entries


 4      At least one language, Fortran 90, has the concept of a namelist. A nam*
 *elist is an ordered

 5      list of the names of some set of declared objects. The namelist object *
 *itself may be used as

 6      a replacement for the list of names in various contexts.


 7      A namelist is represented by a debugging information entry with the tag

 8      DW.TAG.namelist. If the namelist itself has a name, the namelist entry *
 *has a

 9      DW.AT.name attribute, whose value is a null-terminated string containin*
 *g the

10      namelist's name.


11      Each name that is part of the namelist is represented by a debugging in*
 *formation

12      entry with the tag DW.TAG.namelist.item. Each such entry is a child of *
 *the

13      namelist entry, and all of the namelist item entries for a given nameli*
 *st are

14      ordered as were the list of names they correspond to in the source prog*
 *ram.


15      Each namelist item entry contains a DW.AT.namelist.item attribute whose

16      value is a reference to the debugging information entry representing the

17      declaration of the item whose name appears in the namelist.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 105




 1      Chapter 5



 2      Type Entries



 3      This section presents the debugging information entries that describe p*
 *rogram

 4      types: base types, modioed types and user-deoned types.



 5      5.1    Base Type Entries


 6      A base type is a data type that is not deoned in terms of other data ty*
 *pes. Each

 7      programming language has a set of base types that are considered to be *
 *built into that

 8      language.


 9      A base type is represented by a debugging information entry with the tag

10      DW.TAG.base.type.


11      A base type entry may have a DW.AT.name attribute whose value is a

12      null-terminated string containing the name of the base type as recogniz*
 *ed by the

13      programming language of the compilation unit containing the base type e*
 *ntry.


14      A base type entry has a DW.AT.encoding attribute describing how the bas*
 *e type

15      is encoded and is to be interpreted. The DW.AT.encoding attribute is de*
 *scribed

16      in Section 5.1.1 following.


17      A base type entry may have a DW.AT.endianity attribute as described in

18      Section 4.1 on page 101. If omitted, the encoding assumes the represent*
 *ation that

19      is the default for the target architecture.


20      A base type entry has a DW.AT.byte.size attribute or a

21      DW.AT.bit.size attribute whose integer constant value (see Section 2.21*
 * on

22      page 58) is the amount of storage needed to hold a value of the type.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 106
                                   Chapter 5. Type Entries



 1      For example, the C type int on a machine that uses 32-bit integers is r*
 *epresented by a

 2      base type entry with a name attribute whose value is iintj, an encoding*
 * attribute whose

 3      value is DW.ATE.signed and a byte size attribute whose value is 4.


 4      If the value of an object of the given type does not fully occupy the s*
 *torage

 5      described by a byte size attribute, the base type entry may also have a

 6      DW.AT.bit.size and a DW.AT.data.bit.ooeset attribute, both of whose val*
 *ues

 7      are integer constant values (see Section 2.19 on page 57). The bit size*
 * attribute

 8      describes the actual size in bits used to represent values of the given*
 * type. The

 9      data bit ooeset attribute is the ooeset in bits from the beginning of t*
 *he containing

10      storage to the beginning of the value. Bits that are part of the ooeset*
 * are padding.

11      If this attribute is omitted a default data bit ooeset of zero is assum*
 *ed.


12      A DW.TAG.base.type entry may have additional attributes that augment

13      certain of the base type encodings; these are described in the followin*
 *g section.



14      5.1.1   Base Type Encodings


15      A base type entry has a DW.AT.encoding attribute describing how the bas*
 *e type

16      is encoded and is to be interpreted. The value of this attribute is an *
 *integer of

17      class constant. The set of values and their meanings for the DW.AT.enco*
 *ding

18      attribute is given in Table 5.1 on the next page.


19      In Table 5.1, encodings are shown in groups that have similar character*
 *istics purely for

20      presentation purposes. These groups are not part of this DWARF specioca*
 *tion.



21      5.1.1.1 Simple Encodings


22      Types with simple encodings are widely supported in many programming

23      languages and are not discussed further.


24      For a type with simple encodings, the type entry may have a DW.AT.bias

25      attribute whose value is an integer constant which is added to the enco*
 *ded value

26      to determine the value of an object of the type in the source program. *
 *If the

27      DW.AT.bias is encoded using DW.FORM.data!n?, then the bias value is

28      treated as an unsigned integer.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 107
                           Chapter 5. Type Entries



                     Table 5.1: Encoding attribute values
_____________________________________________________________________________
_Name_________________________||_Meaning_____________________________________

           Simple encodings

 DW.ATE.boolean             ||   true or false

 DW.ATE.address             ||   machine address

 DW.ATE.signed               ||  signed binary integer

 DW.ATE.signed.char         ||   signed character

 DW.ATE.unsigned            ||   unsigned binary integer

 DW.ATE.unsigned.char       ||   unsigned character

           Character encodings

 DW.ATE.ASCII               ||   ISO/IEC 646:1991 character

 DW.ATE.UCS                ||    ISO/IEC 10646-1:1993 character (UCS-4)

 DW.ATE.UTF                 ||   ISO/IEC 10646-1:1993 character

           Bit-precise integer types

 DW.ATE.signed.bitint        ||  bit-precise signed integer

 DW.ATE.unsigned.bitint      ||  bit-precise unsigned integer

           Scaled encodings

 DW.ATE.signed.oxed         ||   signed oxed-point scaled integer

 DW.ATE.unsigned.oxed      ||    unsigned oxed-point scaled integer

           Floating-point encodings

 DW.ATE.AEoat                 || binary AEoating-point number

 DW.ATE.complex.AEoat        ||  complex binary AEoating-point number

 DW.ATE.imaginary.AEoat      ||  imaginary binary AEoating-point number

 DW.ATE.decimal.AEoat        ||  IEEE 754R decimal AEoating-point number

           Decimal string encodings

 DW.ATE.packed.decimal      ||   packed decimal number

 DW.ATE.numeric.string      ||   numeric string

 DW.ATE.edited               ||  edited string

           Complex integral encodings

 DW.ATE.complex.signed     ||    complex (signed) binary integral number

 DW.ATE.imaginary.signed    ||   imaginary (signed) binary integral number

 DW.ATE.complex.unsigned   ||    complex unsigned binary integral number

_DW.ATE.imaginary.unsigned_||____imaginary_unsigned_binary_integral_number___



July 15 2024               ***WORKING DRAFT***                       Page 108
                                   Chapter 5. Type Entries



 1      5.1.1.2 Character Encodings


 2      DW.ATE.UTF specioes the Unicode string encoding (see the Universal

 3      Character Set standard, ISO/IEC 10646-1:1993).


 4      For example, the C++ type char16.t is represented by a base type entry *
 *with a name

 5      attribute whose value is ichar16.tj, an encoding attribute whose value *
 *is

 6      DW.ATE.UTF and a byte size attribute whose value is 2.


 7      DW.ATE.ASCII and DW.ATE.UCS specify encodings for the Fortran 2003

 8      string kinds ASCII (ISO/IEC 646:1991) and ISO 10646 (UCS-4 in ISO/IEC

 9      10646:2000).



10      5.1.2   Bit-precise integer types


11      Bit-precise integer types DW.ATE.signed.bitint and DW.ATE.unsigned.biti*
 *nt

12      are supported in C231, where they are known as _BitInt(N) and

13      unsigned _BitInt(N)  , respectively.



14      5.1.2.1 Scaled Encodings


15      The DW.ATE.signed.oxed and DW.ATE.unsigned.oxed entries describe

16      signed and unsigned oxed-point binary data types, respectively.


17      The oxed binary type encodings have a DW.AT.digit.count attribute with *
 *the

18      same interpretation as described for the DW.ATE.packed.decimal and

19      DW.ATE.numeric.string base type encodings (see Section 5.1.2.3 on the

20      following page).


21      For a data type with a decimal scale factor, the oxed binary type entry*
 * has a

22      DW.AT.decimal.scale attribute with the same interpretation as described*
 * for

23      the DW.ATE.packed.decimal and DW.ATE.numeric.string base types (see

24      Section 5.1.2.3 on the next page).


25      For a data type with a binary scale factor, the oxed binary type entry *
 *has a

26      DW.AT.binary.scale attribute. The DW.AT.binary.scale attribute is an in*
 *teger

27      constant value that represents the exponent of the base two scale facto*
 *r to be

28      applied to an instance of the type. Zero scale puts the binary point im*
 *mediately

29      to the right of the least signiocant bit. Positive scale moves the bina*
 *ry point to the

30      right and implies that additional zero bits on the right are not stored*
 * in an

31      instance of the type. Negative scale moves the binary point to the left*
 *; if the

32      absolute value of the scale is larger than the number of bits, this imp*
 *lies

33      additional zero bits on the left are not stored in an instance of the t*
 *ype.
        _______________________________
           1C23 is an informal name for what will likely become ISO/IEC 9899:20*
 *24.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 109
                                   Chapter 5. Type Entries



 1      For a data type with a rational scale factor, one or both of the follow*
 *ing attributes

 2      may be used:


 3        #  DW.AT.scale.multiplier. This attribute is an integer constant valu*
 *e that

 4           represents a multiplicative scale factor to be applied to an insta*
 *nce of the

 5           type.


 6        #  DW.AT.scale.divisor. This attribute is an integer constant value t*
 *hat

 7           represents the reciprocal of a multiplicative scale factor to be a*
 *pplied to an

 8           instance of the type.


 9      If both attributes are present, both are applied, with the result being*
 * equivalent to

10      a rational scale factor x/y, where x is the value of DW.AT.scale.multip*
 *lier and y

11      is the value of DW.AT.scale.divisor.


12      For a data type with a non-rational scale factor, the oxed binary type *
 *entry has a

13      DW.AT.small attribute which references a DW.TAG.constant entry. The sca*
 *le

14      factor value is interpreted in accordance with the value deoned by the

15      DW.TAG.constant entry. The value represented is the product of the inte*
 *ger

16      value in memory and the associated constant entry for the type.


17      The DW.AT.small attribute is deoned with the Ada small attribute in min*
 *d.


18      If a type entry has attributes that describe more than one kind of scal*
 *e factor, the

19      resulting scale factor for the type is the product of the individual sc*
 *ale factors.



20      5.1.2.2 Floating-Point Encodings


21      Types with binary AEoating-point encodings (DW.ATE.AEoat,

22      DW.ATE.complex.AEoat and DW.ATE.imaginary.AEoat) are supported in many

23      programming languages and are not discussed further.


24      DW.ATE.decimal.AEoat specioes AEoating-point representations that have a

25      power-of-ten exponent, such as specioed in IEEE 754R.



26      5.1.2.3 Decimal String Encodings


27      The DW.ATE.packed.decimal and DW.ATE.numeric.string base type

28      encodings represent packed and unpacked decimal string numeric data typ*
 *es,

29      respectively, either of which may be either signed or unsigned. These b*
 *ase types

30      are used in combination with DW.AT.decimal.sign, DW.AT.digit.count and

31      DW.AT.decimal.scale attributes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 110
                                   Chapter 5. Type Entries



 1      A DW.AT.decimal.sign attribute is an integer constant that conveys the

 2      representation of the sign of the decimal type (see Table 5.2). Its int*
 *eger constant

 3      value is interpreted to mean that the type has a leading overpunch, tra*
 *iling

 4      overpunch, leading separate or trailing separate sign representation or,

 5      alternatively, no sign at all.



                            Table 5.2: Decimal sign attribute values
        _______________________________________________________________________*
 *______
        _Name______________________||_Meaning__________________________________*
 *______

         DW.DS.unsigned           ||  Unsigned

         DW.DS.leading.overpunch ||   Sign is encoded in the most signiocant di*
 *git in a
                                 |    target-dependent manner
                                 |
         DW.DS.trailing.overpunch ||  Sign is encoded in the least signiocant d*
 *igit in a
                                  |   target-dependent manner
                                  |
         DW.DS.leading.separate    || Decimal type: Sign is a i+j or i-j charac*
 *ter to
                                   |  the left of the most signiocant digit.
                                   |
         DW.DS.trailing.separate    ||Decimal type: Sign is a i+j or i-j charac*
 *ter to
                                    | the right of the least signiocant digit.
                                    |
                                     |
                                     |Packed decimal type: Least signiocant nib*
 *ble
                                     |
                                     |contains a target-dependent value indicat*
 *ing
                                     |positive or negative.
        _____________________________|_________________________________________*
 *______


 6      The DW.AT.decimal.scale attribute is an integer constant value that rep*
 *resents

 7      the exponent of the base ten scale factor to be applied to an instance *
 *of the type.

 8      A scale of zero puts the decimal point immediately to the right of the *
 *least

 9      signiocant digit. Positive scale moves the decimal point to the right a*
 *nd implies

10      that additional zero digits on the right are not stored in an instance *
 *of the type.

11      Negative scale moves the decimal point to the left; if the absolute val*
 *ue of the

12      scale is larger than the digit count, this implies additional zero digi*
 *ts on the left

13      are not stored in an instance of the type.


14      The DW.AT.digit.count attribute is an integer constant value that repre*
 *sents the

15      number of digits in an instance of the type.


16      The DW.ATE.edited base type is used to represent an edited numeric or

17      alphanumeric data type. It is used in combination with a DW.AT.picture.*
 *string

18      attribute whose value is a null-terminated string containing the target*
 *-dependent

19      picture string associated with the type.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 111
                                   Chapter 5. Type Entries



 1      If the edited base type entry describes an edited numeric data type, th*
 *e edited

 2      type entry has a DW.AT.digit.count and a DW.AT.decimal.scale attribute.

 3      These attributes have the same interpretation as described for the

 4      DW.ATE.packed.decimal and DW.ATE.numeric.string base types. If the

 5      edited type entry describes an edited alphanumeric data type, the edite*
 *d type

 6      entry does not have these attributes.


 7      The presence or absence of the DW.AT.digit.count and DW.AT.decimal.scale

 8      attributes allows a debugger to easily distinguish edited numeric from *
 *edited

 9      alphanumeric, although in principle the digit count and scale are deriv*
 *able by

10      interpreting the picture string.



11      5.1.2.4 Complex Integral Encodings


12      Complex types with binary integral encodings (DW.ATE.complex.signed,

13      DW.ATE.imaginary.signed, DW.ATE.complex.unsigned and

14      DW.ATE.imaginary.unsigned) are supported in some programming languages

15      (for example, GNU C and Rust) and are not discussed further."



16      5.2    Unspecioed Type Entries


17      Some languages have constructs in which a type may be left unspecioed o*
 *r the

18      absence of a type may be explicitly indicated.


19      An unspecioed (implicit, unknown, ambiguous or nonexistent) type is

20      represented by a debugging information entry with the tag

21      DW.TAG.unspecioed.type. If a name has been given to the type, then the

22      corresponding unspecioed type entry has a DW.AT.name attribute whose va*
 *lue

23      is a null-terminated string containing the name.


24      The interpretation of this debugging information entry is intentionally*
 * left AEexible to

25      allow it to be interpreted appropriately in dioeerent languages. For ex*
 *ample, in C and

26      C++ the language implementation can provide an unspecioed type entry wi*
 *th the name

27      ivoidj which can be referenced by the type attribute of pointer types a*
 *nd typedef

28      declarations for 'void' (see Sections 5.3 on the next page and 5.4 on p*
 *age 115,

29      respectively). As another example, in Ada such an unspecioed type entry*
 * can be referred

30      to by the type attribute of an access type where the denoted type is in*
 *complete (the name

31      is declared as a type but the deonition is deferred to a separate compi*
 *lation unit).


32      C++ permits using the auto return type specioer for the return type of *
 *a member

33      function declaration. The actual return type is deduced based on the de*
 *onition of the

34      function, so it may not be known when the function is declared. The lan*
 *guage

35      implementation can provide an unspecioed type entry with the name auto *
 *which can be



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 112
                                   Chapter 5. Type Entries



 1      referenced by the return type attribute of a function declaration entry*
 *. When the function

 2      is later deoned, the DW.TAG.subprogram entry for the deonition includes*
 * a reference to

 3      the actual return type.



 4      5.3    Type Modioer Entries


 5      A base or user-deoned type may be modioed in dioeerent ways in dioeerent

 6      languages. A type modioer is represented in DWARF by a debugging

 7      information entry with one of the tags given in Table 5.3.



                                 Table 5.3: Type modioer tags
        _______________________________________________________________________*
 *__________
        _Name___________________________||_Meaning_____________________________*
 *__________

         DW.TAG.atomic.type           ||   atomic qualioed type (for example, i*
 *n C)

         DW.TAG.const.type            ||   const qualioed type (for example in *
 *C, C++)

         DW.TAG.immutable.type       ||    immutable type (for example, in D)

         DW.TAG.packed.type          ||    packed type (for example in Ada, Pas*
 *cal)

         DW.TAG.pointer.type          ||   pointer to an object of the type bei*
 *ng modioed

         DW.TAG.reference.type        ||   reference to (lvalue of) an object o*
 *f the type
                                      |    beingmodioed
                                      |
         DW.TAG.restrict.type          ||  restrict qualioed type

         DW.TAG.rvalue.reference.type ||   rvalue reference to an object of the*
 * type being
                                      |    modioed (for example, in C++)
                                      |
         DW.TAG.shared.type           ||   shared qualioed type (for example, i*
 *n UPC)

        _DW.TAG.volatile.type__________||__volatile_qualioed_type_(for_example,*
 *_in_C,_C++)_



 8      If a name has been given to the modioed type in the source program, the*
 *n the

 9      corresponding modioed type entry has a DW.AT.name attribute whose value*
 * is

10      a null-terminated string containing the name of the modioed type.


11      Each of the type modioer entries has a DW.AT.type attribute, whose valu*
 *e is a

12      reference to a debugging information entry describing a base type, a us*
 *er-deoned

13      type or another type modioer.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 113
                                   Chapter 5. Type Entries



        As examples of how type modioers are ordered, consider the following C *
 *declarations:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||constunsignedchar*volatilep;_|___|

        This_represents_a_volatile_pointer_to_a_constant_character._It_is_encod*
 *ed_in_DWARF_as
        |                                                                      *
 *        |
        |        DW_TAG_variable(p) -->                                        *
 *        |
        ||          DW_TAG_volatile_type -->                                   *
 *        ||
        |               DW_TAG_pointer_type -->                                *
 *        |
        ||                  DW_TAG_const_type -->                              *
 *        ||
        ||_____________________DW_TAG_base_type(unsigned_char)_________________*
 *_______ ||


        On the other hand
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||volatileunsignedchar*constrestrictp;_|___|

        represents_a_restricted_constant_pointer_to_a_volatile_character.___Thi*
 *s_is_encoded_as||

        ||       DW_TAG_variable(p) -->                                        *
 *        ||
        |           DW_TAG_restrict_type -->                                   *
 *        |
        ||              DW_TAG_const_type -->                                  *
 *        ||
        |                   DW_TAG_pointer_type -->                            *
 *        |
        ||                     DW_TAG_volatile_type -->                        *
 *        ||
        ||_________________________DW_TAG_base_type(unsigned_char)_____________*
 *_______ ||


                              Figure 5.1: Type modioer examples



 1      A modioed type entry describing a pointer or reference type (using

 2      DW.TAG.pointer.type, DW.TAG.reference.type or

 3      DW.TAG.rvalue.reference.type) may have a DW.AT.address.class attribute *
 *to

 4      describe how objects having the given pointer or reference type are der*
 *eferenced.


 5      A modioed type entry describing a UPC shared qualioed type (using

 6      DW.TAG.shared.type) may have a DW.AT.count attribute whose value is a

 7      constant expressing the (explicit or implied) blocksize specioed for th*
 *e type in the

 8      source. If no count attribute is present, then the iinonitej blocksize *
 *is assumed.


 9      When multiple type modioers are chained together to modify a base or

10      user-deoned type, the tree ordering reAEects the semantics of the appli*
 *cable

11      language rather than the textual order in the source presentation.


12      Examples of modioed types are shown in Figure 5.1.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 114
                                   Chapter 5. Type Entries



 1      5.4    Typedef Entries


 2      A named type that is deoned in terms of another type deonition is repre*
 *sented

 3      by a debugging information entry with the tag DW.TAG.typedef. The typed*
 *ef

 4      entry has a DW.AT.name attribute whose value is a null-terminated string

 5      containing the name of the typedef.


 6      The typedef entry may also contain a DW.AT.type attribute whose value i*
 *s a

 7      reference to the type named by the typedef. If the debugging informatio*
 *n entry

 8      for a typedef represents a declaration of the type that is not also a d*
 *eonition, it

 9      does not contain a type attribute.


10      Depending on the language, a named type that is deoned in terms of anot*
 *her type may be

11      called a type alias, a subtype, a constrained type and other terms. A t*
 *ype name declared

12      with no deoning details may be termed an incomplete, forward or hidden *
 *type. While the

13      DWARF DW.TAG.typedef entry was originally inspired by the like named co*
 *nstruct in

14      C and C++, it is broadly suitable for similar constructs (by whatever s*
 *ource syntax) in

15      other languages.



16      5.5    Array Type Entries


17      Many languages share the concept of an iarray,j which is a table of com*
 *ponents of

18      identical type. Furthermore, many architectures contain vector types wh*
 *ich mirror the

19      language concept of a short single dimension array but have dioeerent e*
 *ncoding, a

20      dioeerent calling convention and dioeerent arithmetic and logical opera*
 *tional semantics

21      than the source language arrays. Likewise, a few architectures are star*
 *ting to add matrix

22      register types with similar variations in encoding and semantics from n*
 *ormal source

23      language array types.


24      An array type is represented by a debugging information entry with the *
 *tag

25      DW.TAG.array.type. If a name has been given to the array type in the so*
 *urce

26      program, then the corresponding array type entry has a DW.AT.name attri*
 *bute

27      whose value is a null-terminated string containing the array type name.


28      The array type may have a DW.AT.tensor attribute, which is a AEag. If p*
 *resent,

29      this attribute indicates that the entry describes a vector or matrix ty*
 *pe. The array

30      dimensions (see below) describe the vector width, and when applicable t*
 *he

31      number of rows.


32      The array type entry describing a multidimensional array may have a

33      DW.AT.ordering attribute whose integer constant value is interpreted to*
 * mean

34      either row-major or column-major ordering of array elements. The set of*
 * values

35      and their meanings for the ordering attribute are listed in Table 5.4 f*
 *ollowing. If



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 115
                                   Chapter 5. Type Entries



 1      no ordering attribute is present, the default ordering for the source l*
 *anguage

 2      (which is indicated by the DW.AT.language.name attribute of the enclosi*
 *ng

 3      compilation unit entry) is assumed.



                                  Table 5.4: Array ordering

                                   _______________________

                                   DW.ORD.col.major

                                   DW.ORD.row.major
                                   _______________________



 4      An array type entry has a DW.AT.type attribute describing the type of e*
 *ach

 5      element of the array. If DW.AT.tensor is present, the element type must*
 * be a

 6      base type (see Section 5.1 on page 106).


 7      If the amount of storage allocated to hold each element of an object of*
 * the given

 8      array type is dioeerent from the amount of storage that is normally all*
 *ocated to

 9      hold an individual object of the indicated element type, then the array*
 * type entry

10      has either a DW.AT.byte.stride or a DW.AT.bit.stride attribute, whose v*
 *alue

11      (see Section 2.19 on page 57) is the size of each element of the array.


12      The array type entry may have either a DW.AT.byte.size or a DW.AT.bit.s*
 *ize

13      attribute (see Section 2.21 on page 58), whose value is the amount of s*
 *torage

14      needed to hold an instance of the array type.


15      If the size of the array can be determined statically at compile time, *
 *this value can usually

16      be computed by multiplying the number of array elements by the size of *
 *each element.


17      Each array dimension is described by a debugging information entry with*
 * either

18      the tag DW.TAG.subrange.type or the tag DW.TAG.enumeration.type. These

19      entries are children of the array type entry and are ordered to reAEect*
 * the

20      appearance of the dimensions in the source program (that is, leftmost d*
 *imension

21      orst, next to leftmost second, and so on).


22      In languages that have no concept of a imultidimensional arrayj (for ex*
 *ample, C), an

23      array of arrays may be represented by a debugging information entry for*
 * a

24      multidimensional array.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 116
                                   Chapter 5. Type Entries



 1      Alternatively, for an array with dynamic rank the array dimensions are *
 *described

 2      by a debugging information entry with the tag DW.TAG.generic.subrange.

 3      This entry has the same attributes as a DW.TAG.subrange.type entry; how*
 *ever,

 4      there is just one DW.TAG.generic.subrange entry and it describes all of*
 * the

 5      dimensions of the array. If DW.TAG.generic.subrange is used, the number*
 * of

 6      dimensions must be specioed using a DW.AT.rank attribute. See also Sect*
 *ion

 7      5.18.3 on page 139.


 8      Other attributes especially applicable to arrays are DW.AT.allocated,

 9      DW.AT.associated and DW.AT.data.location, which are described in Section

10      5.18 on page 137. For relevant examples, see also Appendix D.2.1 on pag*
 *e 306.



11      5.6    Coarray Type Entries


12      In Fortran, a icoarrayj is an array whose elements are located in dioee*
 *rent processes

13      rather than in the memory of one process. The individual elements of a *
 *coarray can be

14      scalars or arrays. Similar to arrays, coarrays have icodimensionsj that*
 * are indexed using

15      a icoindexj or multiple icoindicesj.


16      A coarray type is represented by a debugging information entry with the*
 * tag

17      DW.TAG.coarray.type. If a name has been given to the coarray type in the

18      source, then the corresponding coarray type entry has a DW.AT.name attr*
 *ibute

19      whose value is a null-terminated string containing the array type name.


20      A coarray entry has one or more DW.TAG.subrange.type child entries, one*
 * for

21      each codimension. It also has a DW.AT.type attribute describing the typ*
 *e of

22      each element of the coarray.


23      In a coarray application, the run-time number of processes in the appli*
 *cation is part of the

24      coindex calculation. It is represented in the Fortran source by a coind*
 *ex which is declared

25      with a i*j as the upper bound. To express this concept in DWARF, the

26      DW.TAG.subrange.type child entry for that index has only a lower bound *
 *and no

27      upper bound.


28      How coarray elements are located and how coindices are converted to pro*
 *cess

29      speciocations is implementation-deoned.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 117
                                   Chapter 5. Type Entries



 1      5.7    Structure, Union, Class and Interface Type


 2             Entries


 3      The languages C, C++, and Pascal, among others, allow the programmer to*
 * deone types

 4      that are collections of related components. In C and C++, these collect*
 *ions are called

 5      istructures.j In Pascal, they are called irecords.j The components may *
 *be of dioeerent

 6      types. The components are called imembersj in C and C++, and ioeldsj in*
 * Pascal.


 7      The components of these collections each exist in their own space in co*
 *mputer memory.

 8      The components of a C or C++ iunionj all coexist in the same memory.


 9      Pascal and other languages have a idiscriminated union,j also called a *
 *ivariant record.j

10      Here, selection of a number of alternative substructures (ivariantsj) i*
 *s based on the

11      value of a component that is not part of any of those substructures (th*
 *e idiscriminantj).


12      C++ and Java have the notion of iclass,j which is in some ways similar *
 *to a structure. A

13      class may have imember functionsj which are subroutines that are within*
 * the scope of a

14      class or structure.


15      The C++ notion of structure is more general than in C, being equivalent*
 * to a class with

16      minor dioeerences. Accordingly, in the following discussion, statements*
 * about C++

17      classes may be understood to apply to C++ structures as well.



18      5.7.1   Structure, Union and Class Type Entries


19      Structure, union, and class types are represented by debugging informat*
 *ion

20      entries with the tags DW.TAG.structure.type, DW.TAG.union.type, and

21      DW.TAG.class.type, respectively. If a name has been given to the struct*
 *ure,

22      union, or class in the source program, then the corresponding structure*
 * type,

23      union type, or class type entry has a DW.AT.name attribute whose value *
 *is a

24      null-terminated string containing the type name.


25      The members of a structure, union, or class are represented by debugging

26      information entries that are owned by the corresponding structure type,*
 * union

27      type, or class type entry and appear in the same order as the correspon*
 *ding

28      declarations in the source program.


29      A structure, union, or class type may have a DW.AT.export.symbols attri*
 *bute

30      which indicates that all member names deoned within the structure, unio*
 *n, or

31      class may be referenced as if they were deoned within the containing st*
 *ructure,

32      union, or class.


33      This may be used to describe anonymous structures, unions and classes i*
 *n C or C++.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 118
                                   Chapter 5. Type Entries



 1      A structure type, union type or class type entry may have either a

 2      DW.AT.byte.size or a DW.AT.bit.size attribute (see Section 2.21 on page*
 * 58),

 3      whose value is the amount of storage needed to hold an instance of the *
 *structure,

 4      union or class type, including any padding.


 5      An incomplete structure, union or class type is represented by a struct*
 *ure, union

 6      or class entry that does not have a byte size attribute and that has a

 7      DW.AT.declaration attribute.


 8      If the complete declaration of a type has been placed in a separate typ*
 *e unit (see

 9      Section 3.1.4 on page 72), an incomplete declaration of that type in the

10      compilation unit may provide the unique 8-byte signature of the type us*
 *ing a

11      DW.AT.signature attribute.


12      If a structure, union or class entry represents the deonition of a stru*
 *cture, union

13      or class member corresponding to a prior incomplete structure, union or*
 * class,

14      the entry may have a DW.AT.speciocation attribute whose value is a refe*
 *rence

15      to the debugging information entry representing that incomplete declara*
 *tion.


16      Structure, union and class entries containing the DW.AT.speciocation at*
 *tribute

17      do not need to duplicate information provided by the declaration entry

18      referenced by the speciocation attribute. In particular, such entries d*
 *o not need to

19      contain an attribute for the name of the structure, union or class they*
 * represent if

20      such information is already provided in the declaration.


21      For C and C++, data member declarations occurring within the declaratio*
 *n of a

22      structure, union or class type are considered to be ideonitionsj of tho*
 *se members, with

23      the exception of istaticj data members, whose deonitions appear outside*
 * of the

24      declaration of the enclosing structure, union or class type. Function m*
 *ember declarations

25      appearing within a structure, union or class type declaration are deoni*
 *tions only if the

26      body of the function also appears within the type declaration.


27      If the deonition for a given member of the structure, union or class do*
 *es not

28      appear within the body of the declaration, that member also has a debug*
 *ging

29      information entry describing its deonition. That latter entry has a

30      DW.AT.speciocation attribute referencing the debugging information entry

31      owned by the body of the structure, union or class entry and representi*
 *ng a

32      non-deoning declaration of the data, function or type member. The refer*
 *enced

33      entry will not have information about the location of that member (low *
 *and high

34      PC attributes for function members, location descriptions for data memb*
 *ers) and

35      will have a DW.AT.declaration attribute.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 119
                                   Chapter 5. Type Entries



 1      Consider a nested class whose deonition occurs outside of the containin*
 *g class deonition,

 2      as in:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structA{
       |||=====================================================================*
 *=====|||structB;
       |||=====================================================================*
 *=====|||};
       |||=====================================================================*
 *=====|||structA::B{...};_|___|


 3      The two dioeerent structs can be described in dioeerent compilation uni*
 *ts to facilitate

 4      DWARF space compression (see Appendix E.1 on page 390).

 5      A structure type, union type or class type entry may have a

 6      DW.AT.calling.convention attribute, whose value indicates whether a val*
 *ue of

 7      the type is passed by reference or passed by value. The set of calling *
 *convention

 8      codes for use with types is given in Table 5.5 following.


                         Table 5.5: Calling convention codes for types

                                _____________________________

                                 DW.CC.normal

                                 DW.CC.pass.by.value

                                 DW.CC.pass.by.reference
                                _____________________________


 9      If this attribute is not present, or its value is DW.CC.normal, the con*
 *vention to

10      be used for an object of the given type is assumed to be unspecioed.

11      Note that DW.CC.normal is also used as a calling convention code for ce*
 *rtain

12      subprograms (see Table 3.4 on page 79).

13      If unspecioed, a consumer may be able to deduce the calling convention *
 *based on

14      knowledge of the type and the ABI.



15      5.7.2   Interface Type Entries


16      The Java language deones iinterfacej types. An interface in Java is sim*
 *ilar to a C++ or

17      Java class with only abstract methods and constant data members.

18      Interface types are represented by debugging information entries with t*
 *he tag

19      DW.TAG.interface.type.

20      An interface type entry has a DW.AT.name attribute, whose value is a

21      null-terminated string containing the type name.

22      The members of an interface are represented by debugging information en*
 *tries

23      that are owned by the interface type entry and that appear in the same *
 *order as

24      the corresponding declarations in the source program.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 120
                                   Chapter 5. Type Entries



 1      5.7.3   Derived or Extended Structures, Classes and Interfaces


 2      In C++, a class (or struct) may be iderived fromj or be a isubclass ofj*
 * another class. In

 3      Java, an interface may iextendj one or more other interfaces, and a cla*
 *ss may iextendj

 4      another class and/or iimplementj one or more interfaces. All of these r*
 *elationships may

 5      be described using the following. Note that in Java, the distinction be*
 *tween extends and

 6      implements is implied by the entities at the two ends of the relationsh*
 *ip.


 7      A class type or interface type entry that describes a derived, extended*
 * or

 8      implementing class or interface owns debugging information entries desc*
 *ribing

 9      each of the classes or interfaces it is derived from, extending or impl*
 *ementing,

10      respectively, ordered as they were in the source program. Each such ent*
 *ry has the

11      tag DW.TAG.inheritance.


12      An inheritance entry has a DW.AT.type attribute whose value is a refere*
 *nce to

13      the debugging information entry describing the class or interface from *
 *which the

14      parent class or structure of the inheritance entry is derived, extended*
 * or

15      implementing.


16      An inheritance entry for a class that derives from or extends another c*
 *lass or

17      struct also has a DW.AT.data.member.location attribute, whose value des*
 *cribes

18      the location of the beginning of the inherited type relative to the beg*
 *inning

19      address of the instance of the derived class. If that value is a consta*
 *nt, it is the

20      ooeset in bytes from the beginning of the class to the beginning of the*
 * instance of

21      the inherited type. Otherwise, the value must be a location description*
 *. In this

22      latter case, the beginning address of the instance of the derived class*
 * is pushed

23      on the expression stack before the location description is evaluated an*
 *d the result

24      of the evaluation is the location of the instance of the inherited type.


25      The interpretation of the value of this attribute for inherited types i*
 *s the same as the

26      interpretation for data members (see Section 5.7.6 following).


27      An inheritance entry may have a DW.AT.accessibility attribute. If no

28      accessibility attribute is present, private access is assumed for an en*
 *try of a class

29      and public access is assumed for an entry of a struct, union or interfa*
 *ce.


30      If the class referenced by the inheritance entry serves as a C++ virtua*
 *l base class,

31      the inheritance entry has a DW.AT.virtuality attribute.


32      For a C++ virtual base, the data member location attribute will usually*
 * consist of a

33      non-trivial location description.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 121
                                   Chapter 5. Type Entries



 1      5.7.4   Access Declarations


 2      In C++, a derived class may contain access declarations that change the*
 * accessibility of

 3      individual class members from the overall accessibility specioed by the*
 * inheritance

 4      declaration. A single access declaration may refer to a set of overload*
 *ed names.


 5      If a derived class or structure contains access declarations, each such*
 * declaration

 6      may be represented by a debugging information entry with the tag

 7      DW.TAG.access.declaration. Each such entry is a child of the class or s*
 *tructure

 8      type entry.


 9      An access declaration entry has a DW.AT.name attribute, whose value is a

10      null-terminated string representing the name used in the declaration, i*
 *ncluding

11      any class or structure qualioers.


12      An access declaration entry also has a DW.AT.accessibility attribute de*
 *scribing

13      the declared accessibility of the named entities.



14      5.7.5   Friends


15      Each friend declared by a structure, union or class type may be represe*
 *nted by a

16      debugging information entry that is a child of the structure, union or *
 *class type

17      entry; the friend entry has the tag DW.TAG.friend.


18      A friend entry has a DW.AT.friend attribute, whose value is a reference*
 * to the

19      debugging information entry describing the declaration of the friend.



20      5.7.6   Data Member Entries


21      A data member (as opposed to a member function) is represented by a

22      debugging information entry with the tag DW.TAG.member. The member

23      entry for a named member has a DW.AT.name attribute whose value is a

24      null-terminated string containing the member name. If the member entry

25      describes an anonymous union, the name attribute is omitted or the valu*
 *e of the

26      attribute consists of a single zero byte.


27      The data member entry has a DW.AT.type attribute to denote the type of *
 *that

28      member.


29      A data member entry may have a DW.AT.accessibility attribute. If no

30      accessibility attribute is present, private access is assumed for an me*
 *mber of a

31      class and public access is assumed for an member of a structure, union,*
 * or

32      interface.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 122
                                   Chapter 5. Type Entries



 1      A data member entry may have a DW.AT.mutable attribute, which is a AEag.

 2      This attribute indicates whether the data member was declared with the *
 *mutable

 3      storage class specioer.


 4      The beginning of a data member is described relative to the beginning o*
 *f the

 5      object in which it is immediately contained. In general, the beginning *
 *is

 6      characterized by both an address and a bit ooeset within the byte at th*
 *at address.

 7      When the storage for an entity includes all of the bits in the beginnin*
 *g byte, the

 8      beginning bit ooeset is deoned to be zero.


 9      The member entry corresponding to a data member that is deoned in a str*
 *ucture,

10      union or class may have either a DW.AT.data.member.location attribute o*
 *r a

11      DW.AT.data.bit.ooeset attribute. If the beginning of the data member is*
 * the

12      same as the beginning of the containing entity then neither attribute i*
 *s required.


13      For a DW.AT.data.member.location attribute there are two cases:


14      1.  If the value is an integer constant, it is the ooeset in bytes from*
 * the beginning

15          of the containing entity. If the beginning of the containing entity*
 * has a

16          non-zero bit ooeset then the beginning of the member entry has that*
 * same bit

17          ooeset as well.


18      2.  Otherwise, the value must be a location description. In this case, *
 *the

19          beginning of the containing entity must be byte aligned. The beginn*
 *ing

20          address is pushed on the DWARF stack before the location descriptio*
 *n is

21          evaluated; the result of the evaluation is the base address of the *
 *member

22          entry.


23          The push on the DWARF expression stack of the base address of the c*
 *ontaining

24          construct is equivalent to execution of the DW.OP.push.object.addre*
 *ss operation

25          (see Section 2.5.1.3 on page 29); DW.OP.push.object.address therefo*
 *re is not

26          needed at the beginning of a location description for a data member*
 *. The result of the

27          evaluation is a location~either an address or the name of a registe*
 *r, not an ooeset to

28          the member.


29          A DW.AT.data.member.location attribute that has the form of a locat*
 *ion

30          description is not valid for a data member contained in an entity t*
 *hat is not byte

31          aligned because DWARF operations do not allow for manipulating or c*
 *omputing bit

32          ooesets.


33      For a DW.AT.data.bit.ooeset attribute, the value is an integer constant*
 * (see

34      Section 2.19 on page 57) that specioes the number of bits from the begi*
 *nning of

35      the containing entity to the beginning of the data member. This value m*
 *ust be

36      greater than or equal to zero, but is not limited to less than the numb*
 *er of bits per

37      byte.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 123
                                   Chapter 5. Type Entries



 1      If the size of a data member is not the same as the size of the type gi*
 *ven for the

 2      data member, the data member has either a DW.AT.byte.size or a

 3      DW.AT.bit.size attribute whose integer constant value (see Section 2.19*
 * on

 4      page 57) is the amount of storage needed to hold the value of the data *
 *member.


 5      For showing nested and packed records and arrays, see Appendix D.2.7 on*
 * page 323 and

 6      D.2.8 on page 325.



 7      5.7.7   Class Variable Entries


 8      A class variable (istatic data memberj in C++) is a variable shared by *
 *all

 9      instances of a class. It is represented by a debugging information entr*
 *y with the

10      tag DW.TAG.variable.


11      The class variable entry may contain the same attributes and follows th*
 *e same

12      rules as non-member global variable entries (see Section 4.1 on page 10*
 *1).


13      A class variable entry may have a DW.AT.accessibility attribute. If no

14      accessibility attribute is present, private access is assumed for an en*
 *try of a class

15      and public access is assumed for an entry of a structure, union or inte*
 *rface.



16      5.7.8   Member Function Entries


17      A member function is represented by a debugging information entry with *
 *the tag

18      DW.TAG.subprogram. The member function entry may contain the same

19      attributes and follows the same rules as non-member global subroutine e*
 *ntries

20      (see Section 3.3 on page 78).


21      In particular, if the member function entry is an instantiation of a me*
 *mber function

22      template, it follows the same rules as function template instantiations*
 * (see Section 3.3.7

23      on page 85).


24      A member function entry may have a DW.AT.accessibility attribute. If no

25      accessibility attribute is present, private access is assumed for an en*
 *try of a class

26      and public access is assumed for an entry of a structure, union or inte*
 *rface.


27      If the member function entry describes a virtual function, then that en*
 *try has a

28      DW.AT.virtuality attribute.


29      If the member function entry describes an explicit member function, the*
 *n that

30      entry has a DW.AT.explicit attribute.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 124
                                   Chapter 5. Type Entries



 1      An entry for a virtual function also has a DW.AT.vtable.elem.location a*
 *ttribute

 2      whose value contains a location description yielding the address of the*
 * slot for

 3      the function within the virtual function table for the enclosing class.*
 * The address

 4      of an object of the enclosing type is pushed onto the expression stack *
 *before the

 5      location description is evaluated.


 6      If the member function entry describes a non-static member function, th*
 *en that

 7      entry has a DW.AT.object.pointer attribute whose value is a reference t*
 *o the

 8      formal parameter entry that corresponds to the object for which the fun*
 *ction is

 9      called. The name attribute of that formal parameter is deoned by the cu*
 *rrent

10      language (for example, this for C++ or self for Objective C and some ot*
 *her

11      languages). That parameter also has a DW.AT.artiocial attribute whose v*
 *alue is

12      true.


13      Conversely, if the member function entry describes a static member func*
 *tion, the

14      entry does not have a DW.AT.object.pointer attribute.


15      In C++, non-static member functions can have const-volatile qualioers, *
 *which aoeect the

16      type of the orst formal parameter (the ithisj-pointer).


17      If the member function entry describes a non-static member function tha*
 *t has a

18      const-volatile qualiocation, then the entry describes a non-static memb*
 *er

19      function whose object formal parameter has a type that has an equivalent

20      const-volatile qualiocation.


21      Beginning in C++11, non-static member functions can also have one of th*
 *e ref-qualioers,

22      & and &&. These do not change the type of the ithisj-pointer, but they *
 *do aoeect the

23      types of object values on which the function can be invoked.


24      The member function entry may have an DW.AT.reference attribute to indi*
 *cate

25      a non-static member function that can only be called on lvalue objects,*
 * or the

26      DW.AT.rvalue.reference attribute to indicate that it can only be called*
 * on

27      prvalues and xvalues.


28      The lvalue, prvalue and xvalue concepts are deoned in the C++11 and lat*
 *er standards.


29      If a subroutine entry represents the deoning declaration of a member fu*
 *nction

30      and that deonition appears outside of the body of the enclosing class d*
 *eclaration,

31      the subroutine entry has a DW.AT.speciocation attribute, whose value is*
 * a

32      reference to the debugging information entry representing the declarati*
 *on of this

33      function member. The referenced entry will be a child of some class (or*
 * structure)

34      type entry.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 125
                                   Chapter 5. Type Entries



 1      Subroutine entries containing the DW.AT.speciocation attribute do not n*
 *eed to

 2      duplicate information provided by the declaration entry referenced by t*
 *he

 3      speciocation attribute. In particular, such entries do not need to cont*
 *ain a name

 4      attribute giving the name of the function member whose deonition they

 5      represent. Similarly, such entries do not need to contain a return type*
 * attribute,

 6      unless the return type on the declaration was unspecioed (for example, *
 *the

 7      declaration used the C++ auto return type specioer).


 8      In C++, a member function may be declared as deleted. This prevents the*
 * compiler from

 9      generating a default implementation of a special member function such a*
 *s a constructor

10      or destructor, and can aoeect overload resolution when used on other me*
 *mber functions.


11      If the member function entry has been declared as deleted, then that en*
 *try has a

12      DW.AT.deleted attribute.


13      In C++, a special member function may be declared as defaulted, which e*
 *xplicitly declares

14      a default compiler-generated implementation of the function. The declar*
 *ation may have

15      dioeerent eoeects on the calling convention used for objects of its cla*
 *ss, depending on

16      whether the default declaration is made inside or outside the class.


17      If the member function has been declared as defaulted, then the entry h*
 *as a

18      DW.AT.defaulted attribute whose integer constant value indicates whethe*
 *r, and

19      if so, how, that member is defaulted. The possible values and their mea*
 *nings are

20      shown in Table 5.6 following.



                             Table 5.6: Defaulted attribute names
               _______________________________________________________________
               _Defaulted_attribute_name_______||Meaning______________________

                DW.DEFAULTED.no          ||     Not declared default

                DW.DEFAULTED.in.class      ||   Defaulted within the class

               _DW.DEFAULTED.out.of.class_||____Defaulted_outside_of_the_class__



21      An artiocial member function (that is, a compiler-generated copy that d*
 *oes not appear in

22      the source) does not have a DW.AT.defaulted attribute.



23      5.7.9   Class Template Instantiations


24      In C++ a class template is a generic deonition of a class type that may*
 * be instantiated

25      when an instance of the class is declared or deoned. The generic descri*
 *ption of the class

26      may include parameterized types, parameterized compile-time constant va*
 *lues, and/or

27      parameterized run-time constant addresses. DWARF does not represent the*
 * generic

28      template deonition, but does represent each instantiation.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 126
                                   Chapter 5. Type Entries



 1      A class template instantiation is represented by a debugging informatio*
 *n entry

 2      with the tag DW.TAG.class.type, DW.TAG.structure.type or

 3      DW.TAG.union.type. With the following exceptions, such an entry will co*
 *ntain

 4      the same attributes and have the same types of child entries as would a*
 *n entry

 5      for a class type deoned explicitly using the instantiation types and va*
 *lues. The

 6      exceptions are:


 7      1.  Template parameters are described and referenced as specioed in Sec*
 *tion 2.23

 8          on page 59.


 9      2.  If the compiler has generated a special compilation unit to hold th*
 *e template

10          instantiation and that special compilation unit has a dioeerent nam*
 *e from the

11          compilation unit containing the template deonition, the name attrib*
 *ute for

12          the debugging information entry representing the special compilatio*
 *n unit is

13          empty or omitted.


14      3.  If the class type entry representing the template instantiation or *
 *any of its

15          child entries contains declaration coordinate attributes, those att*
 *ributes refer

16          to the source for the template deonition, not to any source generat*
 *ed

17          artiocially by the compiler.



18      5.7.10   Variant Entries


19      A variant part of a structure is represented by a debugging information*
 * entry

20      with the tag DW.TAG.variant.part and is owned by the corresponding

21      structure type entry.


22      If the variant part has a discriminant, the discriminant is represented*
 * by a

23      separate debugging information entry. This entry has the form of a stru*
 *cture data

24      member entry. The variant part entry will have a DW.AT.discr attribute *
 *whose

25      value is a reference to the member entry for the discriminant.


26      If the variant part does not have a discriminant (tag oeld), the varian*
 *t part entry

27      may have a DW.AT.type attribute to represent the tag type.


28      A reference to a type supports the Pascal notion of a tagless variant p*
 *art where the

29      omitted tag nonetheless is given a type whose values are used in later *
 *parts of the variant

30      syntax.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 127
                                   Chapter 5. Type Entries



 1      Each variant of a particular variant part is represented by a debugging

 2      information entry with the tag DW.TAG.variant and is a child of the var*
 *iant

 3      part entry. The value that selects a given variant may be represented i*
 *n one of

 4      three ways. The variant entry may have a DW.AT.discr.value attribute wh*
 *ose

 5      value represents the discriminant value selecting this variant. The val*
 *ue of this

 6      attribute is encoded as an LEB128 number. The number is signed if the t*
 *ag type

 7      for the variant part containing this variant is a signed type. The numb*
 *er is

 8      unsigned if the tag type is an unsigned type.


 9      Alternatively, the variant entry may contain a DW.AT.discr.list attribu*
 *te, whose

10      value represents a list of discriminant values. This list is represente*
 *d by any of

11      the block forms and may contain a mixture of discriminant values and

12      discriminant ranges. Each item on the list is preoxed with a discrimina*
 *nt value

13      descriptor that determines whether the list item represents a single la*
 *bel or a

14      label range. A single case label is represented as an LEB128 number as *
 *deoned

15      above for the DW.AT.discr.value attribute. A label range is represented*
 * by two

16      LEB128 numbers, the low value of the range followed by the high value. *
 *Both

17      values follow the rules for signedness just described. The discriminant*
 * value

18      descriptor is an integer constant that may have one of the values given*
 * in Table

19      5.7.


                           Table 5.7: Discriminant descriptor values

                                     __________________

                                      DW.DSC.label

                                      DW.DSC.range
                                     __________________



20      If a variant entry has neither a DW.AT.discr.value attribute nor a

21      DW.AT.discr.list attribute, or if it has a DW.AT.discr.list attribute w*
 *ith 0 size,

22      the variant is a default variant.


23      The components selected by a particular variant are represented by debu*
 *gging

24      information entries owned by the corresponding variant entry and appear*
 * in the

25      same order as the corresponding declarations in the source program.


26      For examples using variant entries in several languages, see Section D.*
 *2.10 on page 328.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 128
                                   Chapter 5. Type Entries



 1      5.8    Condition Entries


 2      COBOL has the notion of a ilevel-88 conditionj that associates a data i*
 *tem, called the

 3      conditional variable, with a set of one or more constant values and/or *
 *value ranges.

 4      Semantically, the condition is `true' if the conditional variable's val*
 *ue matches any of the

 5      described constants, and the condition is `false' otherwise.


 6      The DW.TAG.condition debugging information entry describes a logical

 7      condition that tests whether a given data item's value matches one of a*
 * set of

 8      constant values. If a name has been given to the condition, the conditi*
 *on entry

 9      has a DW.AT.name attribute whose value is a null-terminated string givi*
 *ng the

10      condition name.


11      The condition entry's parent entry describes the conditional variable; *
 *normally

12      this will be a DW.TAG.variable, DW.TAG.member or

13      DW.TAG.formal.parameter entry. If the parent entry has an array type, t*
 *he

14      condition can test any individual element, but not the array as a whole*
 *. The

15      condition entry implicitly specioes a icomparison typej that is the typ*
 *e of an

16      array element if the parent has an array type; otherwise it is the type*
 * of the

17      parent entry.


18      The condition entry owns DW.TAG.constant and/or DW.TAG.subrange.type

19      entries that describe the constant values associated with the condition*
 *. If any

20      child entry has a DW.AT.type attribute, that attribute describes a type

21      compatible with the comparison type (according to the source language);

22      otherwise the child's type is the same as the comparison type.


23      For conditional variables with alphanumeric types, COBOL permits a sour*
 *ce program to

24      provide ranges of alphanumeric constants in the condition. Normally a s*
 *ubrange type

25      entry does not describe ranges of strings; however, this can be represe*
 *nted using bounds

26      attributes that are references to constant entries describing strings. *
 *A subrange type

27      entry may refer to constant entries that are siblings of the subrange t*
 *ype entry.



28      5.9    Enumeration Type Entries


29      An ienumeration typej is a scalar that can assume one of a oxed number *
 *of symbolic

30      values.


31      An enumeration type is represented by a debugging information entry wit*
 *h the

32      tag DW.TAG.enumeration.type.


33      If a name has been given to the enumeration type in the source program,*
 * then the

34      corresponding enumeration type entry has a DW.AT.name attribute whose

35      value is a null-terminated string containing the enumeration type name.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 129
                                   Chapter 5. Type Entries



 1      The enumeration type entry may have a DW.AT.type attribute which refers*
 * to

 2      the underlying data type used to implement the enumeration. The entry a*
 *lso

 3      may have a DW.AT.byte.size attribute or DW.AT.bit.size attribute, whose

 4      value (see Section 2.21 on page 58) is the amount of storage required t*
 *o hold an

 5      instance of the enumeration. If no DW.AT.byte.size or DW.AT.bit.size

 6      attribute is present, the size for holding an instance of the enumerati*
 *on is given

 7      by the size of the underlying data type.


 8      If an enumeration type has type safe semantics such that


 9      1.  Enumerators are contained in the scope of the enumeration type, and*
 */or


10      2.  Enumerators are not implicitly converted to another type


11      then the enumeration type entry may have a DW.AT.enum.class attribute,

12      which is a AEag. In a language that ooeers only one kind of enumeration

13      declaration, this attribute is not required.


14      In C or C++, the underlying type will be the appropriate integral type *
 *determined by the

15      compiler from the properties of the enumeration literal values. A C++ t*
 *ype declaration

16      written using enum class declares a strongly typed enumeration and is r*
 *epresented using

17      DW.TAG.enumeration.type in combination with DW.AT.enum.class.


18      Each enumeration literal is represented by a debugging information entr*
 *y with

19      the tag DW.TAG.enumerator. Each such entry is a child of the enumeration

20      type entry, and the enumerator entries appear in the same order as the

21      declarations of the enumeration literals in the source program.


22      Each enumerator entry has a DW.AT.name attribute, whose value is a

23      null-terminated string containing the name of the enumeration literal. *
 *Each

24      enumerator entry also has a DW.AT.const.value attribute, whose value is*
 * the

25      actual numeric value of the enumerator as represented on the target sys*
 *tem.


26      If the enumeration type occurs as the description of a dimension of an *
 *array type,

27      and the stride for that dimension is dioeerent than what would otherwis*
 *e be

28      determined, then the enumeration type entry has either a DW.AT.byte.str*
 *ide or

29      DW.AT.bit.stride attribute which specioes the separation between succes*
 *sive

30      elements along the dimension as described in Section 2.19 on page 57. T*
 *he value

31      of the DW.AT.bit.stride attribute is interpreted as bits and the value *
 *of the

32      DW.AT.byte.stride attribute is interpreted as bytes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 130
                                   Chapter 5. Type Entries



 1      5.10     Subroutine Type Entries


 2      It is possible in C to declare pointers to subroutines that return a va*
 *lue of a specioc type.

 3      In both C and C++, it is possible to declare pointers to subroutines th*
 *at not only return a

 4      value of a specioc type, but accept only arguments of specioc types. Th*
 *e type of such

 5      pointers would be described with a ipointer toj modioer applied to a us*
 *er-deoned type.


 6      A subroutine type is represented by a debugging information entry with *
 *the tag

 7      DW.TAG.subroutine.type. If a name has been given to the subroutine type*
 * in

 8      the source program, then the corresponding subroutine type entry has a

 9      DW.AT.name attribute whose value is a null-terminated string containing*
 * the

10      subroutine type name.


11      If the subroutine type describes a function that returns a value, then *
 *the

12      subroutine type entry has a DW.AT.type attribute to denote the type ret*
 *urned

13      by the subroutine. If the types of the arguments are necessary to descr*
 *ibe the

14      subroutine type, then the corresponding subroutine type entry owns debu*
 *gging

15      information entries that describe the arguments. These debugging inform*
 *ation

16      entries appear in the order that the corresponding argument types appea*
 *r in the

17      source program.


18      In C there is a dioeerence between the types of functions declared usin*
 *g function prototype

19      style declarations and those declared using non-prototype declarations.


20      A  subroutine entry declared with a function prototype style declaratio*
 *n may

21      have a DW.AT.prototyped attribute, which is a AEag.


22      Each debugging information entry owned by a subroutine type entry

23      corresponds to either a formal parameter or the sequence of unspecioed

24      parameters of the subprogram type:


25      1.  A formal parameter of a parameter list (that has a specioc type) is*
 * represented

26          by a debugging information entry with the tag DW.TAG.formal.paramet*
 *er.

27          Each formal parameter entry has a DW.AT.type attribute that refers *
 *to the

28          type of the formal parameter.


29      2.  The unspecioed parameters of a variable parameter list are represen*
 *ted by a

30          debugging information entry with the tag DW.TAG.unspecioed.paramete*
 *rs.


31      C++ const-volatile qualioers are encoded as part of the type of the ith*
 *isj-pointer.

32      C++11 reference and rvalue-reference qualioers are encoded using the DW*
 *.AT.reference

33      and DW.AT.rvalue.reference attributes, respectively. See also Section 5*
 *.7.8 on

34      page 124.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 131
                                   Chapter 5. Type Entries



 1      A subroutine type entry may have the DW.AT.reference or

 2      DW.AT.rvalue.reference attribute to indicate that it describes the type*
 * of a

 3      member function with reference or rvalue-reference semantics, respectiv*
 *ely.



 4      5.11     String Type Entries


 5      A istringj is a sequence of characters that have specioc semantics and *
 *operations that

 6      distinguish them from arrays of characters. Fortran is one of the langu*
 *ages that has a

 7      string type. Note that istringj in this context refers to a target mach*
 *ine concept, not the

 8      class string as used in this document (except for the name attribute).

 9      A string type is represented by a debugging information entry with the *
 *tag

10      DW.TAG.string.type. If a name has been given to the string type in the *
 *source

11      program, then the corresponding string type entry has a DW.AT.name attr*
 *ibute

12      whose value is a null-terminated string containing the string type name.

13      A string type entry may have a DW.AT.type attribute describing how each

14      character is encoded and is to be interpreted. The value of this attrib*
 *ute is a

15      reference to a DW.TAG.base.type base type entry. If the attribute is ab*
 *sent, then

16      the character is encoded using the system default.

17      The Fortran 2003 language standard allows string types that are compose*
 *d of dioeerent

18      types of (same sized) characters. While there is no standard list of ch*
 *aracter kinds, the

19      kinds ASCII (see DW.ATE.ASCII), ISO_10646 (see DW.ATE.UCS) and DEFAULT *
 *are

20      deoned.

21      The string type entry may have a DW.AT.byte.size attribute or

22      DW.AT.bit.size attribute, whose value (see Section 2.21 on page 58) is *
 *the

23      amount of storage needed to hold a value of the string type.

24      The string type entry may also have a DW.AT.string.length attribute who*
 *se

25      value is either (a) a reference (see Section 2.19) to another debugging*
 * information

26      entry that provides the value of the length of the string, or (b) a loc*
 *ation

27      description yielding the location where the length of the string is sto*
 *red in the

28      program. If the DW.AT.string.length attribute is not present, the size *
 *of the

29      string is assumed to be the amount of storage that is allocated for the*
 * string (as

30      specioed by the DW.AT.byte.size or DW.AT.bit.size attribute).

31      The string type entry may also have a DW.AT.string.length.byte.size or

32      DW.AT.string.length.bit.size attribute, whose value (see Section 2.21 on

33      page 58) is the size of the data to be retrieved from the location refe*
 *renced by the

34      DW.AT.string.length attribute. If no byte or bit size attribute is pres*
 *ent, the size

35      of the data to be retrieved is the same as the size of an address on th*
 *e target

36      machine.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 132
                                   Chapter 5. Type Entries



 1      Prior to DWARF Version 5, the meaning of a DW.AT.byte.size attribute de*
 *pended on

 2      the presence of the DW.AT.string.length attribute:


 3         # If DW.AT.string.length was present, DW.AT.byte.size specioed the s*
 *ize of the

 4           length data to be retrieved from the location specioed by the

 5           DW.AT.string.length attribute.


 6         # If DW.AT.string.length was not present, DW.AT.byte.size specioed t*
 *he

 7           amount of storage allocated for objects of the string type.


 8      In DWARF Version 5, DW.AT.byte.size always specioes the amount of stora*
 *ge

 9      allocated for objects of the string type.



10      5.12     Set Type Entries


11      Pascal provides the concept of a iset,j which represents a group of val*
 *ues of ordinal type.


12      A set is represented by a debugging information entry with the tag

13      DW.TAG.set.type. If a name has been given to the set type, then the set*
 * type

14      entry has a DW.AT.name attribute whose value is a null-terminated string

15      containing the set type name.


16      The set type entry has a DW.AT.type attribute to denote the type of an *
 *element

17      of the set.


18      If the amount of storage allocated to hold each element of an object of*
 * the given

19      set type is dioeerent from the amount of storage that is normally alloc*
 *ated to hold

20      an individual object of the indicated element type, then the set type e*
 *ntry has

21      either a DW.AT.byte.size attribute, or DW.AT.bit.size attribute whose v*
 *alue

22      (see Section 2.21 on page 58) is the amount of storage needed to hold a*
 * value of

23      the set type.



24      5.13     Subrange Type Entries


25      Several languages support the concept of a isubrangej type. Objects of *
 *the subrange type

26      can represent only a contiguous subset (range) of values from the type *
 *on which the

27      subrange is deoned. Subrange types may also be used to represent the bo*
 *unds of array

28      dimensions.


29      A subrange type is represented by a debugging information entry with th*
 *e tag

30      DW.TAG.subrange.type. If a name has been given to the subrange type, th*
 *en

31      the subrange type entry has a DW.AT.name attribute whose value is a

32      null-terminated string containing the subrange type name.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 133
                                   Chapter 5. Type Entries



 1      The tag DW.TAG.generic.subrange is used to describe arrays with a dynam*
 *ic

 2      rank. See Section 5.5 on page 115.


 3      The subrange entry may have a DW.AT.type attribute to describe the type*
 * of

 4      object, called the basis type, of whose values this subrange is a subse*
 *t.


 5      If the amount of storage allocated to hold each element of an object of*
 * the given

 6      subrange type is dioeerent from the amount of storage that is normally *
 *allocated

 7      to hold an individual object of the indicated element type, then the su*
 *brange

 8      type entry has a DW.AT.byte.size attribute or DW.AT.bit.size attribute,*
 * whose

 9      value (see Section 2.19 on page 57) is the amount of storage needed to *
 *hold a

10      value of the subrange type.


11      The subrange entry may have a DW.AT.threads.scaled attribute, which is a

12      AEag. If present, this attribute indicates whether this subrange repres*
 *ents a UPC

13      array bound which is scaled by the runtime THREADS value (the number of*
 * UPC

14      threads in this execution of the program).


15      This allows the representation of a UPC shared array such as
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||intsharedfoo[34*THREADS][10][20];_|___|


16      The subrange entry may have the attributes DW.AT.lower.bound and

17      DW.AT.upper.bound to specify, respectively, the lower and upper bound

18      values of the subrange. The DW.AT.upper.bound attribute may be replaced*
 * by

19      a DW.AT.count attribute, whose value describes the number of elements i*
 *n the

20      subrange rather than the value of the last element. The value of each o*
 *f these

21      attributes is determined as described in Section 2.19 on page 57.


22      If the lower bound value is missing, the value is assumed to be a

23      language-dependent default constant as deoned in Table 7.17 on page 240.


24      If the upper bound and count are missing, then the upper bound value is

25      unknown.


26      If the subrange entry has no type attribute describing the basis type, *
 *the basis

27      type is determined as follows:


28      1.  If there is a lower bound attribute that references an object, the *
 *basis type is

29          assumed to be the same as the type of that object.


30      2.  Otherwise, if there is an upper bound or count attribute that refer*
 *ences an

31          object, the basis type is assumed to be the same as the type of tha*
 *t object.


32      3.  Otherwise, the type is assumed to be the same type, in the source l*
 *anguage of

33          the compilation unit containing the subrange entry, as a signed int*
 *eger with

34          the same size as an address on the target machine.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 134
                                   Chapter 5. Type Entries



 1      If the subrange type occurs as the description of a dimension of an arr*
 *ay type,

 2      and the stride for that dimension is dioeerent than what would otherwis*
 *e be

 3      determined, then the subrange type entry has either a DW.AT.byte.stride*
 * or

 4      DW.AT.bit.stride attribute which specioes the separation between succes*
 *sive

 5      elements along the dimension as described in Section 2.21 on page 58.


 6      Note that the stride can be negative.



 7      5.14     Pointer to Member Type Entries


 8      In C++, a pointer to a data or function member of a class or structure *
 *is a unique type.


 9      A debugging information entry representing the type of an object that i*
 *s a pointer

10      to a structure or class member has the tag DW.TAG.ptr.to.member.type.


11      If the pointer to member type has a name, the pointer to member entry h*
 *as a

12      DW.AT.name attribute, whose value is a null-terminated string containin*
 *g the

13      type name.


14      The pointer to member entry has a DW.AT.type attribute to describe the *
 *type of

15      the class or structure member to which objects of this type may point.


16      The entry also has a DW.AT.containing.type attribute, whose value is a

17      reference to a debugging information entry for the class or structure t*
 *o whose

18      members objects of this type may point.


19      The pointer to member entry has a DW.AT.use.location attribute whose va*
 *lue

20      is a location description that computes the address of the member of th*
 *e class to

21      which the pointer to member entry points.


22      The method used to ond the address of a given member of a class or stru*
 *cture is common

23      to any instance of that class or structure and to any instance of the p*
 *ointer or member

24      type. The method is thus associated with the type entry, rather than wi*
 *th each instance of

25      the type.


26      The DW.AT.use.location description is used in conjunction with the loca*
 *tion

27      descriptions for a particular object of the given pointer to member typ*
 *e and for a

28      particular structure or class instance. The DW.AT.use.location attribut*
 *e expects

29      two values to be pushed onto the DWARF expression stack before the

30      DW.AT.use.location description is evaluated. The orst value pushed is t*
 *he

31      value of the pointer to member object itself. The second value pushed i*
 *s the base

32      address of the entire structure or union instance containing the member*
 * whose

33      address is being calculated.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 135
                                   Chapter 5. Type Entries



 1      For an expression such as
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||object.*mbr_ptr_|___|



 2      where mbr_ptr has some pointer to member type, a debugger should:


 3      1.  Push the value of mbr_ptr onto the DWARF expression stack.


 4      2.  Push the base address of object onto the DWARF expression stack.


 5      3.  Evaluate the DW.AT.use.location description given in the type of mb*
 *r_ptr.



 6      5.15     File Type Entries


 7      Some languages, such as Pascal, provide a data type to represent oles.


 8      A ole type is represented by a debugging information entry with the tag

 9      DW.TAG.ole.type. If the ole type has a name, the ole type entry has a

10      DW.AT.name attribute, whose value is a null-terminated string containin*
 *g the

11      type name.


12      The ole type entry has a DW.AT.type attribute describing the type of th*
 *e objects

13      contained in the ole.


14      The ole type entry also has a DW.AT.byte.size or DW.AT.bit.size attribu*
 *te,

15      whose value (see Section 2.19 on page 57) is the amount of storage need*
 * to hold a

16      value of the ole type.



17      5.16     Dynamic Type Entries


18      Some languages such as Fortran 90, provide types whose values may be dy*
 *namically

19      allocated or associated with a variable under explicit program control.*
 * However, unlike

20      the pointer type in C or C++, the indirection involved in accessing the*
 * value of the

21      variable is generally implicit, that is, not indicated as part of the p*
 *rogram source.


22      A dynamic type entry is used to declare a dynamic type that is ijust li*
 *kej another

23      non-dynamic type without needing to replicate the full description of t*
 *hat other

24      type.


25      A dynamic type is represented by a debugging information entry with the*
 * tag

26      DW.TAG.dynamic.type. If a name has been given to the dynamic type, then*
 * the

27      dynamic type has a DW.AT.name attribute whose value is a null-terminated

28      string containing the dynamic type name.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 136
                                   Chapter 5. Type Entries



 1      A dynamic type entry has a DW.AT.type attribute whose value is a refere*
 *nce to

 2      the type of the entities that are dynamically allocated.


 3      A dynamic type entry also has a DW.AT.data.location, and may also have

 4      DW.AT.allocated and/or DW.AT.associated attributes as described in Sect*
 *ion

 5      5.18. A DW.AT.data.location, DW.AT.allocated or DW.AT.associated

 6      attribute may not occur on a dynamic type entry if the same kind of att*
 *ribute

 7      already occurs on the type referenced by the DW.AT.type attribute.



 8      5.17     Template Alias Entries


 9      In C++, a template alias is a form of typedef that has template paramet*
 *ers. DWARF does

10      not represent the template alias deonition but does represent instantia*
 *tions of the alias.


11      A type named using a template alias is represented by a debugging infor*
 *mation

12      entry with the tag DW.TAG.template.alias. The template alias entry has a

13      DW.AT.name attribute whose value is a null-terminated string containing*
 * the

14      name of the template alias. The template alias entry has child entries *
 *describing

15      the template actual parameters (see Section 2.23 on page 59).



16      5.18     Dynamic Properties of Types


17      The DW.AT.data.location, DW.AT.allocated and DW.AT.associated attributes

18      described in this section are motivated for use with DW.TAG.dynamic.typ*
 *e entries but

19      can be used for any other type as well.



20      5.18.1   Data Location


21      Some languages may represent objects using descriptors to hold informat*
 *ion, including a

22      location and/or run-time parameters, about the data that represents the*
 * value for that

23      object.


24      The DW.AT.data.location attribute may be used with any type that provid*
 *es

25      one or more levels of hidden indirection and/or run-time parameters in *
 *its

26      representation. Its value is a location description. The result of eval*
 *uating this

27      description yields the location of the data for an object. When this at*
 *tribute is

28      omitted, the address of the data is the same as the address of the obje*
 *ct.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 137
                                   Chapter 5. Type Entries



 1      This location description will typically begin with DW.OP.push.object.a*
 *ddress which

 2      loads the address of the object which can then serve as a descriptor in*
 * subsequent

 3      calculation. For an example using DW.AT.data.location for a Fortran 90 *
 *array, see

 4      Appendix D.2.1 on page 306.



 5      5.18.2   Allocation and Association Status


 6      Some languages, such as Fortran 90, provide types whose values may be d*
 *ynamically

 7      allocated or associated with a variable under explicit program control.


 8      The DW.AT.allocated attribute may be used with any type for which objec*
 *ts of

 9      the type can be explicitly allocated and deallocated. The presence of t*
 *he attribute

10      indicates that objects of the type are allocatable and deallocatable. T*
 *he integer

11      value of the attribute (see below) specioes whether an object of the ty*
 *pe is

12      currently allocated or not.


13      The DW.AT.associated attribute may optionally be used with any type for

14      which objects of the type can be dynamically associated with other obje*
 *cts. The

15      presence of the attribute indicates that objects of the type can be ass*
 *ociated. The

16      integer value of the attribute (see below) indicates whether an object *
 *of the type

17      is currently associated or not.


18      The value of these attributes is determined as described in Section 2.1*
 *9 on

19      page 57. A non-zero value is interpreted as allocated or associated, an*
 *d zero is

20      interpreted as not allocated or not associated.


21      For Fortran 90, if the DW.AT.associated attribute is present, the type *
 *has the

22      POINTER property where either the parent variable is never associated w*
 *ith a dynamic

23      object or the implementation does not track whether the associated obje*
 *ct is static or

24      dynamic. If the DW.AT.allocated attribute is present and the DW.AT.asso*
 *ciated

25      attribute is not, the type has the ALLOCATABLE property. If both attrib*
 *utes are present,

26      then the type should be assumed to have the POINTER property (and not

27      ALLOCATABLE); the DW.AT.allocated attribute may then be used to indicat*
 *e that the

28      association status of the object resulted from execution of an ALLOCATE*
 * statement

29      rather than pointer assignment.


30      For examples using DW.AT.allocated for Ada and Fortran 90 arrays, see A*
 *ppendix D.2

31      on page 306.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 138
                                   Chapter 5. Type Entries



 1      5.18.3   Array Rank


 2      The Fortran language supports iassumed-rank arraysj. The rank (the numb*
 *er of

 3      dimensions) of an assumed-rank array is unknown at compile time. The Fo*
 *rtran runtime

 4      stores the rank in an array descriptor.


 5      The presence of the attribute indicates that an array's rank (number of

 6      dimensions) is dynamic, and therefore unknown at compile time. The valu*
 *e of

 7      the DW.AT.rank attribute is either an integer constant or a DWARF expre*
 *ssion

 8      whose evaluation yields the dynamic rank.


 9      The bounds of an array with dynamic rank are described using a

10      DW.TAG.generic.subrange entry, which is the dynamic rank array equivale*
 *nt

11      of DW.TAG.subrange.type. The dioeerence is that a

12      DW.TAG.generic.subrange entry contains generic lower/upper bound and

13      stride expressions that need to be evaluated for each dimension. Before*
 * any

14      expression contained in a DW.TAG.generic.subrange can be evaluated, the

15      dimension for which the expression is to be evaluated needs to be pushe*
 *d onto

16      the stack. The expression will use it to ond the ooeset of the respecti*
 *ve oeld in the

17      array descriptor metadata.


18      A producer is free to choose any layout for the array descriptor. In pa*
 *rticular, the upper

19      and lower bounds and stride values do not need to be bundled into a str*
 *ucture or record,

20      but could be laid end to end in the containing descriptor, pointed to b*
 *y the descriptor, or

21      even allocated independently of the descriptor.


22      Dimensions are enumerated 0 to rank- 1 in source program order.


23      For an example in Fortran 2008, see Section D.2.3 on page 315.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 139




 1      Chapter 6



 2      Other Debugging Information



 3      This section describes debugging information that is not represented in*
 * the form

 4      of debugging information entries and is not contained within a .debug_i*
 *nfo

 5      section.


 6      In the descriptions that follow, these terms are used to specify the re*
 *presentation

 7      of DWARF sections:


 8        #  initial length, section ooeset and section length, which are deone*
 *d in

 9           Sections 7.2.2 on page 191 and 7.4 on page 203.


10        #  sbyte, ubyte, uhalf and uword, which are deoned in Section 7.31 on

11           page 257.


12        #  MBZ, which indicates that a value or the contents of a oeld must b*
 *e zero.



13      6.1    Accelerated Access


14      A debugger frequently needs to ond the debugging information for a prog*
 *ram entity

15      deoned outside of the compilation unit where the debugged program is cu*
 *rrently stopped.

16      Sometimes the debugger will know only the name of the entity; sometimes*
 * only the

17      address. To ond the debugging information associated with a global enti*
 *ty by name,

18      using the DWARF debugging information entries alone, a debugger would n*
 *eed to run

19      through all entries at the highest scope within each compilation unit.


20      Similarly, in languages in which the name of a type is required to alwa*
 *ys refer to the same

21      concrete type (such as C++), a compiler may choose to elide type deonit*
 *ions in all

22      compilation units except one. In this case a debugger needs a rapid way*
 * of locating the

23      concrete type deonition by name. As with the deonition of global data o*
 *bjects, this would

24      require a search of all the top level type deonitions of all compilatio*
 *n units in a program.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 140
                           Chapter 6. Other Debugging Information



 1      To ond the debugging information associated with a subroutine, given an*
 * address, a

 2      debugger can use the low and high PC attributes of the compilation unit*
 * entries to

 3      quickly narrow down the search, but these attributes only cover the ran*
 *ge of addresses for

 4      the text associated with a compilation unit entry. To ond the debugging*
 * information

 5      associated with a data object, given an address, an exhaustive search w*
 *ould be needed.

 6      Furthermore, any search through debugging information entries for dioee*
 *rent compilation

 7      units within a large program would potentially require the access of ma*
 *ny memory pages,

 8      probably hurting debugger performance.


 9      To make lookups of program entities (including data objects, functions *
 *and

10      types) by name or by address faster, a producer of DWARF information may

11      provide two dioeerent types of tables containing information about the

12      debugging information entries owned by a particular compilation unit en*
 *try in a

13      more condensed format.



14      6.1.1   Lookup by Name


15      For lookup by name, a name index is maintained in a separate object ole*
 * section

16      named .debug_names.


17      The .debug_names section is new in DWARF Version 5, and supersedes the

18      .debug_pubnames and .debug_pubtypes sections of earlier DWARF versions.*
 * While

19      .debug_names and either .debug_pubnames and/or .debug_pubtypes sections*
 * cannot

20      both occur in the same compilation unit, both may be found in the set o*
 *f units that make

21      up an executable or shared object.


22      The index consists primarily of two parts: a list of names, and a list *
 *of index

23      entries. A name, such as a subprogram name, type name, or variable name*
 *, may

24      have several deoning declarations in the debugging information. In this*
 * case, the

25      entry for that name in the list of names will refer to a sequence of in*
 *dex entries in

26      the second part of the table, each corresponding to one deoning declara*
 *tion in

27      the .debug_info section.


28      The name index may also contain an optional hash table for faster looku*
 *p.


29      A relocatable object ole may contain a "per-CU" index, which provides a*
 *n index

30      to the names deoned in that compilation unit.


31      An executable or shareable object ole may contain either a collection o*
 *f "per-CU"

32      indexes, simply copied from each relocatable object ole, or the linker *
 *may

33      produce a "per-module" index by combining the per-CU indexes into a sin*
 *gle

34      index that covers the entire module.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 141
                           Chapter 6. Other Debugging Information



 1      6.1.1.1 Contents of the Name Index


 2      The name index must contain an entry for each debugging information ent*
 *ry that

 3      deones a named subprogram, label, variable, type, or namespace, subject*
 * to the

 4      following rules:


 5        #  All non-deoning declarations (that is, debugging information entri*
 *es with a

 6           DW.AT.declaration attribute) are excluded.


 7        #  DW.TAG.namespace debugging information entries without a

 8           DW.AT.name attribute are included with the name i(anonymous

 9           namespace)j.


10        #  All other debugging information entries without a DW.AT.name attri*
 *bute

11           are excluded.


12        #  DW.TAG.subprogram, DW.TAG.inlined.subroutine, and

13           DW.TAG.label debugging information entries without an address

14           attribute (DW.AT.low.pc, DW.AT.high.pc, DW.AT.ranges, or

15           DW.AT.entry.pc) are excluded.


16        #  DW.TAG.variable debugging information entries with a DW.AT.location

17           attribute that includes a DW.OP.addr or DW.OP.form.tls.address

18           operator are included; otherwise, they are excluded.


19        #  If a subprogram or inlined subroutine is included, and has a

20           DW.AT.linkage.name attribute, there will be an additional index en*
 *try for

21           the linkage name.


22      For the purposes of determining whether a debugging information entry h*
 *as a

23      particular attribute (such as DW.AT.name), if debugging information ent*
 *ry A

24      has a DW.AT.speciocation or DW.AT.abstract.origin attribute pointing to

25      another debugging information entry B, any attributes of B are consider*
 *ed to be

26      part of A.


27      The intent of the above rules is to provide the consumer with some assu*
 *rance that looking

28      up an unqualioed name in the index will yield all relevant debugging in*
 *formation entries

29      that provide a deoning declaration at global scope for that name.


30      A producer may choose to implement additional rules for what names are *
 *placed in the

31      index, and may communicate those rules to a cooperating consumer via au*
 *gmentation

32      sequence as described below.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 142
                           Chapter 6. Other Debugging Information



 1      6.1.1.2 Structure of the Name Index


 2      Logically, the name index can be viewed as a list of names, with a list*
 * of index

 3      entries for each name. Each index entry corresponds to a debugging info*
 *rmation

 4      entry that matches the criteria given in the previous section. For exam*
 *ple, if one

 5      compilation unit has a function named fred and another has a struct nam*
 *ed

 6      fred, a lookup for ifredj will ond the list containing those two index *
 *entries.


 7      The index section contains eight individual parts, as illustrated in Fi*
 *gure 6.1

 8      following.


 9        1. A header, describing the layout of the section.


10        2. A list of compile units (CUs) referenced by this index.


11        3. A list of local type units (TUs) referenced by this index that are*
 * present in

12           this object ole.


13        4. A list of foreign type units (TUs) referenced by this index that a*
 *re not

14           present in this object ole (that is, that have been placed in a sp*
 *lit DWARF

15           object ole as described in 7.3.2 on page 194).


16        5. An optional hash lookup table.


17        6. The name table.


18        7. An abbreviations table, similar to the one used by the .debug_info*
 * section.


19        8. The entry pool, containing a list of index entries for each name i*
 *n the name

20           list.


21      The formats of the header and the hash lookup table are described in Se*
 *ction

22      6.1.1.4 on page 148.


23      The list of CUs and the list of local TUs are each an array of ooesets,*
 * each of which

24      is the ooeset of a compile unit or a type unit in the .debug_info secti*
 *on. For a

25      per-CU index, there is a single CU entry, and there may be a TU entry f*
 *or each

26      type unit generated in the same translation unit as the single CU. For a

27      per-module index, there will be one CU entry for each compile unit in t*
 *he

28      module, and one TU entry for each unique type unit in the module. Each *
 *list is

29      indexed starting at 0.


30      The list of foreign TUs is an array of 64-bit (DW.FORM.ref.sig8) type

31      signatures, representing types referenced by the index whose deonitions*
 * have

32      been placed in a dioeerent object ole (that is, a split DWARF object). *
 *This list may

33      be empty. The foreign TU list immediately follows the local TU list and*
 * they both

34      use the same index, so that if there are N local TU entries, the index *
 *for the orst

35      foreign TU is N.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 143
                   Chapter 6. Other Debugging Information



                                                                      part 1 of*
 * 3


NameHIndexeaderCULListocalFTUoListreignHTUaListshNTableameATablebbrevETablentry*
 *oPooloesetotooCUe0set.to.CU.1ooesetctooCUmkp-_1unit_counto(=ok)esetotooTUe0se*
 *t.to.TU.1ooesetltooTUcta-l1_type_unit_counts(=it)gnaturesofiTUgtnature.of.TU.*
 *ts+i1gnaturefofoTUrt+fe-1ign_type_unit_countB(=uf)cketsHashesStringEOoesetsnt*
 *ryAOoesetsbbreviationsIndexsEntriesee.@



                        Figure 6.1: Name Index Layout



July 15 2024               ***WORKING DRAFT***                       Page 144
                   Chapter 6. Other Debugging Information



                                                                      part 2 of*
 * 3

       bucketb0ucket.1.b.ucketbbu-c1ket_counth(=ab)shhvaluea1shhvaluea2shhvalue*
 *a3shhvaluea4sh.value.5.hashSvaluetnringEntryname_count.debug.strindexaentries*
 *bbrevtcodeamgi(DW.TAG)dx.attrib.name.(DW.IDX),iformdx0attrib,name0(DW.IDX),(f*
 *ormend.of.abbrev.code0m)(endpofaabbreviations)ddingabbrev_table_size
       BucketsHashesOoesetsOoesets(=An)bbreviations(DW.FORM)(DW.FORM)(= s)



                  Figure 6.1: Name Index Layout (continued)



July 15 2024               ***WORKING DRAFT***                       Page 145
                           Chapter 6. Other Debugging Information



                                                                              p*
 *art 3 of 3

                               IndexiEntriesndexientryn#1dforeiajx.entry.#2.for*
 *0iaj(endiofnentriesdforeiaj)xientryn#1dforeibjx.entry.#2.for0ibj(endiofnentri*
 *esdforeibj)x.entry.#1.foraicjbbrevicodedmxiattribdvaluex.attrib.value.idxfatt*
 *ribrvalueomfentryrooesetsomfentryrooesetsom entry ooesets
                                  ofonameftablenameotablef name table



                          Figure 6.1: Name Index Layout (concluded)



 1      The name table is logically a table with a row for each unique name in *
 *the index,

 2      and two columns. The orst column contains a reference to the name, as a*
 * string.

 3      The second column contains the ooeset within the entry pool of the list*
 * of index

 4      entries for the name.


 5      The abbreviations table describes the formats of the entries in the ent*
 *ry pool.

 6      Like the DWARF abbreviations table in the .debug_abbrev section, it deo*
 *nes one

 7      or more abbreviation codes. Each abbreviation code provides a DWARF tag

 8      value followed by a list of pairs that deones an attribute and form cod*
 *e used by

 9      entries with that abbreviation code.


10      The entry pool contains all the index entries, grouped by name. The sec*
 *ond

11      column of the name list points to the orst index entry for the name, an*
 *d all the

12      index entries for that name are placed one after the other.


13      Each index entry begins with an unsigned LEB128 abbreviation code. The

14      abbreviation list for that code provides the DWARF tag value for the en*
 *try as

15      well as the set of attributes provided by the entry and their forms.


16      The standard index attributes (see Table 6.1 on page 152) are:


17        #  Compilation Unit (CU), a reference to an entry in the list of CUs.*
 * In a

18           per-CU index, index entries without this index attribute implicitl*
 *y refer to

19           the single CU.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 146
                           Chapter 6. Other Debugging Information



 1        #  Type Unit (TU), a reference to an entry in the list of local or fo*
 *reign TUs.


 2        #  Debugging information entry ooeset within the CU or TU.


 3        #  Parent debugging information entry, a reference to the index entry*
 * for the

 4           parent. This is represented as the ooeset of the entry relative to*
 * the start of

 5           the entry pool.


 6        #  Type hash, an 8-byte hash of the type declaration.


 7      It is possible that an indexed debugging information entry has a parent*
 * that is

 8      not indexed (for example, if its parent does not have a name attribute)*
 *. In such a

 9      case, a parent index attribute may point to a nameless index entry (tha*
 *t is, one

10      that cannot be reached from any entry in the name table), or it may poi*
 *nt to the

11      nearest ancestor that does have an index entry.


12      A producer may deone additional producer-specioc index attributes, and a

13      consumer will be able to ignore and skip over any index attributes it i*
 *s not

14      prepared to handle.


15      When an index entry refers to a foreign type unit, it may have index at*
 *tributes

16      for both CU and (foreign) TU. For such entries, the CU index attribute *
 *gives the

17      consumer a reference to the CU that may be used to locate a split DWARF*
 * object

18      ole that contains the type unit.


19      The type hash index attribute, not to be confused with the type signatu*
 *re for a TU, may

20      be provided for type entries whose declarations are not in a type unit,*
 * for the convenience

21      of link-time or post-link utilities that wish to de-duplicate type decl*
 *arations across

22      compilation units. The type hash, however, is computed by the same meth*
 *od as specioed

23      for type signatures.


24      The last entry for each name is followed by a zero byte that terminates*
 * the list.

25      There may be gaps between the lists.



26      6.1.1.3 Per-CU versus Per-Module Indexes


27      In a per-CU index, the CU list may have only a single entry, and index *
 *entries may omit

28      the CU attribute. (Cross-module or link-time optimization, however, may*
 * produce an

29      object ole with several compile units in one object. A compiler in this*
 * case may produce a

30      separate index for each CU, or a combined index for all CUs. In the lat*
 *ter case, index

31      entries will require the CU attribute.) Most name table entries may hav*
 *e only a single

32      index entry for each, but sometimes a name may be used in more than one*
 * context and

33      will require multiple index entries, each pointing to a dioeerent debug*
 *ging information

34      entry.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 147
                           Chapter 6. Other Debugging Information



 1      When linking object oles containing per-CU indexes, the linker may choo*
 *se to

 2      concatenate the indexes as ordinary sections, or it may choose to combi*
 *ne the input

 3      indexes into a single per-module index.


 4      A per-module index will contain a number of CUs, and each index entry c*
 *ontains a CU

 5      attribute or a TU attribute to identify which CU or TU contains the deb*
 *ugging

 6      information entry being indexed. When a given name is used in multiple *
 *CUs or TUs, it

 7      will typically have a series of index entries pointing to each CU or TU*
 * where it is

 8      declared. For example, an index entry for a C++ namespace needs to list*
 * each occurrence,

 9      since each CU may contribute additional names to the namespace, and the*
 * consumer

10      needs to ond them all. On the other hand, some index entries do not nee*
 *d to list more

11      than one deonition; for example, with the one-deonition rule in C++, du*
 *plicate entries for

12      a function may be omitted, since the consumer only needs to ond one dec*
 *laration.

13      Likewise, a per-module index needs to list only a single copy of a type*
 * declaration

14      contained in a type unit.


15      For the beneot of link-time or post-link utilities that consume per-CU *
 *indexes and

16      produce a per-module index, the per-CU index entries provide the tag en*
 *coding for the

17      original debugging information entry, and may provide a type hash for c*
 *ertain types that

18      may beneot from de-duplication. For example, the standard declaration o*
 *f the typedef

19      uint32_t is likely to occur in many CUs, but a combined per-module inde*
 *x needs to

20      retain only one; a user declaration of a typedef mytype may refer to a *
 *dioeerent type at

21      each occurrence, and a combined per-module index retains each unique de*
 *claration of that

22      type.



23      6.1.1.4 Data Representation of the Name Index


24      The name index is placed in a section named .debug_names, and consists *
 *of the

25      eight parts described in the following sections.



26      6.1.1.4.1  Section Header

27      The section header contains the following oelds:


28      1.  unit_length (initial length)

29          The length of this contribution to the name index section, not incl*
 *uding the

30          length oeld itself (see Section 7.2.2 on page 191).


31      2.  version (uhalf)

32          A version number (see Section 7.19 on page 244). This number is spe*
 *cioc to

33          the name index table and is independent of the DWARF version number.


34      3.  padding (uhalf)

35          Reserved to DWARF (must be zero).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 148
                           Chapter 6. Other Debugging Information



 1      4.  comp_unit_count (uword)

 2          The number of CUs in the CU list.


 3      5.  local_type_unit_count (uword)

 4          The number of TUs in the local TU list.


 5      6.  foreign_type_unit_count (uword)

 6          The number of TUs in the foreign TU list.


 7      7.  bucket_count (uword)

 8          The number of hash buckets in the hash lookup table. If there is no*
 * hash

 9          lookup table, this oeld contains 0.


10      8.  name_count (uword)

11          The number of unique names in the index.


12      9.  abbrev_table_size (uword)

13          The size in bytes of the abbreviations table.


14    10.   augmentation_size (uword)

15          The size in bytes of the augmentation sequence. This value must be a

16          multiple of four.


17    11.   augmentation (sequence of ubyte)

18          A producer-specioc sequence of bytes, which provides additional

19          information about the contents of this index. If provided, the sequ*
 *ence begins

20          with four bytes which serve as a producer ID. The remainder of the *
 *sequence

21          is meant to be read by a cooperating consumer, and its contents and

22          interpretation are not specioed here. The block is padded with zero*
 * bytes to a

23          multiple of four bytes in length.


24          The presence of an unrecognized augmentation producer ID does not m*
 *ake it

25          impossible for a consumer to process data in the .debug_names secti*
 *on. The

26          augmentation sequence only provides hints to the consumer regarding*
 * the

27          completeness of the set of names in the index.



28      6.1.1.4.2  List of CUs

29      The list of CUs immediately follows the header. Each entry in the list *
 *is an ooeset

30      of the corresponding compilation unit in the .debug_info section. In the

31      DWARF-32 format, a section ooeset is 4 bytes, while in the DWARF-64 for*
 *mat, a

32      section ooeset is 8 bytes.


33      The total number of entries in the list is given by comp_unit_count. Th*
 *ere must

34      be at least one CU.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 149
                           Chapter 6. Other Debugging Information



 1      6.1.1.4.3  List of Local TUs

 2      The list of local TUs immediately follows the list of CUs. Each entry i*
 *n the list is

 3      an ooeset of the corresponding type unit in the .debug_info section. In*
 * the

 4      DWARF-32 format, a section ooeset is 4 bytes, while in the DWARF-64 for*
 *mat, a

 5      section ooeset is 8 bytes.


 6      Any local TU entry with a maximum representable value is considered not

 7      present. Any index entry referencing such a local TU entry should be ig*
 *nored.


 8      The total number of entries in the list is given by local_type_unit_cou*
 *nt. This

 9      list may be empty.



10      6.1.1.4.4  List of Foreign TUs

11      The list of foreign TUs immediately follows the list of local TUs. Each*
 * entry in

12      the list is a 8-byte type signature (as described by DW.FORM.ref.sig8).


13      The number of entries in the list is given by foreign_type_unit_count. *
 *This list

14      may be empty.



15      6.1.1.4.5  Hash Lookup Table

16      The optional hash lookup table immediately follows the list of type sig*
 *natures.


17      The hash lookup table is actually two separate arrays: an array of buck*
 *ets,

18      followed immediately by an array of hashes. The number of entries in the

19      buckets array is given by bucket_count, and the number of entries in th*
 *e hashes

20      array is given by name_count. Each array contains 4-byte unsigned integ*
 *ers.


21      Symbols are entered into the hash table by orst computing a hash value *
 *from the

22      symbol name. The hash is computed using the "DJB" hash function describ*
 *ed in

23      Section 7.33 on page 261. Given a hash value for the symbol, the symbol*
 * is

24      entered into a bucket whose index is the hash value modulo bucket_count*
 *. The

25      buckets array is indexed starting at 0.


26      For the purposes of the hash computation, each symbol name should be fo*
 *lded

27      according to the simple case folding algorithm deoned in the "Caseless

28      Matching" subsection of Section 5.18 ("Case Mappings") of the Unicode S*
 *tandard,

29      Version 9.0.0. The original symbol name, as it appears in the source co*
 *de, should

30      be stored in the name table.


31      Thus, two symbols that dioeer only by case will hash to the same slot, *
 *but the consumer

32      will be able to distinguish the names when appropriate.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 150
                           Chapter 6. Other Debugging Information



 1      The simple case folding algorithm is further described in the CaseFoldi*
 *ng.txt ole

 2      distributed with the Unicode Character Database. That ole deones four c*
 *lasses of

 3      mappings: Common (C), Simple (S), Full (F), and Turkish (T). The hash

 4      computation specioed here uses the C + S mappings only, which do not ao*
 *eect the

 5      total length of the string, with the addition that Turkish upper case d*
 *otted '#' and

 6      lower case dotless 'ss' are folded to the Latin lower case 'i'.


 7      Each bucket contains the index of an entry in the hashes array. The has*
 *hes array

 8      is indexed starting at 1, and an empty bucket is represented by the val*
 *ue 0.


 9      The hashes array contains a sequence of the full hash values for each s*
 *ymbol. All

10      symbols that have the same index into the bucket list follow one anothe*
 *r in the

11      hashes array, and the indexed entry in the bucket list refers to the or*
 *st symbol.

12      When searching for a symbol, the search starts at the index given by th*
 *e bucket,

13      and continues either until a matching symbol is found or until a hash v*
 *alue from

14      a dioeerent bucket is found. If two dioeerent symbol names produce the *
 *same hash

15      value, that hash value will occur twice in the hashes array. Thus, if a*
 * matching

16      hash value is found, but the name does not match, the search continues *
 *visiting

17      subsequent entries in the hashes table.


18      When a matching hash value is found in the hashes array, the index of t*
 *hat entry

19      in the hashes array is used to ond the corresponding entry in the name *
 *table.



20      6.1.1.4.6  Name Table

21      The name table immediately follows the hash lookup table. It consists o*
 *f two

22      arrays: an array of string ooesets, followed immediately by an array of*
 * entry

23      ooesets. The items in both arrays are section ooesets: 4-byte unsigned *
 *integers for

24      the DWARF-32 format or 8-byte unsigned integers for the DWARF-64 format.

25      The string ooesets in the orst array refer to names in the .debug_str (*
 *or

26      .debug_str.dwo) section. The entry ooesets in the second array refer to*
 * index

27      entries, and are relative to the start of the entry pool area.


28      These two arrays are indexed starting at 1, and correspond one-to-one w*
 *ith each

29      other. The length of each array is given by name_count.


30      If there is a hash lookup table, the hashes array corresponds on a one-*
 *to-one

31      basis with the string ooesets array and with the entry ooesets array.


32      If there is no hash lookup table, there is no ordering requirement for *
 *the name table.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 151
                           Chapter 6. Other Debugging Information



 1      6.1.1.4.7  Abbreviations Table

 2      The abbreviations table immediately follows the name table. This table *
 *consists

 3      of a series of abbreviation declarations. Its size is given by abbrev_t*
 *able_size.


 4      Each abbreviation declaration deones the tag and other attributes for a*
 * particular

 5      form of index entry. Each declaration starts with an unsigned LEB128 nu*
 *mber

 6      representing the abbreviation code itself. It is this code that appears*
 * at the

 7      beginning of an index entry. The abbreviation code must not be 0.


 8      The abbreviation code is followed by another unsigned LEB128 number that

 9      encodes the tag of the debugging information entry corresponding to the*
 * index

10      entry.


11      Following the tag encoding is a series of attribute speciocations. Each*
 * index

12      attribute consists of two parts: an unsigned LEB128 number that represe*
 *nts the

13      index attribute, and another unsigned LEB128 number that represents the*
 * index

14      attribute's form (as described in Section 7.5.4 on page 216). The serie*
 *s of attribute

15      speciocations ends with an entry containing 0 for the attribute and 0 f*
 *or the form.


16      The index attributes and their meanings are listed in Table 6.1.



                             Table 6.1: Index attribute encodings
               _______________________________________________________________
               __Index_attribute_name___||Meaning_____________________________

                 DW.IDX.compile.unit ||  Index of CU

                 DW.IDX.type.unit     || Index of TU (localor foreign)

                 DW.IDX.die.ooeset     ||Ooeset of DIE within CU or TU

                 DW.IDX.parent        || Index of name tableentry for parent

                 DW.IDX.type.hash    ||  Hash of type declaration

                 DW.IDX.external      || Whether DW.AT.external is present
                                      |  on the declaration (AEag)
               _______________________|_______________________________________



17      The abbreviations table ends with an entry consisting of a single 0 byt*
 *e for the

18      abbreviation code. The size of the table given by abbrev_table_size may

19      include optional padding following the terminating 0 byte.



20      6.1.1.4.8  Entry Pool

21      The entry pool immediately follows the abbreviations table. Each entry *
 *in the

22      entry ooesets array in the name table (see Section 6.1.1.4.6) points to*
 * an ooeset in

23      the entry pool, where a series of index entries for that name is locate*
 *d.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 152
                           Chapter 6. Other Debugging Information



 1      Each index entry in the series begins with an abbreviation code, and is*
 * followed

 2      by the index attribute values described by the abbreviation declaration*
 * for that

 3      code. The last index entry in the series is followed by a terminating e*
 *ntry whose

 4      abbreviation code is 0.


 5      Each index entry has a AEag indicating whether the corresponding DIE ha*
 *s the

 6      DW.AT.external attribute with a true value. If the DW.IDX.external attr*
 *ibute is

 7      missing from an entry, it means that DW.AT.external is false for that D*
 *IE.


 8      Gaps are not allowed between entries in a series (that is, the entries *
 *for a single

 9      name must all be contiguous), but there may be gaps between series.


10      For example, a producer/consumer combination may ond it useful to maint*
 *ain alignment.


11      The size of the entry pool is the remaining size of the contribution to*
 * the index

12      section, as deoned by the unit_length header oeld.



13      6.1.2   Lookup by Address


14      For lookup by address, a table is maintained in a separate object ole s*
 *ection

15      called .debug_aranges. The table consists of sets of variable length en*
 *tries, each

16      set describing the portion of the program's address space that is cover*
 *ed by a

17      single compilation unit.


18      Each set begins with a header containing ove values:


19      1.  unit_length (initial length)

20          The length of this contribution to the address lookup section, not *
 *including

21          the length oeld itself (see Section 7.2.2 on page 191).


22      2.  version (uhalf)

23          A version number (see Section 7.21 on page 245). This number is spe*
 *cioc to

24          the address lookup table and is independent of the DWARF version nu*
 *mber.


25      3.  debug_info_offset (section ooeset)

26          The ooeset from the beginning of the .debug_info section of the com*
 *pilation

27          unit header referenced by the set.


28      4.  address_size (ubyte)

29          The size of an address in bytes on the target architecture.


30      5.  reserved 1 (ubyte, MBZ)
        _______________________________
           1This allows backward compatible support of the deprecated segment_s*
 *elector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 153
                           Chapter 6. Other Debugging Information



 1      This header is followed by a variable number of address range descripto*
 *rs. Each

 2      descriptor is a pair consisting of the beginning address of a range of *
 *text or data

 3      covered by some entry owned by the corresponding compilation unit, foll*
 *owed

 4      by the length of that range. A particular set is terminated by an entry*
 * consisting

 5      of two zeroes. By scanning the table, a debugger can quickly decide whi*
 *ch

 6      compilation unit to look in to ond the debugging information for an obj*
 *ect that

 7      has a given address.


 8      A range description entry whose address is the reserved address (see Se*
 *ction

 9      2.4.1 on page 26), indicates a non-existent range, which is equivalent *
 *to omitting

10      the range description.


11      If the range of addresses covered by the text and/or data of a compilat*
 *ion unit is not

12      contiguous, then there may be multiple address range descriptors for th*
 *at compilation

13      unit.



14      6.2    Line Number Information


15      A source-level debugger needs to know how to associate locations in the*
 * source oles with

16      the corresponding machine instruction addresses in the executable or th*
 *e shared object

17      oles used by that executable object ole. Such an association makes it p*
 *ossible for the

18      debugger user to specify machine instruction addresses in terms of sour*
 *ce locations. This

19      is done by specifying the line number and the source ole containing the*
 * statement. The

20      debugger can also use this information to display locations in terms of*
 * the source oles and

21      to single step from line to line, or statement to statement.


22      Line number information generated for a compilation unit is represented*
 * in the

23      .debug_line section of an object ole, and optionally also in the .debug*
 *_line_str

24      section, and is referenced by a corresponding compilation unit debugging

25      information entry (see Section 3.1.1 on page 62) in the .debug_info sec*
 *tion.


26      Some computer architectures employ more than one instruction set (for e*
 *xample, the

27      ARM and MIPS architectures support a 32-bit as well as a 16-bit instruc*
 *tion set).

28      Because the instruction set is a function of the program counter, it is*
 * convenient to

29      encode the applicable instruction set in the .debug_line section as wel*
 *l.


30      If space were not a consideration, the information provided in the .deb*
 *ug_line section

31      could be represented as a large matrix, with one row for each instructi*
 *on in the emitted

32      object code. The matrix would have columns for:


33        #  the source ole name


34        #  the source line number


35        #  the source column number



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 154
                           Chapter 6. Other Debugging Information



 1        #  whether this instruction is the beginning of a source statement


 2        #  whether this instruction is the beginning of a basic block


 3        #  and so on


 4      Such a matrix, however, would be impractically large. We shrink it with*
 * two techniques.

 5      First, we delete from the matrix each row whose ole, line, source colum*
 *n and

 6      discriminator is identical with that of its predecessors, except where *
 *the instruction is

 7      marked as a suggested breakpoint location, the end of a prologue region*
 *, or the beginning

 8      of an epilogue region. Second, we design a byte-coded language for a st*
 *ate machine and

 9      store a stream of bytes in the object ole instead of the matrix. This l*
 *anguage can be much

10      more compact than the matrix. To the line number information a consumer*
 * must irunj

11      the state machine to generate the matrix for each compilation unit of i*
 *nterest. The concept

12      of an encoded matrix also leaves room for expansion. In the future, col*
 *umns can be added

13      to the matrix to encode other things that are related to individual ins*
 *truction addresses.



14      6.2.1   Deonitions


15      The following terms are used in the description of the line number info*
 *rmation

16      format:


            state machine          The hypothetical machine used by a consumer

                                   of the line number information to expand the

                                   byte-coded instruction stream into a matrix *
 *of

                                   line number information.

            line number program    A series of byte-coded line number informati*
 *on

                                   instructions representing one compilation un*
 *it.

            basic block            A sequence of instructions where only the or*
 *st

                                   instruction may be a branch target and only *
 *the

                                   last instruction may transfer control. A

                                   subprogram invocation is deoned to be an exit

                                   from a basic block.

                                   A basic block does not necessarily correspon*
 *d to a

                                   specioc source code construct.

            sequence               A series of contiguous target machine

                                   instructions. One compilation unit may emit

                                   multiple sequences (that is, not all instruc*
 *tions

                                   within a compilation unit are assumed to be

                                   contiguous).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 155
                          Chapter 6. Other Debugging Information



1      6.2.2   State Machine Registers


2      The line number information state machine has a number of registers as s*
 *hown

3      in Table 6.3 following.



                             Table 6.3: State machine registers
         ______________________________________________________________________*
 *_____
         _Register_name______||Meaning_________________________________________*
 *_____

          address            ||The program-counter value corresponding to a
                             |machine instruction generated by the compiler.
                             |
          op_index           ||An unsigned integer representing the index of an
                             |
                             |operation within a VLIW instruction. The index of
                             |
                             |the orst operation is 0. For non-VLIW architectur*
 *es,
                             |this register will always be 0.
                             |
          file               ||An unsigned integer indicating the identity of t*
 *he
                             |
                             |source ole corresponding to a machine instruction.
                             |Files are numbered beginning at 0.
                             |
          line               ||An unsigned integer indicating a source line num*
 *ber.
                             |
                             |Lines are numbered beginning at 1. The compiler
                             |
                             |may emit the value 0 in cases where an instruction
                             |cannot be attributed to any source line.
                             |
          column             ||An unsigned integer indicating a column number
                             |
                             |within a source line. Columns are numbered
                             |
                             |beginning at 1. The value 0 is reserved to indica*
 *te
                             |that a statement begins at the ileft edgej of the*
 * line.
                             |
          is_stmt            ||A boolean indicating that the current instructio*
 *n is a
                             |
                             |recommended breakpoint location. A recommended
                             |
                             |breakpoint location is intended to irepresentj a *
 *line,
                             |
                             |a statement and/or a semantically distinct subpar*
 *t of
                             |a statement.
                             |
          basic_block        ||A boolean indicating that the current instructio*
 *n is
                             |the beginning of a basic block.
                             |
          end_sequence       ||A boolean indicating that the current address is*
 * that
                             |
                             |of the orst byte after the end of a sequence of t*
 *arget
                             |
                             |machine instructions. end_sequence terminates a
                             |
                             |sequence of lines; therefore other information in*
 * the
                             |same row is not meaningful.
         ____________________|_________________________________________________*
 *_____
          Continued on next page



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 156
                          Chapter 6. Other Debugging Information



        _Register_name______||Meaning__________________________________________*
 *____

         prologue_end       ||A boolean indicating that the current address is *
 *one
                            |
                            | (of possibly many) where execution should be
                            | suspended for a breakpoint at the entry of a func*
 *tion.
                            |
         epilogue_begin     ||A boolean indicating that the current address is *
 *one
                            |
                            | (of possibly many) where execution should be
                            |
                            | suspended for a breakpoint just prior to the exit*
 * of a
                            | function.
                            |
         prologue_epilogue || A boolean indicating that the current row describ*
 *es
                           |  instructions within a prologue or epilogue range.
                           | ||
         isa                 |An unsigned integer whose value encodes the
                             |
                             |applicable instruction set architecture for the c*
 *urrent
                             |
                             |instruction.
                             |
                             |The encoding of instruction sets should be shared*
 * by all
                             |
                             |users of a given architecture. It is recommended *
 *that this
                             |
                             |encoding be deoned by the ABI authoring committee*
 * for
                             |each architecture.
                            |||
         discriminator      | An unsigned integer identifying the block to which
                            |
                            | the current instruction belongs. Discriminator va*
 *lues
                            |
                            | are assigned arbitrarily by the DWARF producer and
                            |
                            | serve to distinguish among multiple blocks that m*
 *ay
                            |
                            | all be associated with the same source ole, line,*
 * and
                            |
                            | column. Where only one block exists for a given
                            | source position, the discriminator value is zero.
        ____________________|__________________________________________________*
 *____



1      The address and op_index registers, taken together, form an operation po*
 *inter

2      that can reference any individual operation within the instruction strea*
 *m.


3      At the beginning of each sequence within a line number program, the stat*
 *e of the

4      registers is as show in Table 6.4 on the next page.


5      The isa value 0 specioes that the instruction set is the architecturally*
 * determined default

6      instruction set. This may be oxed by the ABI, or it may be specioed by o*
 *ther means, for

7      example, by the object ole description.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 157
                           Chapter 6. Other Debugging Information



                          Table 6.4: Line number program initial state
           ____________________________________________________________________*
 *___
            address            ||0

            op_index           ||0

            file               ||0

            line               ||1

            column             ||0

            is_stmt            ||determined by default_is_stmt in the line numb*
 *er
                               | program header
                               |
            basic_block        ||ifalsej

            end_sequence       ||ifalsej

            prologue_end       ||ifalsej

            epilogue_begin     ||ifalsej

            prologue_epilogue || ifalsej

            isa                 ||0

           _discriminator______||0_____________________________________________*
 *___



 1      6.2.3   Line Number Program Instructions


 2      The state machine instructions in a line number program belong to one o*
 *f three

 3      categories:


 4      1.  special opcodes

 5          These have a ubyte opcode oeld and no operands.


 6          Most of the instructions in a line number program are special opcod*
 *es.


 7      2.  standard opcodes

 8          These have a ubyte opcode oeld which may be followed by zero or more

 9          LEB128 operands (except for DW.LNS.oxed.advance.pc,     see Section*
 * 6.2.5.2

10          on page 168). The opcode implies the number of operands and their

11          meanings, but the line number program header also specioes the numb*
 *er of

12          operands for each standard opcode.


13          One standard opcode (DW.LNS.extended.op) serves as an escape that

14          allows additional opcodes without reducing the number of special op*
 *codes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 158
                           Chapter 6. Other Debugging Information



 1      3.  extended opcodes

 2          These have a multiple byte format. The orst byte is DW.LNS.extended*
 *.op.

 3          The next bytes are an unsigned LEB128 integer giving the number of *
 *bytes in

 4          the instruction itself (this does not include the orst DW.LNS.exten*
 *ded.op

 5          byte or the size). The remaining bytes are the instruction itself (*
 *which begins

 6          with a ubyte extended opcode).



 7      6.2.4   The Line Number Program Header


 8      The optimal encoding of line number information depends to a certain de*
 *gree

 9      upon the architecture of the target machine. The line number program he*
 *ader

10      provides information used by consumers in decoding the line number prog*
 *ram

11      instructions for a particular compilation unit and also provides inform*
 *ation used

12      throughout the rest of the line number program.


13      The line number program for each compilation unit begins with a header

14      containing the following oelds in order:


15      1.  unit_length (initial length)

16          The size in bytes of the line number information for this compilati*
 *on unit, not

17          including the length oeld itself (see Section 7.2.2 on page 191).


18      2.  version (uhalf)

19          A version number (see Section 7.22 on page 246). This number is spe*
 *cioc to

20          the line number information and is independent of the DWARF version

21          number.


22      3.  address_size (ubyte)

23          The size of an address in bytes on the target architecture.


24          The address_size oeld supports the common practice of stripping all*
 * but the line

25          number sections (.debug_line and .debug_line_str) from an executabl*
 *e.


26      4.  reserved 2 (ubyte, MBZ)


27      5.  header_length

28          The number of bytes following the header_length oeld to the beginni*
 *ng of

29          the orst byte of the line number program itself. In the 32-bit DWAR*
 *F format,

30          this is a 4-byte unsigned length; in the 64-bit DWARF format, this *
 *oeld is an

31          8-byte unsigned length (see Section 7.4 on page 203).
        _______________________________
           2This allows backward compatible support of the deprecated segment_s*
 *elector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 159
                           Chapter 6. Other Debugging Information



 1      6.  minimum_instruction_length (ubyte)

 2          The size in bytes of the smallest target machine instruction. Line *
 *number

 3          program opcodes that alter the address and op_index registers use t*
 *his and

 4          maximum_operations_per_instruction in their calculations.


 5      7.  maximum_operations_per_instruction (ubyte)

 6          The maximum number of individual operations that may be encoded in *
 *an

 7          instruction. Line number program opcodes that alter the address and

 8          op_index registers use this and minimum_instruction_length in their

 9          calculations.


10          For non-VLIW architectures, this oeld is 1, the op_index register i*
 *s always 0,

11          and the operation pointer is simply the address register.


12      8.  default_is_stmt (ubyte)

13          The initial value of the is_stmt register.


14          A simple approach to building line number information when machine *
 *instructions

15          are emitted in an order corresponding to the source program is to s*
 *et

16          default_is_stmt to itruej and to not change the value of the is_stm*
 *t register

17          within the line number program. One matrix entry is produced for ea*
 *ch line that has

18          code generated for it. The eoeect is that every entry in the matrix*
 * recommends the

19          beginning of each represented line as a breakpoint location. This i*
 *s the traditional

20          practice for unoptimized code.


21          A more sophisticated approach might involve multiple entries in the*
 * matrix for a line

22          number; in this case, at least one entry (often but not necessarily*
 * only one) specioes a

23          recommended breakpoint location for the line number. DW.LNS.negate.*
 *stmt

24          opcodes in the line number program control which matrix entries con*
 *stitute such a

25          recommendation and default_is_stmt might be either itruej or ifalse*
 *.j This

26          approach might be used as part of support for debugging optimized c*
 *ode.


27      9.  line_base (sbyte)

28          This parameter aoeects the meaning of the special opcodes. See belo*
 *w.


29    10.   line_range (ubyte)

30          This parameter aoeects the meaning of the special opcodes. See belo*
 *w.


31    11.   opcode_base (ubyte)

32          The number assigned to the orst special opcode.


33          Opcode base is typically one greater than the highest-numbered stan*
 *dard opcode

34          deoned for the specioed version of the line number information (12 *
 *in DWARF

35          Versions 3 through 6,  and 9 in Version 2). If opcode_base is less *
 *than the typical

36          value, then standard opcode numbers greater than or equal to the op*
 *code base are not

37          used in the line number table of this unit (and the codes are treat*
 *ed as special



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 160
                           Chapter 6. Other Debugging Information



 1         opcodes). If opcode_base is greater than the typical value, then the*
 * numbers

 2         between that of the highest standard opcode and the orst special opc*
 *ode (not

 3         inclusive) are used for producer-specioc extensions.


 4    12.   standard_opcode_lengths (array of ubyte)

 5          This array specioes the number of LEB128 operands for each of the s*
 *tandard

 6          opcodes. The orst element of the array corresponds to the opcode wh*
 *ose

 7          value is 1, and the last element corresponds to the opcode whose va*
 *lue is

 8          opcode_base - 1.


 9          By increasing opcode_base, and adding elements to this array, new s*
 *tandard

10          opcodes can be added, while allowing consumers who do not know abou*
 *t these new

11          opcodes to be able to skip them.


12          Codes for producer-specioc extensions, if any, are described just l*
 *ike standard opcodes.


13    13.   directory_format_count (ULEB128)

14          A count of the number of entries in the following directory_format_*
 *table

15          oeld.


16    14.   directory_format_table (sequence of record format descriptors)

17          A sequence of record format descriptors. Each descriptor consists t*
 *he

18          following:


19            # A sequence of oeld descriptors. Each oeld descriptor consists o*
 *f a pair of

20              unsigned LEB128 values: (a) a content type code (see Sections 6*
 *.2.4.1 on

21              page 163 and 6.2.4.2 on page 165), and (b) a form code (using t*
 *he

22              attribute form codes).


23            # A pair of zero bytes to terminate the descriptor.


24          The line number program numbers the record format descriptors

25          sequentially, beginning with 0.


26          The format declarations describe the layout of the entries in the d*
 *irectories

27          oeld, below.


28    15.   directories_count (ULEB128)

29          A count of the number of entries in the following directories oeld.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 161
                           Chapter 6. Other Debugging Information



 1    16.   directories (sequence of directory entries)

 2          A sequence of directory entries. Each entry consists of:


 3            # A format code (ULEB128), which selects a record format descript*
 *or from

 4              the directory_format_table oeld, above, by its index.


 5            # A sequence of oelds as described by the selected record format

 6              descriptor.


 7          Each directory entry describes a path that was searched for include*
 *d source

 8          oles in this compilation, including the compilation directory of the

 9          compilation. (The paths include those directories specioed by the u*
 *ser for the

10          compiler to search and those the compiler searches without explicit*
 * direction.)


11          The orst path entry is the current directory of the compilation; if*
 * that entry is

12          specioed using a relative path, it is relative to the location of t*
 *he linked image

13          containing the line table entries (assuming the image has not been *
 *moved).

14          Each additional path entry is either a full path name or is relativ*
 *e to the

15          current directory of the compilation.


16          The line number program assigns a number (index) to each of the dir*
 *ectory

17          entries in order, beginning with 0.


18          Prior to DWARF Version 5, the current compilation ole did not have *
 *a specioc entry

19          in the file_names oeld. Starting in DWARF Version 5, the current ol*
 *e name has

20          index 0.


21          Note that if a .debug_line_str section is present, both the compila*
 *tion unit

22          debugging information entry and the line number header can share a *
 *single copy of

23          the current directory name string.


24    17.   file_name_format_count (ULEB128)

25          A count of the number of format descriptors in the following

26          file_name_format_table oeld.


27    18.   file_name_format_table (sequence of record format descriptors)

28          A sequence of record format descriptors. Each descriptor consists o*
 *f:


29            # A sequence of oeld descriptors. Each oeld descriptor consists o*
 *f a pair of

30              unsigned LEB128 values: (a) a content type code (see Sections 6*
 *.2.4.1 on

31              the following page and 6.2.4.2 on page 165), and (b) a form cod*
 *e (using

32              the attribute form codes).


33            # A pair of zero bytes to terminate the descriptor.


34          The line number program numbers the record format descriptors

35          sequentially, beginning with 0.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 162
                           Chapter 6. Other Debugging Information



 1         The format declarations describe the layout of the entries in the fi*
 *le_names

 2         oeld, below.


 3    19.   file_names_count (ULEB128)

 4          A count of the number of ole name entries in the following file_nam*
 *es oeld.


 5    20.   file_names (sequence of ole name entries)

 6          A sequence of ole name entries. Each entry consists of:


 7            # A format code (ULEB128), which selects a record format descript*
 *or from

 8              the file_name_format_table, by its index.


 9            # A sequence of oelds as described by the selected record format

10              descriptor.


11          Each ole name entry describes a source ole that contributes to the *
 *line

12          number information for this compilation or is used in other context*
 *s, such as

13          in a declaration coordinate or a macro ole inclusion.


14          The orst ole name entry is the primary source ole, whose ole name e*
 *xactly

15          matches that given in the DW.AT.name attribute in the compilation u*
 *nit

16          debugging information entry.


17          The line number program references ole names in this sequence begin*
 *ning

18          with 0, and uses those numbers instead of ole names in the line num*
 *ber

19          program that follows.


20          Prior to DWARF Version 5, the current compilation ole name was not *
 *represented in

21          the file_names oeld. In DWARF Version 5and after, the current compi*
 *lation ole

22          name is explicitly present and has index 0. This is needed to suppo*
 *rt the common

23          practice of stripping all but the line number sections (.debug_line*
 * and

24          .debug_line_str) from an executable.


25          Note that if a .debug_line_str section is present, both the compila*
 *tion unit

26          debugging information entry and the line number header can share a *
 *single copy of

27          the current ole name string.



28      6.2.4.1 Standard Content Descriptions


29      DWARF-deoned content type codes are used to indicate the type of inform*
 *ation

30      that is represented in one component of an include directory or ole name

31      description. The following type codes are deoned.


32      1.  DW.LNCT.path

33          The component is a null-terminated path name string. If the associa*
 *ted form

34          code is DW.FORM.string, then the string occurs immediately in the



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 163
                           Chapter 6. Other Debugging Information



 1         containing directories or file_names oeld. If the form code is

 2         DW.FORM.line.strp, then the string is included in the .debug_line_str

 3         section; if the form code is DW.FORM.strp or DW.FORM.strp8, then the

 4         string is included in the .debug_str section; if the form code is

 5         DW.FORM.strp.sup or DW.FORM.strp.sup8, then the string is included in

 6         the supplementary string section. In all cases other than DW.FORM.st*
 *ring,

 7         the string's ooeset occurs immediately in the containing directories*
 * or

 8          file_names oeld.

 9          In the 32-bit DWARF format, the representation of a DW.FORM.line.st*
 *rp

10          value is a 4-byte unsigned ooeset; in the 64-bit DWARF format, it i*
 *s an 8-byte

11          unsigned ooeset (see Section 7.4 on page 203).

12          Note that this use of DW.FORM.line.strp is similar to DW.FORM.strp *
 *but refers

13          to the .debug_line_str section, not .debug_str. It is needed to sup*
 *port the

14          common practice of stripping all but the line number sections (.deb*
 *ug_line and

15          .debug_line_str) from an executable.

16          In a .debug_line.dwo section, the forms DW.FORM.strx, DW.FORM.strx1,

17          DW.FORM.strx2, DW.FORM.strx3 and DW.FORM.strx4 may also be

18          used. These refer into the .debug_str_offsets.dwo section (and indi*
 *rectly

19          also the .debug_str.dwo section) because no i.debug.line.str.ooeset*
 *s.dwoj

20          or i.debug.line.str.dwoj sections exist or are deoned for use in sp*
 *lit objects.

21          (The form DW.FORM.string may also be used, but this precludes the

22          beneots of string sharing.)

23      2.  DW.LNCT.directory.index

24          The unsigned directory index represents an entry in the directories*
 * oeld of

25          the header. The index is 0 if the ole was found in the current dire*
 *ctory of the

26          compilation (hence, the orst directory in the directories oeld), 1 *
 *if it was

27          found in the second directory in the directories oeld, and so on.

28          This content code is always paired with one of the forms DW.FORM.da*
 *ta1,

29          DW.FORM.data2 or DW.FORM.udata.

30          The optimal form for a producer to use (which results in the minimu*
 *m size for the set

31          of include_index oelds) depends not only on the number of directori*
 *es in the

32          directories oeld, but potentially on the order in which those direc*
 *tories are listed and

33          the number of times each is used in the file_names oeld.

34      3.  DW.LNCT.timestamp

35          DW.LNCT.timestamp indicates that the value is the

36          implementation-deoned time of last modiocation of the ole, or 0 if *
 *not

37          available. It is always paired with one of the forms DW.FORM.udata,

38          DW.FORM.data4, DW.FORM.data8 or DW.FORM.block.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 164
                           Chapter 6. Other Debugging Information



 1      4.  DW.LNCT.size

 2          DW.LNCT.size indicates that the value is the unsigned size of the o*
 *le in

 3          bytes, or 0 if not available. It is paired with one of the forms

 4          DW.FORM.udata, DW.FORM.data1, DW.FORM.data2, DW.FORM.data4

 5          or DW.FORM.data8.


 6      5.  DW.LNCT.MD5

 7          DW.LNCT.MD5 indicates that the value is a 16-byte MD5 digest of the*
 * ole

 8          contents. It is paired with form DW.FORM.data16.


 9      6.  DW.LNCT.source

10          DW.LNCT.source specioes a null-terminated UTF-8 string that constit*
 *utes

11          the source text for the program. It is paired with the same forms as

12          DW.LNCT.path.


13          When the source oeld is present, consumers use the embedded source *
 *instead of

14          accessing the source using the ole path provided by the DW.LNCT.pat*
 *h oeld.


15          This is useful for programming languages that support runtime compi*
 *lation and

16          runtime generation of source text. In these cases, the source text *
 *does not reside in

17          any permanent ole. For example, the OpenCL C language supports runt*
 *ime

18          compilation.


19      7.  DW.LNCT.URL

20          DW.LNCT.URL specioes a null-terminated UTF-8 string that identioes

21          where the source text for the program is found on the Internet. It *
 *is paired

22          with the same forms as DW.LNCT.path.


23      An example that uses this line number header format is found in Appendi*
 *x D.5.1 on

24      page 341.



25      6.2.4.2 Producer-deoned Content Descriptions


26      Producer-deoned content descriptions may be deoned using content type c*
 *odes

27      in the range DW.LNCT.lo.user to DW.LNCT.hi.user. Each such code may be

28      combined with one or more forms from the set: DW.FORM.block,

29      DW.FORM.block1, DW.FORM.block2, DW.FORM.block4, DW.FORM.data1,

30      DW.FORM.data2, DW.FORM.data4, DW.FORM.data8, DW.FORM.data16,

31      DW.FORM.AEag, DW.FORM.line.strp, DW.FORM.sdata,

32      DW.FORM.sec.ooeset, DW.FORM.string, DW.FORM.strp, DW.FORM.strp8,

33      DW.FORM.strp.sup, DW.FORM.strp.sup8, DW.FORM.strx,

34      DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3, DW.FORM.strx4 and

35      DW.FORM.udata.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 165
                           Chapter 6. Other Debugging Information



 1      If a consumer encounters a producer-deoned content type that it does no*
 *t understand, it

 2      should skip the content data as though it were not present.



 3      6.2.5   The Line Number Program


 4      As stated before, the goal of a line number program is to build a matrix

 5      representing one compilation unit, which may have produced multiple

 6      sequences of target machine instructions. Within a sequence, addresses *
 *and

 7      operation pointers may only increase. (Line numbers may decrease in cas*
 *es of

 8      pipeline scheduling or other optimization.)



 9      6.2.5.1 Special Opcodes


10      Each ubyte special opcode has the following eoeect on the state machine:


11      1.  Add a signed integer to the line register.


12      2.  Modify the operation pointer by incrementing the address and op_ind*
 *ex

13          registers as described below.


14      3.  Append a row to the matrix using the current values of the state ma*
 *chine

15          registers.


16      4.  Set the basic_block register to ifalse.j


17      5.  Set the prologue_end register to ifalse.j


18      6.  Set the epilogue_begin register to ifalse.j


19      7.  Set the epilogue_epilogue register to ifalse.j


20      8.  Set the discriminator register to 0.


21      All of the special opcodes do those same things; they dioeer from one a*
 *nother

22      only in what values they add to the line, address and op_index register*
 *s.


23      Instead of assigning a oxed meaning to each special opcode, the line nu*
 *mber program

24      uses several parameters in the header to conogure the instruction set. *
 *There are two

25      reasons for this. First, although the opcode space available for specia*
 *l opcodes ranges from

26      13 through 255, the lower bound may increase if one adds new standard o*
 *pcodes. Thus,

27      the opcode_base oeld of the line number program header gives the value *
 *of the orst

28      special opcode. Second, the best choice of special-opcode meanings depe*
 *nds on the target

29      architecture. For example, for a RISC machine where the compiler-genera*
 *ted code

30      interleaves instructions from dioeerent lines to schedule the pipeline,*
 * it is important to be

31      able to add a negative value to the line register to express the fact t*
 *hat a later instruction

32      may have been emitted for an earlier source line. For a machine where p*
 *ipeline scheduling



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 166
                           Chapter 6. Other Debugging Information



 1      never occurs, it is advantageous to trade away the ability to decrease *
 *the line register (a

 2      standard opcode provides an alternate way to decrease the line number) *
 *in return for the

 3      ability to add larger positive values to the address register. To permi*
 *t this variety of

 4      strategies, the line number program header deones a line_base oeld that*
 * specioes the

 5      minimum value which a special opcode can add to the line register and a*
 * line_range

 6      oeld that deones the range of values it can add to the line register.


 7      A special opcode value is chosen based on the amount that needs to be a*
 *dded to

 8      the line, address and op_index registers. The maximum line increment fo*
 *r a

 9      special opcode is the value of the line_base oeld in the header, plus t*
 *he value of

10      the line_range oeld, minus 1 (line base + line range - 1). If the desir*
 *ed line

11      increment is greater than the maximum line increment, a standard opcode*
 * must

12      be used instead of a special opcode. The operation advance represents t*
 *he

13      number of operations to skip when advancing the operation pointer.


14      The special opcode is then calculated using the following formula:


15        opcode =

16          (desired line increment  - line_base) +

17            (line_range * operation advance ) + opcode_base


18      If the resulting opcode is greater than 255, a standard opcode must be *
 *used

19      instead.


20      When maximum_operations_per_instruction is 1, the operation advance is *
 *simply

21      the address increment divided by the minimum_instruction_length.


22      To decode a special opcode, subtract the opcode_base from the opcode it*
 *self to

23      give the adjusted opcode. The operation advance is the result of the ad*
 *justed opcode

24      divided by the line_range. The new address and op_index values are give*
 *n by


25        adjusted opcode  = opcode - opcode_base

26        operation advance  = adjusted opcode  / line_range

27

28        new address = address +

29          minimum_instruction_length *

30            ((op_index + operation advance) / maximum_operations_per_instruct*
 *ion)

31

32        new op_index =

33          (op_index + operation advance) % maximum_operations_per_instruction


34      When the maximum_operations_per_instruction oeld is 1, op_index is alwa*
 *ys 0

35      and these calculations simplify to those given for addresses in DWARF V*
 *ersion 3 and

36      earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 167
                           Chapter 6. Other Debugging Information



 1      The amount to increment the line register is the line_base plus the res*
 *ult of the

 2      adjusted opcode modulo the line_range. That is,


 3        line increment = line_base + (adjusted opcode  % line_range)


 4      See Appendix D.5.2 on page 342 for an example.



 5      6.2.5.2 Standard Opcodes


 6      The standard opcodes, their applicable operands and the actions perform*
 *ed by

 7      these opcodes are as follows:


 8      1.  DW.LNS.copy

 9          The DW.LNS.copy opcode takes no operands. It appends a row to the

10          matrix using the current values of the state machine registers. The*
 *n it sets the

11          discriminator register to 0, and sets the basic_block, prologue_end,

12          epilogue_begin and prologue_epilogue registers to ifalse.j


13      2.  DW.LNS.advance.pc

14          The DW.LNS.advance.pc opcode takes a single unsigned LEB128 operand

15          as the operation advance and modioes the address and op_index regis*
 *ters as

16          specioed in Section 6.2.5.1 on page 166.


17      3.  DW.LNS.advance.line

18          The DW.LNS.advance.line opcode takes a single signed LEB128 operand

19          and adds that value to the line register of the state machine.


20      4.  DW.LNS.set.ole

21          The DW.LNS.set.ole opcode takes a single unsigned LEB128 operand and

22          stores it in the file register of the state machine.


23      5.  DW.LNS.set.column

24          The DW.LNS.set.column opcode takes a single unsigned LEB128 operand

25          and stores it in the column register of the state machine.


26      6.  DW.LNS.negate.stmt

27          The DW.LNS.negate.stmt opcode takes no operands. It sets the is_stmt

28          register of the state machine to the logical negation of its curren*
 *t value.


29      7.  DW.LNS.set.basic.block

30          The DW.LNS.set.basic.block opcode takes no operands. It sets the

31          basic_block register of the state machine to itrue.j



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 168
                           Chapter 6. Other Debugging Information



 1      8.  DW.LNS.const.add.pc

 2          The DW.LNS.const.add.pc opcode takes no operands. It advances the

 3          address and op_index registers by the increments corresponding to s*
 *pecial

 4          opcode 255.


 5          When the line number program needs to advance the address by a smal*
 *l amount, it

 6          can use a single special opcode, which occupies a single byte. When*
 * it needs to

 7          advance the address by up to twice the range of the last special op*
 *code, it can use

 8          DW.LNS.const.add.pc followed by a special opcode, for a total of tw*
 *o bytes. Only if

 9          it needs to advance the address by more than twice that range will *
 *it need to use both

10          DW.LNS.advance.pc and a special opcode, requiring three or more byt*
 *es.


11      9.  DW.LNS.oxed.advance.pc

12          The DW.LNS.oxed.advance.pc opcode takes a single uhalf (unencoded)

13          operand and adds it to the address register of the state machine an*
 *d sets the

14          op_index register to 0. This is the only standard opcode whose oper*
 *and is not

15          a variable length number. It also does not multiply the operand by *
 *the

16          minimum_instruction_length oeld of the header.


17          Some assemblers may not be able emit DW.LNS.advance.pc or special o*
 *pcodes

18          because they cannot encode LEB128 numbers or judge when the computa*
 *tion of a

19          special opcode overAEows and requires the use of DW.LNS.advance.pc.*
 * Such

20          assemblers, however, can use DW.LNS.oxed.advance.pc instead, sacrio*
 *cing

21          compression.


22    10.   DW.LNS.set.prologue.end

23          The DW.LNS.set.prologue.end opcode takes no operands. It sets the

24          prologue_end register to itrue.j


25          When a breakpoint is set on entry to a function, it is generally de*
 *sirable for execution

26          to be suspended, not on the very orst instruction of the function, *
 *but rather at a point

27          after the function's frame has been set up, after any language deon*
 *ed local declaration

28          processing has been completed, and before execution of the orst sta*
 *tement of the

29          function begins. Debuggers generally cannot properly determine wher*
 *e this point is.

30          This command allows a compiler to communicate the location(s) to us*
 *e.


31          In the case of optimized code, there may be more than one such loca*
 *tion; for example,

32          the code might test for a special case and make a fast exit prior t*
 *o setting up the frame.


33          Note that the function to which the prologue end applies cannot be *
 *directly

34          determined from the line number information alone; the function mus*
 *t be determined

35          in combination with the subroutine information entries of the compi*
 *lation (including

36          inlined subroutines).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 169
                           Chapter 6. Other Debugging Information



 1    11.   DW.LNS.set.epilogue.begin

 2          The DW.LNS.set.epilogue.begin opcode takes no operands. It sets the

 3          epilogue_begin and prologue_epilogue registers to itrue.j


 4          When a breakpoint is set on the exit of a function or execution ste*
 *ps over the last

 5          executable statement of a function, it is generally desirable to su*
 *spend execution after

 6          completion of the last statement but prior to tearing down the fram*
 *e (so that local

 7          variables can still be examined). Debuggers generally cannot proper*
 *ly determine

 8          where this point is. This command allows a compiler to communicate *
 *the location(s)

 9          to use.


10          Note that the function to which the epilogue end applies cannot be *
 *directly

11          determined from the line number information alone; the function mus*
 *t be determined

12          in combination with the subroutine information entries of the compi*
 *lation (including

13          inlined subroutines).


14          In the case of a trivial function, both prologue end and epilogue b*
 *egin may

15          occur at the same address.


16    12.   DW.LNS.set.isa

17          The DW.LNS.set.isa opcode takes a single unsigned LEB128 operand and

18          stores that value in the isa register of the state machine.


19    13.   DW.LNS.extended.op

20          The DW.LNS.extended.op opcode takes two operands. The orst is an

21          unsigned LEB128 value that gives the size of the operand that follo*
 *ws. The

22          second begins with an extended opcode which is followed by operands

23          appropriate to that opcode.



24      6.2.5.3 Extended Opcodes


25      Extended opcodes are used as part of a DW.LNS.extended.op operation (see

26      Section 6.2.3 on page 158).


27      The extended opcodes are as follows:


28      1.  DW.LNE.end.sequence

29          The DW.LNE.end.sequence opcode takes no operands. It sets the

30          end_sequence register of the state machine to itruej and appends a *
 *row to

31          the matrix using the current values of the state-machine registers.*
 * Then it

32          resets the registers to the initial values specioed above (see Sect*
 *ion 6.2.2 on

33          page 156). Every line number program sequence must end with a

34          DW.LNE.end.sequence instruction which creates a row whose address is

35          that of the byte after the last target machine instruction of the s*
 *equence.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 170
                           Chapter 6. Other Debugging Information



 1      2.  DW.LNE.set.address

 2          The DW.LNE.set.address opcode takes a single relocatable address as*
 * an

 3          operand. The size of the operand is the size of an address on the t*
 *arget

 4          machine. It sets the address register to the value given by the rel*
 *ocatable

 5          address and sets the op_index register to 0.


 6          If the address value is the reserved target address (see Section 2.*
 *4.1 on

 7          page 26), no instructions are associated with subsequent rows up to*
 * but not

 8          including the subsequent DW.LNE.set.address or DW.LNE.end.sequence

 9          opcode, which is equivalent to omitting that sequence of opcodes.


10          All of the other line number program opcodes that aoeect the addres*
 *s register add a

11          delta to it. This instruction stores a relocatable value into the a*
 *ddress register instead.


12      3.  DW.LNE.set.discriminator

13          The DW.LNE.set.discriminator opcode takes a single parameter, an

14          unsigned LEB128 integer. It sets the discriminator register to the *
 *new value.


15      4.  DW.LNE.padding

16          The DW.LNE.padding opcode is followed by a single operand which

17          consists of a sequence of zero or more arbitrary bytes up to the le*
 *ngth

18          specioed by the unsigned LEB128 integer that precedes all extended *
 *opcodes.

19          The opcode and operand have no eoeect on the line number program.


20          This permits a producer to pad or overwrite arbitrary parts of a li*
 *ne number program,

21          with a minimum of the three bytes needed to encode any extended opc*
 *ode.


22      5.  DW.LNE.set.prologue.epilogue

23          The DW.LNE.set.prologue.epilogue opcode takes no operands. It sets *
 *the

24          prologue_epilogue register to "true."



25      Appendix D.5.3 on page 343 gives some sample line number programs.



26      6.3    Macro Information


27      Some languages, such as C and C++, provide a way to replace text in the*
 * source program

28      with macros deoned either in the source ole itself, or in another ole i*
 *ncluded by the source

29      ole. Because these macros are not themselves deoned in the target langu*
 *age, it is diOEcult

30      to represent their deonitions using the standard language constructs of*
 * DWARF. The

31      debugging information therefore reAEects the state of the source after *
 *the macro deonition

32      has been expanded, rather than as the programmer wrote it. The macro in*
 *formation table

33      provides a way of preserving the original source in the debugging infor*
 *mation.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 171
                           Chapter 6. Other Debugging Information



 1      As described in Section 3.1.1 on page 62, the macro information for a g*
 *iven

 2      compilation unit is represented in the .debug_macro section of an objec*
 *t ole.


 3      The macro information for each compilation unit consists of one or more*
 * macro

 4      units. Each macro unit starts with a header and is followed by a series*
 * of macro

 5      information entries or ole inclusion entries. Each entry consists of an*
 * opcode

 6      followed by zero or more operands. Each macro unit ends with an entry

 7      containing an opcode of 0.


 8      In all macro information entries, the line number of the entry is encod*
 *ed as an

 9      unsigned LEB128 integer.



10      6.3.1   Macro Information Header


11      The macro information header contains the following oelds:


12      1.  version (uhalf)

13          A version number (see Section 7.23 on page 248). This number is spe*
 *cioc to

14          the macro information and is independent of the DWARF version numbe*
 *r.


15      2.  flags (ubyte)

16          The bits of the flags oeld are interpreted as a set of AEags, some *
 *of which may

17          indicate that additional oelds follow.


18          The following AEags, beginning with the least signiocant bit, are d*
 *eoned:


19            # offset_size_flag

20              If the offset_size_flag is zero, the header is for a 32-bit DWA*
 *RF format

21              macro section and all ooesets are 4 bytes long; if it is one, t*
 *he header is for

22              a 64-bit DWARF format macro section and all ooesets are 8 bytes*
 * long.


23              This AEag does not apply to the the following entries:

24              DW.MACRO.deone.sup4, DW.MACRO.deone.sup8,

25              DW.MACRO.undef.sup4, DW.MACRO.undef.sup8,

26              DW.MACRO.import.sup4 and DW.MACRO.import.sup8.


27            # debug_line_offset_flag

28              If the debug_line_offset_flag is one, the debug_line_offset oel*
 *d (see

29              below) is present. If zero, that oeld is omitted.


30            # opcode_operands_table_flag

31              If the opcode_operands_table_flag is one, the opcode_operands_t*
 *able

32              oeld (see below) is present. If zero, that oeld is omitted.


33          All other AEags are reserved by DWARF.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 172
                           Chapter 6. Other Debugging Information



 1      3.  debug_line_offset

 2          An ooeset in the .debug_line section (if this header is in a .debug*
 *_macro

 3          section) or .debug_line.dwo section (if this header is in a .debug_*
 *macro.dwo

 4          section) of the beginning of the line number information in the con*
 *taining

 5          compilation, encoded as a 4-byte ooeset for a 32-bit DWARF format m*
 *acro

 6          section and an 8-byte ooeset for a 64-bit DWARF format macro sectio*
 *n.


 7      4.  opcode_operands_table

 8          An opcode_operands_table describing the operands of the macro

 9          information entry opcodes.


10          The macro information entries deoned in this standard may, but need*
 * not, be

11          described in the table, while other producer-deoned entry opcodes u*
 *sed in

12          the section are described there. Producer extension entry opcodes a*
 *re

13          allocated in the range from DW.MACRO.lo.user to DW.MACRO.hi.user.

14          Other unassigned codes are reserved for future DWARF standards.


15          The table starts with a 1-byte count of the deoned opcodes, followe*
 *d by an

16          entry for each of those opcodes. Each entry starts with a 1-byte un*
 *signed

17          opcode number, followed by unsigned LEB128 encoded number of operan*
 *ds

18          and for each operand there is a single unsigned byte describing the*
 * form in

19          which the operand is encoded. The allowed forms are: DW.FORM.block,

20          DW.FORM.block1, DW.FORM.block2, DW.FORM.block4,

21          DW.FORM.data1, DW.FORM.data2, DW.FORM.data4,

22          DW.FORM.data8, DW.FORM.data16, DW.FORM.AEag,

23          DW.FORM.line.strp, DW.FORM.sdata, DW.FORM.sec.ooeset,

24          DW.FORM.string, DW.FORM.strp, DW.FORM.strp8,

25          DW.FORM.strp.sup, DW.FORM.strp.sup8, DW.FORM.strx,

26          DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3, DW.FORM.strx4

27          and DW.FORM.udata.



28      6.3.2   Macro Information Entries


29      All macro information entries within a .debug_macro section for a given

30      compilation unit appear in the same order in which the directives were

31      processed by the compiler (after taking into account the eoeect of the *
 *macro

32      import directives).


33      The source ole in which a macro information entry occurs can be derived*
 * by interpreting

34      the sequence of entries from the beginning of the .debug_macro section.

35      DW.MACRO.start.ole and DW.MACRO.end.ole indicate changes in the contain*
 *ing

36      ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 173
                           Chapter 6. Other Debugging Information



 1      6.3.2.1 Deone and Undeone Entries


 2      The deone and undeone macro entries have multiple forms that use dioeer*
 *ent

 3      representations of their two operands.


 4      While described in pairs below, the forms of deone and undeone entries *
 *may be

 5      freely intermixed.


 6      1.  DW.MACRO.deone, DW.MACRO.undef

 7          A DW.MACRO.deone or DW.MACRO.undef entry has two operands. The

 8          orst operand encodes the source line number of the #define or #unde*
 *f macro

 9          directive. The second operand is a null-terminated character string*
 * for the

10          macro being deoned or undeoned.


11          The contents of the operands are described below (see Sections 6.3.*
 *2.2 and

12          6.3.2.3 following).


13      2.  DW.MACRO.deone.strp, DW.MACRO.undef.strp

14          A DW.MACRO.deone.strp or DW.MACRO.undef.strp entry has two

15          operands. The orst operand encodes the source line number of the #d*
 *efine or

16          #undef macro directive. The second operand consists of an ooeset in*
 *to a string

17          table contained in the .debug_str section of the object ole. The si*
 *ze of the

18          operand is given in the header offset_size_flag oeld.


19          The contents of the operands are described below (see Sections 6.3.*
 *2.2 and

20          6.3.2.3 following).


21      3.  DW.MACRO.deone.strx, DW.MACRO.undef.strx

22          A DW.MACRO.deone.strx or DW.MACRO.undef.strx entry has two

23          operands. The orst operand encodes the line number of the #define or

24          #undef macro directive. The second operand identioes a string; it is

25          represented using an unsigned LEB128 encoded value, which is interp*
 *reted as

26          a zero-based index into an array of ooesets in the .debug_str_offse*
 *ts section.


27          The contents of the operands are described below (see Sections 6.3.*
 *2.2 and

28          6.3.2.3 following).


29      4.  DW.MACRO.deone.sup4, DW.MACRO.deone.sup8,

30          DW.MACRO.undef.sup4, DW.MACRO.undef.sup8

31          A DW.MACRO.deone.sup4, DW.MACRO.deone.sup8,

32          DW.MACRO.undef.sup4 or DW.MACRO.undef.sup8 entry has two

33          operands. The orst operand encodes the line number of the #define or

34          #undef macro directive. The second operand identioes a string; it is

35          represented as an ooeset into a string table contained in the .debu*
 *g_str

36          section of the supplementary object ole. The size of the operand is*
 * 4-bytes for



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 174
                           Chapter 6. Other Debugging Information



 1         DW.MACRO.deone.sup4 and DW.MACRO.undef.sup4, and 8-bytes for

 2         DW.MACRO.deone.sup8 and DW.MACRO.undef.sup8.


 3          The contents of the operands are described below (see Sections 6.3.*
 *2.2 and

 4          6.3.2.3 following).



 5      6.3.2.2 Macro Deone String


 6      In the case of a DW.MACRO.deone, DW.MACRO.deone.strp,

 7      DW.MACRO.deone.strx, DW.MACRO.deone.sup4 or

 8      DW.MACRO.deone.sup8 entry, the value of the second operand is the name *
 *of

 9      the macro symbol that is deoned at the indicated source line, followed

10      immediately by the macro formal parameter list including the surrounding

11      parentheses (in the case of a function-like macro) followed by the deon*
 *ition

12      string for the macro. If there is no formal parameter list, then the na*
 *me of the

13      deoned macro is followed immediately by its deonition string.


14      In the case of a function-like macro deonition, no whitespace character*
 *s appear

15      between the name of the deoned macro and the following left parenthesis.

16      Formal parameters are separated by a comma without any whitespace. Exac*
 *tly

17      one space character separates the right parenthesis that terminates the*
 * formal

18      parameter list and the following deonition string.


19      In the case of a inormalj (that is, non-function-like) macro deonition,*
 * exactly one

20      space character separates the name of the deoned macro from the followi*
 *ng

21      deonition text.



22      6.3.2.3 Macro Undeone String


23      In the case of a DW.MACRO.undef, DW.MACRO.undef.strp,

24      DW.MACRO.undef.strx, DW.MACRO.undef.sup4 or

25      DW.MACRO.undef.sup8 entry, the value of the second string is the name o*
 *f the

26      pre-processor symbol that is undeoned at the indicated source line.



27      6.3.2.4 Entries for Command Line Options


28      A DWARF producer generates a deone or undeone entry for each pre-proces*
 *sor

29      symbol which is deoned or undeoned by some means other than such a dire*
 *ctive

30      within the compiled source text. In particular, pre-processor symbol de*
 *onitions

31      and undeonitions which occur as a result of command line options (when

32      invoking the compiler) are represented by their own deone and undeone e*
 *ntries.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 175
                           Chapter 6. Other Debugging Information



 1      All such deone and undeone entries representing compilation options app*
 *ear

 2      before the orst DW.MACRO.start.ole entry for that compilation unit (see

 3      Section 6.3.3 following) and encode the value 0 in their line number op*
 *erands.



 4      6.3.3   File Inclusion Entries


 5      6.3.3.1 Source Include Directives


 6      The following directives describe a source ole inclusion directive (#in*
 *clude in

 7      C/C++) and the ending of an included ole.


 8      1.  DW.MACRO.start.ole

 9          A DW.MACRO.start.ole entry has two operands. The orst operand encod*
 *es

10          the line number of the source line on which the #include macro dire*
 *ctive

11          occurs. The second operand encodes a source ole name index.


12          The source ole name index is the ole number in the line number info*
 *rmation

13          table for the compilation unit.


14          If a DW.MACRO.start.ole entry is present, the header contains a ref*
 *erence

15          to the .debug_line section or .debug_line.dwo section of the compil*
 *ation, as

16          appropriate.


17      2.  DW.MACRO.end.ole

18          A DW.MACRO.end.ole entry has no operands. The presence of the entry

19          marks the end of the current source ole inclusion.


20      When providing macro information in an object ole, a producer generates

21      DW.MACRO.start.ole and DW.MACRO.end.ole entries for the source ole

22      submitted to the compiler for compilation. This DW.MACRO.start.ole entry

23      has the value 0 in its line number operand and references the ole entry*
 * in the line

24      number information table for the primary source ole.



25      6.3.3.2 Importation of Macro Units


26      The import entries make it possible to replicate macro units. The orst *
 *form

27      supports replication within the current compilation and the second form

28      supports replication across separate executable or shared object oles.


29      Import entries do not reAEect the source program and, in fact, are not *
 *necessary at all.

30      However, they do provide a mechanism that can be used to reduce redunda*
 *ncy in the

31      macro information and thereby to save space.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 176
                           Chapter 6. Other Debugging Information



 1      1.  DW.MACRO.import

 2          A DW.MACRO.import entry has one operand, an ooeset into another par*
 *t of

 3          the .debug_macro section that is the beginning of a target macro un*
 *it. The size

 4          of the operand depends on the header offset_size_flag oeld. The

 5          DW.MACRO.import entry instructs the consumer to replicate the seque*
 *nce

 6          of entries following the target macro header which begins at the gi*
 *ven

 7          .debug_macro ooeset, up to, but excluding, the terminating entry wi*
 *th opcode

 8          0, as though the sequence of entries occurs in place of the import *
 *operation.


 9      2.  DW.MACRO.import.sup4, DW.MACRO.import.sup8

10          A DW.MACRO.import.sup4 or DW.MACRO.import.sup8 entry has one

11          operand, an ooeset from the start of the .debug_macro section in the

12          supplementary object ole. The size of the operand is 4 bytes for

13          DW.MACRO.import.sup4 and 8 bytes for DW.MACRO.import.sup8.

14          Apart from the dioeerent location in which to ond the macro unit, t*
 *his entry

15          type is equivalent to DW.MACRO.import.


16          These entry types are aimed at sharing duplicate macro units between

17          .debug_macro sections from dioeerent executable or shared object ol*
 *es.


18          From within the .debug_macro section of the supplementary object ol*
 *e,

19          DW.MACRO.deone.strp and DW.MACRO.undef.strp entries refer to the

20          .debug_str section of that same supplementary ole; similarly,

21          DW.MACRO.import entries refer to the .debug_macro section of that s*
 *ame

22          supplementary ole.



23      6.3.4   Other Entries


24      1.  DW.MACRO.padding

25          The DW.MACRO.padding opcode takes two operands, a byte count and a

26          sequence of arbitrary bytes. The byte count is an unsigned unsigned*
 * LEB128

27          encoded number and does not include the size of the opcode or the b*
 *yte count

28          operand. The opcode and operands have no eoeect on the macro inform*
 *ation.


29          This permits a producer to pad the macro information with a minimum*
 * of two bytes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 177
                           Chapter 6. Other Debugging Information



 1      6.4    Call Frame Information


 2      Debuggers often need to be able to view and modify the state of any sub*
 *routine activation

 3      that is on the call stack. An activation consists of:


 4        #  A code location that is within the subroutine. This location is ei*
 *ther the place where

 5           the program stopped when the debugger got control (for example, a *
 *breakpoint), or

 6           is a place where a subroutine made a call or was interrupted by an*
 * asynchronous

 7           event (for example, a signal).


 8        #  An area of memory that is allocated on a stack called a icall fram*
 *e.j The call frame

 9           is identioed by an address on the stack. We refer to this address *
 *as the Canonical

10           Frame Address or CFA. Typically, the CFA is deoned to be the value*
 * of the stack

11           pointer at the call site in the previous frame (which may be dioee*
 *rent from its value

12           on entry to the current frame).


13        #  A set of registers that are in use by the subroutine at the code l*
 *ocation.


14      Typically, a set of registers are designated to be preserved across a c*
 *all. If a callee wishes

15      to use such a register, it saves the value that the register had at ent*
 *ry time in its call frame

16      and restores it on exit. The code that allocates space on the call fram*
 *e stack and performs

17      the save operation is called the subroutine's prologue, and the code th*
 *at performs the

18      restore operation and deallocates the frame is called its epilogue. Typ*
 *ically, the prologue

19      code is physically at the beginning of a subroutine and the epilogue co*
 *de is at the end.


20      To be able to view or modify an activation that is not on the top of th*
 *e call frame stack, the

21      debugger must virtually unwind the stack of activations until it onds t*
 *he activation of

22      interest. A debugger virtually unwinds a stack in steps. Starting with *
 *the current

23      activation it virtually restores any registers that were preserved by t*
 *he current activation

24      and computes the predecessor's CFA and code location. This has the logi*
 *cal eoeect of

25      returning from the current subroutine to its predecessor. We say that t*
 *he debugger

26      virtually unwinds the stack because the actual state of the target proc*
 *ess is unchanged.


27      The virtual unwind operation needs to know where registers are saved an*
 *d how to

28      compute the predecessor's CFA and code location. When considering an

29      architecture-independent way of encoding this information one has to co*
 *nsider a number

30      of special things:


31        #  Prologue and epilogue code is not always in distinct blocks at the*
 * beginning and

32           end of a subroutine. It is common to duplicate the epilogue code a*
 *t the site of each

33           return from the code. Sometimes a compiler breaks up the register *
 *save/unsave

34           operations and moves them into the body of the subroutine to just *
 *where they are

35           needed.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 178
                           Chapter 6. Other Debugging Information



 1        #  Compilers use dioeerent ways to manage the call frame. Sometimes t*
 *hey use a frame

 2           pointer register, sometimes not.


 3        #  The algorithm to compute CFA changes as you progress through the p*
 *rologue and

 4           epilogue code. (By deonition, the CFA value does not change.)


 5        #  Some subroutines have no call frame.


 6        #  Sometimes a register is saved in another register that by conventi*
 *on does not need

 7           to be saved.


 8        #  Some architectures have special instructions that perform some or *
 *all of the register

 9           management in one instruction, leaving special information on the *
 *stack that

10           indicates how registers are saved.


11        #  Some architectures treat return address values specially. For exam*
 *ple, in one

12           architecture, the call instruction guarantees that the low order t*
 *wo bits will be zero

13           and the return instruction ignores those bits. This leaves two bit*
 *s of storage that

14           are available to other uses that must be treated specially.



15      6.4.1   Structure of Call Frame Information


16      DWARF supports virtual unwinding by deoning an architecture independent

17      basis for recording how subprograms save and restore registers during t*
 *heir

18      lifetimes. This basis must be augmented on some machines with specioc

19      information that is deoned by an architecture specioc ABI authoring com*
 *mittee,

20      a hardware vendor, or a compiler producer. The body deoning a specioc

21      augmentation is referred to below as the iaugmenter.j


22      Abstractly, this mechanism describes a very large table that has the fo*
 *llowing

23      structure:


24               LOC CFA R0 R1 ... RN

25               L0

26               L1

27               ...

28               LN


29      The orst column indicates an address for every location that contains c*
 *ode in a

30      program. (In shared object oles, this is an object-relative ooeset.) Th*
 *e remaining

31      columns contain virtual unwinding rules that are associated with the in*
 *dicated

32      location.


33      The CFA column deones the rule which computes the Canonical Frame Addre*
 *ss

34      value; the rule may indicate either a register and a signed ooeset that*
 * are added

35      together, or a DWARF expression that is evaluated.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 179
                           Chapter 6. Other Debugging Information



 1      The remaining columns are labelled by register number. This includes so*
 *me

 2      registers that have special designation on some architectures such as t*
 *he PC and

 3      the stack pointer register. (The actual mapping of registers for a part*
 *icular

 4      architecture is deoned by the augmenter.) The register columns contain *
 *rules that

 5      describe whether a given register has been saved and the rule to ond th*
 *e value

 6      for the register in the previous frame.


 7      The register rules are:



              undeoned           A register that has this rule has no recoverab*
 *le

                                 value in the previous frame. (By convention, it

                                 is not preserved by a callee.)

              same value         This register has not been modioed from the

                                 previous frame. (By convention, it is preserved

                                 by the callee, but the callee has not modioed *
 *it.)

              ooeset(N)          The previous value of this register is saved at

                                 the address CFA+N where CFA is the current

                                 CFA value and N is a signed ooeset.

              val.ooeset(N)      The previous value of this register is the val*
 *ue

                                 CFA+N where CFA is the current CFA value

                                 and N is a signed ooeset.

              register(R)        The previous value of this register is stored *
 *in

                                 another register numbered R.

              expression(E)      The previous value of this register is located*
 * at

                                 the address produced by executing the DWARF

                                 expression E (see Section 2.5 on page 26).

              val.expression(E)  The previous value of this register is the val*
 *ue

                                 produced by executing the DWARF expression

                                 E (see Section 2.5 on page 26).

              architectural      The rule is deoned externally to this

                                 speciocation by the augmenter.



 8      This table would be extremely large if actually constructed as describe*
 *d. Most of the

 9      entries at any point in the table are identical to the ones above them.*
 * The whole table can

10      be represented quite compactly by recording just the dioeerences starti*
 *ng at the beginning

11      address of each subroutine in the program.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 180
                           Chapter 6. Other Debugging Information



 1      The virtual unwind information is encoded in a self-contained section c*
 *alled

 2      .debug_frame. Entries in a .debug_frame section are aligned on a multip*
 *le of the

 3      address size relative to the start of the section and come in two forms*
 *: a Common

 4      Information Entry (CIE) and a Frame Description Entry (FDE).


 5      If the range of code addresses for a function is not contiguous, there *
 *may be multiple CIEs

 6      and FDEs corresponding to the parts of that function.


 7      A Common Information Entry holds information that is shared among many

 8      Frame Description Entries. There is at least one CIE in every non-empty

 9      .debug_frame section. A CIE contains the following oelds, in order:


10      1.  length (initial length)

11          A constant that gives the number of bytes of the CIE structure, not*
 * including

12          the length oeld itself (see Section 7.2.2 on page 191). The size of*
 * the length

13          oeld plus the value of length must be an integral multiple of the a*
 *ddress size.


14      2.  CIE_id (4 or 8 bytes, see Section 7.4 on page 203)

15          A constant that is used to distinguish CIEs from FDEs.


16      3.  version (ubyte)

17          A version number (see Section 7.24 on page 250). This number is spe*
 *cioc to

18          the call frame information and is independent of the DWARF version *
 *number.


19      4.  augmentation (sequence of UTF-8 characters)

20          A null-terminated UTF-8 string that identioes the augmentation to t*
 *his CIE or

21          to the FDEs that use it. If a reader encounters an augmentation str*
 *ing that is

22          unexpected, then only the following oelds can be read:


23            # CIE: length, CIE_id, version, augmentation


24            # FDE: length, CIE_pointer, initial_location, address_range


25          If there is no augmentation, this value is a zero byte.


26          The augmentation string allows users to indicate that there is addi*
 *tional

27          target-specioc information in the CIE or FDE which is needed to vir*
 *tually unwind a

28          stack frame. For example, this might be information about dynamical*
 *ly allocated data

29          which needs to be freed on exit from the routine.


30          Because the .debug_frame section is useful independently of any .de*
 *bug_info

31          section, the augmentation string always uses UTF-8 encoding.


32      5.  address_size (ubyte)

33          The size of a target address in bytes in this CIE and any FDEs that*
 * use it. If a

34          compilation unit exists for this frame, its address size must match*
 * the address

35          size here.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 181
                           Chapter 6. Other Debugging Information



 1      6.  reserved 3 (ubyte, MBZ)


 2      7.  code_alignment_factor (unsigned LEB128)

 3          A constant that is factored out of all advance location instruction*
 *s (see Section

 4          6.4.2.1 on the next page). The resulting value is

 5          operand * code_alignment_factor.


 6      8.  data_alignment_factor (signed LEB128)

 7          A constant that is factored out of certain ooeset instructions (see*
 * Sections

 8          6.4.2.2 on page 184 and 6.4.2.3 on page 185). The resulting value is

 9          operand * data_alignment_factor.


10      9.  return_address_register (unsigned LEB128)

11          An unsigned LEB128 constant that indicates which column in the rule*
 * table

12          represents the return address of the function. Note that this colum*
 *n might not

13          correspond to an actual machine register.


14    10.   initial_instructions (array of ubyte)

15          A sequence of rules that are interpreted to create the initial sett*
 *ing of each

16          column in the table.


17          The default rule for all columns before interpretation of the initi*
 *al instructions

18          is the undeoned rule. However, an ABI authoring body or a compilati*
 *on

19          system authoring body may specify an alternate default value for an*
 *y or all

20          columns.


21    11.   padding (array of ubyte)

22          Enough DW.CFA.nop instructions to make the size of this entry match*
 * the

23          length value above.


24      An FDE contains the following oelds, in order:


25      1.  length (initial length)

26          A constant that gives the number of bytes of the header and instruc*
 *tion

27          stream for this function, not including the length oeld itself (see*
 * Section 7.2.2

28          on page 191). The size of the length oeld plus the value of length *
 *must be an

29          integral multiple of the address size.


30      2.  CIE_pointer (4 or 8 bytes, see Section 7.4 on page 203)

31          A constant ooeset into the .debug_frame section that denotes the CI*
 *E that is

32          associated with this FDE.
        _______________________________
           3This allows backward compatible support of the deprecated segment_s*
 *elector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 182
                           Chapter 6. Other Debugging Information



 1      3.  initial_location (target address)

 2          The address of the orst location associated with this table entry.


 3      4.  address_range (target address)

 4          The number of bytes of program instructions described by this entry.


 5      5.  instructions (array of ubyte)

 6          A sequence of table deoning instructions that are described in Sect*
 *ion 6.4.2.


 7      6.  padding (array of ubyte)

 8          Enough DW.CFA.nop instructions to make the size of this entry match*
 * the

 9          length value above.



10      6.4.2   Call Frame Instructions


11      Each call frame instruction is deoned to take 0 or more operands. Some *
 *of the

12      operands may be encoded as part of the opcode (see Section 7.24 on page*
 * 250).

13      The instructions are deoned in the following sections.


14      Some call frame instructions have operands that are encoded as DWARF

15      expressions (see Section 2.5.1 on page 27). The following DWARF operato*
 *rs

16      cannot be used in such operands:


17        #  DW.OP.addrx, DW.OP.call2, DW.OP.call4, DW.OP.call.ref,

18           DW.OP.const.type, DW.OP.constx, DW.OP.convert,

19           DW.OP.deref.type, DW.OP.regval.type and DW.OP.reinterpret

20           operators are not allowed in an operand of these instructions beca*
 *use the

21           call frame information must not depend on other debug sections.


22        #  DW.OP.push.object.address is not meaningful in an operand of these

23           instructions because there is no object context to provide a value*
 * to push.


24        #  DW.OP.call.frame.cfa is not meaningful in an operand of these

25           instructions because its use would be circular.


26      Call frame instructions to which these restrictions apply include

27      DW.CFA.def.cfa.expression, DW.CFA.expression and DW.CFA.val.expression.



28      6.4.2.1 Row Creation Instructions


29      1.  DW.CFA.set.loc

30          The DW.CFA.set.loc instruction takes a single operand that represen*
 *ts a

31          target address. The required action is to create a new table row us*
 *ing the

32          specioed address as the location. All other values in the new row a*
 *re initially

33          identical to the current row. The new location value is always grea*
 *ter than the

34          current one.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 183
                           Chapter 6. Other Debugging Information



 1      2.  DW.CFA.advance.loc

 2          The DW.CFA.advance.loc instruction takes a single operand (encoded *
 *with

 3          the opcode) that represents a constant delta. The required action i*
 *s to create a

 4          new table row with a location value that is computed by taking the *
 *current

 5          entry's location value and adding the value of delta * code_alignme*
 *nt_factor.

 6          All other values in the new row are initially identical to the curr*
 *ent row


 7      3.  DW.CFA.advance.loc1

 8          The DW.CFA.advance.loc1 instruction takes a single ubyte operand th*
 *at

 9          represents a constant delta. This instruction is identical to

10          DW.CFA.advance.loc except for the encoding and size of the delta op*
 *erand.


11      4.  DW.CFA.advance.loc2

12          The DW.CFA.advance.loc2 instruction takes a single uhalf operand th*
 *at

13          represents a constant delta. This instruction is identical to

14          DW.CFA.advance.loc except for the encoding and size of the delta op*
 *erand.


15      5.  DW.CFA.advance.loc4

16          The DW.CFA.advance.loc4 instruction takes a single uword operand th*
 *at

17          represents a constant delta. This instruction is identical to

18          DW.CFA.advance.loc except for the encoding and size of the delta op*
 *erand.



19      6.4.2.2 CFA Deonition Instructions


20      1.  DW.CFA.def.cfa

21          The DW.CFA.def.cfa instruction takes two unsigned LEB128 operands

22          representing a register number and a (non-factored) ooeset. The req*
 *uired

23          action is to deone the current CFA rule to use the provided registe*
 *r and ooeset.


24      2.  DW.CFA.def.cfa.sf

25          The DW.CFA.def.cfa.sf instruction takes two operands: an unsigned

26          LEB128 value representing a register number and a signed LEB128 fac*
 *tored

27          ooeset. This instruction is identical to DW.CFA.def.cfa except that*
 * the second

28          operand is signed and factored. The resulting ooeset is

29          factored.ooeset * data_alignment_factor.


30      3.  DW.CFA.def.cfa.register

31          The DW.CFA.def.cfa.register instruction takes a single unsigned LEB*
 *128

32          operand representing a register number. The required action is to d*
 *eone the

33          current CFA rule to use the provided register (but to keep the old *
 *ooeset). This

34          operation is valid only if the current CFA rule is deoned to use a *
 *register and

35          ooeset.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 184
                           Chapter 6. Other Debugging Information



 1      4.  DW.CFA.def.cfa.ooeset

 2          The DW.CFA.def.cfa.ooeset instruction takes a single unsigned LEB128

 3          operand representing a (non-factored) ooeset. The required action i*
 *s to deone

 4          the current CFA rule to use the provided ooeset (but to keep the ol*
 *d register).

 5          This operation is valid only if the current CFA rule is deoned to u*
 *se a register

 6          and ooeset.


 7      5.  DW.CFA.def.cfa.ooeset.sf

 8          The DW.CFA.def.cfa.ooeset.sf instruction takes a signed LEB128 oper*
 *and

 9          representing a factored ooeset. This instruction is identical to

10          DW.CFA.def.cfa.ooeset except that the operand is signed and factore*
 *d. The

11          resulting ooeset is factored.ooeset * data_alignment_factor. This o*
 *peration is

12          valid only if the current CFA rule is deoned to use a register and *
 *ooeset.


13      6.  DW.CFA.def.cfa.expression

14          The DW.CFA.def.cfa.expression instruction takes a single operand en*
 *coded

15          as an exprval value representing a DWARF expression. The required a*
 *ction is

16          to establish that expression as the means by which the current CFA *
 *is

17          computed.


18          See Section 6.4.2 on page 183 regarding restrictions on the DWARF e*
 *xpression

19          operators that can be used.



20      6.4.2.3 Register Rule Instructions


21      1.  DW.CFA.undeoned

22          The DW.CFA.undeoned instruction takes a single unsigned LEB128 oper*
 *and

23          that represents a register number. The required action is to set th*
 *e rule for the

24          specioed register to iundeoned.j


25      2.  DW.CFA.same.value

26          The DW.CFA.same.value instruction takes a single unsigned LEB128

27          operand that represents a register number. The required action is t*
 *o set the

28          rule for the specioed register to isame value.j


29      3.  DW.CFA.ooeset

30          The DW.CFA.ooeset instruction takes two operands: a register number

31          (encoded with the opcode) and an unsigned LEB128 constant represent*
 *ing a

32          factored ooeset. The required action is to change the rule for the *
 *register

33          indicated by the register number to be an ooeset(N) rule where the *
 *value of N

34          is factored.ooeset * data_alignment_factor.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 185
                           Chapter 6. Other Debugging Information



 1      4.  DW.CFA.ooeset.extended

 2          The DW.CFA.ooeset.extended instruction takes two unsigned LEB128

 3          operands representing a register number and a factored ooeset. This

 4          instruction is identical to DW.CFA.ooeset except for the encoding a*
 *nd size of

 5          the register operand.


 6      5.  DW.CFA.ooeset.extended.sf

 7          The DW.CFA.ooeset.extended.sf instruction takes two operands: an

 8          unsigned LEB128 value representing a register number and a signed L*
 *EB128

 9          factored ooeset. This instruction is identical to DW.CFA.ooeset.ext*
 *ended

10          except that the second operand is signed and factored. The resultin*
 *g ooeset is

11          factored.ooeset * data_alignment_factor.


12      6.  DW.CFA.val.ooeset

13          The DW.CFA.val.ooeset instruction takes two unsigned LEB128 operands

14          representing a register number and a factored ooeset. The required *
 *action is to

15          change the rule for the register indicated by the register number t*
 *o be a

16          val.ooeset(N) rule where the value of N is

17          factored.ooeset * data_alignment_factor.


18      7.  DW.CFA.val.ooeset.sf

19          The DW.CFA.val.ooeset.sf instruction takes two operands: an unsigned

20          LEB128 value representing a register number and a signed LEB128 fac*
 *tored

21          ooeset. This instruction is identical to DW.CFA.val.ooeset except t*
 *hat the

22          second operand is signed and factored. The resulting ooeset is

23          factored.ooeset * data_alignment_factor.


24      8.  DW.CFA.register

25          The DW.CFA.register instruction takes two unsigned LEB128 operands

26          representing register numbers. The required action is to set the ru*
 *le for the

27          orst register to be register(R) where R is the second register.


28      9.  DW.CFA.expression

29          The DW.CFA.expression instruction takes two operands: an unsigned

30          LEB128 value representing a register number, and an exprval value

31          representing a DWARF expression. The required action is to change t*
 *he rule

32          for the register indicated by the register number to be an expressi*
 *on(E) rule

33          where E is the DWARF expression. That is, the DWARF expression comp*
 *utes

34          the address. The value of the CFA is pushed on the DWARF evaluation*
 * stack

35          prior to execution of the DWARF expression.


36          See Section 6.4.2 on page 183 regarding restrictions on the DWARF e*
 *xpression

37          operators that can be used.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 186
                           Chapter 6. Other Debugging Information



 1    10.   DW.CFA.val.expression

 2          The DW.CFA.val.expression instruction takes two operands: an unsign*
 *ed

 3          LEB128 value representing a register number, and an exprval value

 4          representing a DWARF expression. The required action is to change t*
 *he rule

 5          for the register indicated by the register number to be a val.expre*
 *ssion(E)

 6          rule where E is the DWARF expression. That is, the DWARF expression

 7          computes the value of the given register. The value of the CFA is p*
 *ushed on

 8          the DWARF evaluation stack prior to execution of the DWARF expressi*
 *on.


 9          See Section 6.4.2 on page 183 regarding restrictions on the DWARF e*
 *xpression

10          operators that can be used.


11    11.   DW.CFA.restore

12          The DW.CFA.restore instruction takes a single operand (encoded with*
 * the

13          opcode) that represents a register number. The required action is t*
 *o change

14          the rule for the indicated register to the rule assigned it by the

15          initial_instructions in the CIE.


16    12.   DW.CFA.restore.extended

17          The DW.CFA.restore.extended instruction takes a single unsigned LEB*
 *128

18          operand that represents a register number. This instruction is iden*
 *tical to

19          DW.CFA.restore except for the encoding and size of the register ope*
 *rand.



20      6.4.2.4 Row State Instructions


21      The next two instructions provide the ability to stack and retrieve com*
 *plete register

22      states. They may be useful, for example, for a compiler that moves epil*
 *ogue code into the

23      body of a function.


24      1.  DW.CFA.remember.state

25          The DW.CFA.remember.state instruction takes no operands. The requir*
 *ed

26          action is to push the set of rules for the current CFA and every re*
 *gister onto

27          an implicit stack.


28      2.  DW.CFA.restore.state

29          The DW.CFA.restore.state instruction takes no operands. The required

30          action is to pop the set of rules ooe the implicit stack and place *
 *them in the

31          current row.



32      6.4.2.5 Padding Instruction


33      1.  DW.CFA.nop

34          The DW.CFA.nop instruction has no operands and no required actions.*
 * It is

35          used as padding to make a CIE or FDE an appropriate size.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 187
                           Chapter 6. Other Debugging Information



 1      6.4.3   Call Frame Instruction Usage


 2      To determine the virtual unwind rule set for a given location (L1), sea*
 *rch through the

 3      FDE headers looking at the initial_location and address_range values to*
 * see if L1

 4      is contained in the FDE. If so, then:

 5      1.  Initialize a register set by reading the initial_instructions oeld *
 *of the associated

 6          CIE. Set L2 to the value of the initial_location oeld from the FDE *
 *header.

 7      2.  Read and process the FDE's instruction sequence until a DW.CFA.adva*
 *nce.loc,

 8          DW.CFA.set.loc, or the end of the instruction stream is encountered.

 9      3.  If a DW.CFA.advance.loc or DW.CFA.set.loc instruction is encountere*
 *d, then

10          compute a new location value (L2). If L1 # L2 then process the inst*
 *ruction and go

11          back to step 2.

12      4.  The end of the instruction stream can be thought of as a DW.CFA.set*
 *.loc

13          (initial_location + address_range) instruction. Note that the FDE is

14          ill-formed if L2 is less than L1.

15      The rules in the register set now apply to location L1.

16      For an example, see Appendix D.6 on page 345.



17      6.4.4   Call Frame Calling Address


18      When virtually unwinding frames, consumers frequently wish to obtain th*
 *e address of

19      the instruction which called a subroutine. This information is not alwa*
 *ys provided.

20      Typically, however, one of the registers in the virtual unwind table is*
 * the Return Address.

21      If a Return Address register is deoned in the virtual unwind table, and*
 * its rule is

22      undeoned (for example, by DW.CFA.undeoned), then there is no return add*
 *ress

23      and no call address, and the virtual unwind of stack activations is com*
 *plete.

24      In most cases the return address is in the same context as the calling *
 *address, but that

25      need not be the case, especially if the producer knows in some way the *
 *call never will

26      return. The context of the 'return address' might be on a dioeerent lin*
 *e, in a dioeerent

27      lexical block, or past the end of the calling subroutine. If a consumer*
 * were to assume that

28      it was in the same context as the calling address, the virtual unwind m*
 *ight fail.

29      For architectures with constant-length instructions where the return ad*
 *dress

30      immediately follows the call instruction, a simple solution is to subtr*
 *act the length of an

31      instruction from the return address to obtain the calling instruction. *
 *For architectures

32      with variable-length instructions (for example, x86), this is not possi*
 *ble. However,

33      subtracting 1 from the return address, although not guaranteed to provi*
 *de the exact

34      calling address, generally will produce an address within the same cont*
 *ext as the calling

35      address, and that usually is suOEcient.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 188
                   Chapter 6. Other Debugging Information



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 189




 1      Chapter 7



 2      Data Representation



 3      This section describes the binary representation of the debugging infor*
 *mation

 4      entry itself, of the attribute types and of other fundamental elements *
 *described

 5      above.



 6      7.1    Extensibility


 7      To reserve a portion of the DWARF name space and ranges of enumeration

 8      values for use for producer-specioc extensions, special labels are rese*
 *rved for tag

 9      names, attribute names, base type encodings, location operations, langu*
 *age

10      names, calling conventions and call frame instructions.


11      The labels denoting the beginning and end of the reserved value range f*
 *or

12      producer-specioc extensions consist of the appropriate preox (DW.AT,

13      DW.ATE, DW.CC, DW.CFA, DW.END, DW.IDX, DW.LLE, DW.LNAME,

14      DW.LNCT, DW.LNE, DW.MACRO, DW.OP, DW.RLE, DW.TAG, DW.UT)

15      followed by .lo.user or .hi.user. Values in the range between preox.lo.*
 *user and

16      preox.hi.user inclusive, are reserved for producer-specioc extensions. *
 *Producers

17      may use values in this range without conAEicting with current or future

18      system-deoned values. All other values are reserved for use by the syst*
 *em.


19      For example, for debugging information entry tags, the special labels a*
 *re

20      DW.TAG.lo.user and DW.TAG.hi.user.


21      There may also be codes for producer-specioc extensions between the num*
 *ber of standard

22      line number opcodes and the orst special line number opcode. However, s*
 *ince the number

23      of standard opcodes varies with the DWARF version, the range for extens*
 *ions is also

24      version dependent. Thus, DW.LNS.lo.user and DW.LNS.hi.user symbols are *
 *not

25      deoned.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 190
                                Chapter 7. Data Representation



 1      Producer-deoned tags, attributes, base type encodings, location atoms, *
 *language

 2      names, line number actions, calling conventions and call frame instruct*
 *ions, use

 3      the form preox.producer.id.name   by historical convention, where produ*
 *cer.id is

 4      some identifying character sequence chosen so as to avoid conAEicts wit*
 *h other

 5      producers. While this convention is not strictly necessary, it is still

 6      recommended.


 7      To ensure that extensions added by one producer may be safely ignored by

 8      consumers that do not understand those extensions, the following rules *
 *must be

 9      followed:


10      1.  New attributes are added in such a way that a debugger may recogniz*
 *e the

11          format of a new attribute value without knowing the content of that*
 * attribute

12          value.


13      2.  The semantics of any new attributes do not alter the semantics of p*
 *reviously

14          existing attributes.


15      3.  The semantics of any new tags do not conAEict with the semantics of

16          previously existing tags.


17      4.  New forms of attribute value are not added.



18      7.2    Reserved Values



19      7.2.1   Error Values


20      As a convenience for consumers of DWARF information, the value 0 is res*
 *erved

21      in the encodings for attribute names, attribute forms, base type encodi*
 *ngs,

22      location operations, languages, line number program opcodes, macro

23      information entries and tag names to represent an error condition or un*
 *known

24      value. DWARF does not specify names for these reserved values, because *
 *they

25      do not represent valid encodings for the given type and do not appear in

26      DWARF debugging information.



27      7.2.2   Initial Length Values


28      An initial length oeld is one of the oelds that occur at the beginning *
 *of those

29      DWARF sections that have a header (.debug_aranges, .debug_info,

30      .debug_line, .debug_loclists, .debug_names and .debug_rnglists) or the

31      length oeld that occurs at the beginning of the CIE and FDE structures *
 *in the

32      .debug_frame section.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 191
                                Chapter 7. Data Representation



 1      In an initial length oeld, the values 0xfffffff0 through 0xffffffff are*
 * reserved

 2      by DWARF to indicate some form of extension relative to DWARF Version 2;

 3      such values must not be interpreted as a length oeld. The use of one su*
 *ch value,

 4      0xffffffff, is deoned in Section 7.4 on page 203; the use of the other *
 *values is

 5      reserved for possible future extensions.



 6      7.3    Relocatable, Split, Executable, Shared, Package


 7             and Supplementary Object Files



 8      7.3.1   Relocatable Object Files


 9      A DWARF producer (for example, a compiler) typically generates its debu*
 *gging

10      information as part of a relocatable object ole. Relocatable object ole*
 *s are then

11      combined by a linker to form an executable ole. During the linking proc*
 *ess, the

12      linker resolves (binds) symbolic references between the various object *
 *oles, and

13      relocates the contents of each object ole into a combined virtual addre*
 *ss space.


14      The DWARF debugging information is placed in several sections (see Appe*
 *ndix

15      B on page 286), and requires an object ole format capable of representi*
 *ng these

16      separate sections. There are symbolic references between these sections*
 *, and also

17      between the debugging information sections and the other sections that *
 *contain

18      the text and data of the program itself. Many of these references requi*
 *re

19      relocation, and the producer must emit the relocation information appro*
 *priate to

20      the object ole format and the target processor architecture. These refe*
 *rences

21      include the following:


22        #  The compilation unit header (see Section 7.5.1 on page 207) in the

23           .debug_info section contains a reference to the .debug_abbrev tabl*
 *e. This

24           reference requires a relocation so that after linking, it refers t*
 *o that

25           contribution to the combined .debug_abbrev section in the executab*
 *le ole.


26        #  Debugging information entries may have attributes with the form

27           DW.FORM.addr (see Section 7.5.4 on page 216). These attributes rep*
 *resent

28           locations within the virtual address space of the program, and req*
 *uire

29           relocation.


30        #  A DWARF expression may contain a DW.OP.addr (see Section 2.5.1.1 on

31           page 27) which contains a location within the virtual address spac*
 *e of the

32           program, and require relocation.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 192
                                Chapter 7. Data Representation



 1        #  Debugging information entries may have attributes with the form

 2           DW.FORM.sec.ooeset (see Section 7.5.4 on page 216). These attribut*
 *es refer

 3           to debugging information in other debugging information sections w*
 *ithin

 4           the object ole, and must be relocated during the linking process.


 5        #  Debugging information entries may have attributes with the form

 6           DW.FORM.ref.addr (see Section 7.5.4 on page 216). These attributes*
 * refer

 7           to debugging information entries that may be outside the current

 8           compilation unit. These values require both symbolic binding and

 9           relocation.


10        #  Debugging information entries may have attributes with the form

11           DW.FORM.strp or DW.FORM.strp8 (see Section 7.5.4 on page 216).

12           These attributes refer to strings in the .debug_str section. These*
 * values

13           require relocation.


14        #  The .debug_macro section may have DW.MACRO.deone.strp and

15           DW.MACRO.undef.strp entries (see Section 6.3.2.1 on page 174). The*
 *se

16           entries refer to strings in the .debug_str section. These values r*
 *equire

17           relocation.


18        #  Entries in the .debug_addr and .debug_aranges sections may contain

19           references to locations within the virtual address space of the pr*
 *ogram, and

20           thus require relocation.


21        #  Entries in the .debug_loclists and .debug_rnglists sections may co*
 *ntain

22           references to locations within the virtual address space of the pr*
 *ogram

23           depending on whether certain kinds of location or range list entri*
 *es are

24           used, and thus require relocation.


25        #  In the .debug_line section, the operand of the DW.LNE.set.address

26           opcode is a reference to a location within the virtual address spa*
 *ce of the

27           program, and requires relocation.


28        #  The .debug_str_offsets section contains a list of string ooesets, *
 *each of

29           which is an ooeset of a string in the .debug_str section. Each of *
 *these ooesets

30           requires relocation. Depending on the implementation, these reloca*
 *tions

31           may be implicit (that is, the producer may not need to emit any ex*
 *plicit

32           relocation information for these ooesets).


33        #  The debug_info_offset oeld in the .debug_aranges header and the li*
 *st of

34           compilation units following the .debug_names header contain refere*
 *nces to

35           the .debug_info section. These references require relocation so th*
 *at after

36           linking they refer to the correct contribution in the combined .de*
 *bug_info

37           section in the executable ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 193
                                Chapter 7. Data Representation



 1        #  Frame descriptor entries in the .debug_frame section (see Section *
 *6.4.1 on

 2           page 179) contain an initial_location oeld value within the virtual

 3           address space of the program and require relocation.


 4      Note that operands of classes constant and AEag do not require relocati*
 *on. Attribute

 5      operands that use forms DW.FORM.string, DW.FORM.ref1, DW.FORM.ref2,

 6      DW.FORM.ref4, DW.FORM.ref8, or DW.FORM.ref.udata also do not need

 7      relocation.



 8      7.3.2   Split DWARF Object Files


 9      A DWARF producer may partition the debugging information such that the

10      majority of the debugging information can remain in individual object o*
 *les

11      without being processed by the linker.


12      This reduces link time by reducing the amount of information the linker*
 * must process.



13      7.3.2.1 First Partition (with Skeleton Unit)


14      The orst partition contains debugging information that must still be pr*
 *ocessed by

15      the linker, and includes the following:


16        #  The line number tables, frame tables, and accelerated access table*
 *s, in the

17           usual sections: .debug_line, .debug_line_str, .debug_frame,

18           .debug_names and .debug_aranges, respectively.


19        #  An address table, in the .debug_addr section. This table contains *
 *all

20           addresses and constants that require link-time relocation, and ite*
 *ms in the

21           table can be referenced indirectly from the debugging information *
 *via the

22           DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

23           DW.FORM.addrx3 and DW.FORM.addrx4 forms, by the DW.OP.addrx

24           and DW.OP.constx operators, and by certain of the DW_LLE_* locatio*
 *n list

25           and DW_RLE_* range list entries.


26        #  A skeleton compilation unit, as described in Section 3.1.2 on page*
 * 69, in the

27           .debug_info section.


28        #  An abbreviations table for the skeleton compilation unit, in the

29           .debug_abbrev section used by the .debug_info section.


30        #  A string table, in the .debug_str section. The string table is nec*
 *essary only

31           if the skeleton compilation unit uses one of the indirect string f*
 *orms

32           (DW.FORM.strp, DW.FORM.strp8, DW.FORM.strx, DW.FORM.strx1,

33           DW.FORM.strx2, DW.FORM.strx3 or DW.FORM.strx4).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 194
                                Chapter 7. Data Representation



 1        #  A string ooesets table, in the .debug_str_offsets section for stri*
 *ngs in the

 2           .debug_str section. The string ooesets table is necessary only if *
 *the skeleton

 3           compilation unit uses one of the indexed string forms (DW.FORM.str*
 *x,

 4           DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3,

 5           DW.FORM.strx4).


 6      The attributes contained in the skeleton compilation unit can be used b*
 *y a

 7      DWARF consumer to ond the DWARF object ole that contains the second

 8      partition.



 9      7.3.2.2 Second Partition (Unlinked or in a .dwo File)


10      The second partition contains the debugging information that does not n*
 *eed to

11      be processed by the linker. These sections may be left in the object ol*
 *es and

12      ignored by the linker (that is, not combined and copied to the executab*
 *le object

13      ole), or they may be placed by the producer in a separate DWARF object *
 *ole. This

14      partition includes the following:


15        #  The full compilation unit, in the .debug_info.dwo section.


16           Attributes contained in the full compilation unit may refer to mac*
 *hine

17           addresses indirectly using one of the DW.FORM.addrx,

18           DW.FORM.addrx1, DW.FORM.addrx2, DW.FORM.addrx3 or

19           DW.FORM.addrx4 forms, which access the table of addresses specioed*
 * by

20           the DW.AT.addr.base attribute in the associated skeleton unit. Loc*
 *ation

21           descriptions may similarly do so using the DW.OP.addrx and

22           DW.OP.constx operations.


23        #  Separate type units, in the .debug_info.dwo section.


24        #  Abbreviations table(s) for the compilation unit and type units, in*
 * the

25           .debug_abbrev.dwo section used by the .debug_info.dwo section.


26        #  Value lists and location lists, in the .debug_loclists.dwo section.


27        #  Range lists, in the .debug_rnglists.dwo section.


28        #  A specialized line number table (for the type units, and macro inf*
 *ormation),

29           in the .debug_line.dwo section.


30           This table contains only the directory and olename lists needed to*
 * interpret

31           DW.AT.decl.ole attributes in the debugging information entries and

32           DW.MACRO.start.ole entries in the macro information.


33        #  Macro information, in the .debug_macro.dwo section.


34        #  A string table, in the .debug_str.dwo section.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 195
                                Chapter 7. Data Representation



 1        #  A string ooesets table, in the .debug_str_offsets.dwo section for *
 *the strings

 2           in the .debug_str.dwo section.


 3           Attributes that refer to the .debug_str.dwo string table do so only

 4           indirectly through the .debug_str_offsets.dwo section using the fo*
 *rms

 5           DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3

 6           or DW.FORM.strx4, or the macro entries DW.MACRO.deone.strx or

 7           DW.MACRO.undef.strx. Direct reference (for example, using forms

 8           DW.FORM.strp or DW.FORM.strp8, or the macro entries

 9           DW.MACRO.deone.strp or DW.MACRO.undef.strp) is not allowed.


10      Except where noted otherwise, all references in this document to a debu*
 *gging

11      information section (for example, .debug_info), apply also to the corre*
 *sponding

12      split DWARF section (for example, .debug_info.dwo).


13      Split DWARF object oles do not get linked with any other oles, therefore

14      references between sections must not make use of normal object ole relo*
 *cation

15      information. As a result, symbolic references within or between section*
 *s (such as

16      from using DW.FORM.ref.addr and DW.OP.call.ref) are not possible. Split

17      DWARF object oles contain at most one compilation unit.



18      7.3.3   Executable Objects and .dwo Files


19      The relocated addresses in the debugging information for an executable *
 *object

20      are virtual addresses.


21      The sections containing the debugging information are typically not loa*
 *ded as

22      part of the memory image of the program (in ELF terminology, the sectio*
 *ns are

23      not "allocatable" and are not part of a loadable segment). Therefore, t*
 *he

24      debugging information sections described in this document are typically*
 * linked

25      as if they were each to be loaded at virtual address 0. Similarly, debu*
 *gging

26      information in a .dwo ole is not loaded in the memory image. The absenc*
 *e (or

27      non-use) of relocation information in a .dwo ole means that sections de*
 *scribed in

28      this document are eoeectively linked as if they were each to be loaded *
 *at virtual

29      address 0. In both cases, references within the debugging information a*
 *lways

30      implicitly indicate which section a particular ooeset refers to. (For e*
 *xample, a

31      reference of form DW.FORM.sec.ooeset may refer to one of several sectio*
 *ns,

32      depending on the class allowed by a particular attribute of a debugging

33      information entry, as shown in Table 7.5 on page 216.)



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 196
                                Chapter 7. Data Representation



 1      7.3.4   Shared Object Files


 2      The relocated addresses in the debugging information for a shared objec*
 *t ole are

 3      ooesets relative to the start of the lowest region of memory loaded fro*
 *m that

 4      shared object ole.


 5      This requirement makes the debugging information for shared object oles*
 * position

 6      independent. Virtual addresses in a shared object ole may be calculated*
 * by adding the

 7      ooeset to the base address at which the object ole was attached. This o*
 *oeset is available in

 8      the run-time linker's data structures.


 9      As with executable objects, the sections containing debugging informati*
 *on are

10      typically not loaded as part of the memory image of the shared object, *
 *and are

11      typically linked as if they were each to be loaded at virtual address 0.



12      7.3.5   DWARF Package Files


13      Using split DWARF object oles allows the developer to compile, link, an*
 *d debug an

14      application quickly with less link-time overhead, but a more convenient*
 * format is needed

15      for saving the debug information for later debugging of a deployed appl*
 *ication. A

16      DWARF package ole can be used to collect the debugging information from*
 * the object (or

17      separate DWARF object) oles produced during the compilation of an appli*
 *cation.


18      The package ole is typically placed in the same directory as the applic*
 *ation, and is given

19      the same name with a i.dwpj extension.


20      A DWARF package ole is itself an object ole, using the same object ole *
 *format

21      (including byte order) as the corresponding application binary. It cont*
 *ains a ole

22      header, a section table, a number of DWARF debug information sections, *
 *and

23      two index sections.


24      Each DWARF package ole contains no more than one of each of the followi*
 *ng

25      sections, copied from a set of object or DWARF object oles, and combine*
 *d,

26      section by section:


27           .debug_info.dwo

28           .debug_abbrev.dwo

29           .debug_line.dwo

30           .debug_loclists.dwo

31           .debug_rnglists.dwo

32           .debug_str_offsets.dwo

33           .debug_str.dwo

34           .debug_macro.dwo



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 197
                                Chapter 7. Data Representation



 1      The string table section in .debug_str.dwo contains all the strings ref*
 *erenced

 2      from DWARF attributes using any of the forms DW.FORM.strx,

 3      DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or DW.FORM.strx4.

 4      Any attribute in a compilation unit or a type unit using this form refe*
 *rs to an

 5      entry in that unit's contribution to the .debug_str_offsets.dwo section*
 *, which

 6      in turn provides the ooeset of a string in the .debug_str.dwo section.


 7      The DWARF package ole also contains two index sections that provide a f*
 *ast way

 8      to locate debug information by compilation unit ID for compilation unit*
 *s, or by

 9      type signature for type units:


10          .debug_cu_index

11          .debug_tu_index



12      7.3.5.1 The Compilation Unit (CU) Index Section


13      The .debug_cu_index section is a hashed lookup table that maps a compil*
 *ation

14      unit ID to a set of contributions in the various debug information sect*
 *ions. Each

15      contribution is stored as an ooeset within its corresponding section an*
 *d a size.


16      Each compilation unit set may contain contributions from the following *
 *sections:


17           .debug_info.dwo (required)

18           .debug_abbrev.dwo (required)

19           .debug_line.dwo

20           .debug_loclists.dwo

21           .debug_rnglists.dwo

22           .debug_str_offsets.dwo

23           .debug_macro.dwo


24      Note that a compilation unit set is not able to represent .debug_macinf*
 *o information

25      from DWARF Version 4 or earlier formats.



26      7.3.5.2 The Type Unit (TU) Index Section


27      The .debug_tu_index section is a hashed lookup table that maps a type s*
 *ignature

28      to a set of ooesets in the various debug information sections. Each con*
 *tribution is

29      stored as an ooeset within its corresponding section and a size.


30      Each type unit set may contain contributions from the following section*
 *s:


31           .debug_info.dwo (required)

32           .debug_abbrev.dwo (required)

33           .debug_line.dwo

34           .debug_str_offsets.dwo



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 198
                                Chapter 7. Data Representation



 1      7.3.5.3 Format of the CU and TU Index Sections


 2      Both .debug_cu_index and .debug_tu_index index sections have the same

 3      format, and serve to map an 8-byte signature to a set of contributions *
 *to the

 4      debug sections. Each index section begins with a header, followed by a *
 *hash table

 5      of signatures, a parallel table of indexes, a table of ooesets, and a t*
 *able of sizes.

 6      The index sections are aligned at 8-byte boundaries in the DWARF packag*
 *e ole.


 7      The index section header contains the following oelds:


 8      1.  version (uhalf)

 9          A version number.  This number is specioc to the CU and TU index

10          information and is independent of the DWARF version number.


11          The version number is 6.


12      2.  offset_size_flag (uhalf)

13          If the offset_size_flag is zero, the header is for a 32-bit DWARF f*
 *ormat unit

14          index section and all ooesets and lengths are 4 bytes long; if it i*
 *s one, the

15          header is for a 64-bit DWARF format unit index section and all ooes*
 *ets and

16          lengths are 8 bytes long.


17      3.  padding (uhalf)

18          Reserved to DWARF (must be zero).


19      4.  section_count (uword)

20          The number of entries in the table of section counts that follows. *
 *For brevity,

21          the contents of this oeld is referred to as N below.


22      5.  unit_count (uword)

23          The number of compilation units or type units in the index. For bre*
 *vity, the

24          contents of this oeld is referred to as U below.


25      6.  slot_count (uword)

26          The number of slots in the hash table. For brevity, the contents of*
 * this oeld is

27          referred to as S below.


28      We assume that U and S do not exceed 232.


29      The size of the hash table, S, must be 2k such that:  2k  >  3 * U/2


30      The hash table begins at ooeset 16 in the section, and consists of an a*
 *rray of S

31      8-byte slots. Each slot contains a 64-bit signature.


32      The parallel table of indices begins immediately after the hash table (*
 *at ooeset

33      16 + 8 * Sfrom the beginning of the section), and consists of an array *
 *of S 4-byte

34      slots, corresponding 1-1 with slots in the hash table. Each entry in th*
 *e parallel

35      table contains a row index into the tables of ooesets and sizes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 199
                                Chapter 7. Data Representation



 1      Unused slots in the hash table have 0 in both the hash table entry and *
 *the parallel

 2      table entry. While 0 is a valid hash value, the row index in a used slo*
 *t will always

 3      be non-zero.


 4      Given an 8-byte compilation unit ID or type signature X, an entry in th*
 *e hash

 5      table is located as follows:


 6      1.  Deone REP (X) to be the value of X interpreted as an unsigned 64-bi*
 *t integer

 7          in the target byte order.


 8      2.  Calculate a primary hash H = REP (X) & MASK(k), where MASK(k) is a

 9          mask with the low-order k bits all set to 1.


10      3.  Calculate a secondary hash H#= (((REP (X) >> 32) & MASK(k)) | 1).


11      4.  If the hash table entry at index H matches the signature, use that *
 *entry. If the

12          hash table entry at index H is unused (all zeroes), terminate the s*
 *earch: the

13          signature is not present in the table.


14      5.  Let H = (H + H#) modulo S. Repeat at Step 4.


15      Because S > U, and H#and S are relatively prime, the search is guarante*
 *ed to

16      stop at an unused slot or ond the match.


17      The table of ooesets begins immediately following the parallel table (a*
 *t ooeset

18      16 + 12 * Sfrom the beginning of the section). This table consists of a*
 * single

19      header row containing N oelds, each a 4-byte unsigned integer, followed*
 * by U

20      data rows, each containing N unsigned integer oelds of size specioed by*
 * the

21      index header offset_size_flag oeld. The oelds in the header row provide*
 * a

22      section identioer referring to a debug section; the available section i*
 *dentioers are

23      shown in Table 7.1 following. Each data row corresponds to a specioc CU*
 * or TU

24      in the package ole. In the data rows, each oeld provides an ooeset to t*
 *he debug

25      section whose identioer appears in the corresponding oeld of the header*
 * row.

26      The data rows are indexed starting at 1.


27      Not all sections listed in the table need be included.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 200
                                Chapter 7. Data Representation



                    Table  7.1:   DWARF  package  ole  section  identioer

                    encodings
                ______________________________________________________________
                _Section_identioer_________||Value_||Section__________________

                 DW.SECT.INFO          ||     1    ||.debug_info.dwo

                 Reserved                  || 2    ||

                 DW.SECT.ABBREV       ||      3    ||.debug_abbrev.dwo

                 DW.SECT.LINE          ||     4    ||.debug_line.dwo

                 DW.SECT.LOCLISTS     ||      5    ||.debug_loclists.dwo

                 DW.SECT.STR.OFFSETS ||       6    ||.debug_str_offsets.dwo

                 DW.SECT.MACRO       ||       7    ||.debug_macro.dwo

                _DW.SECT.RNGLISTS_____||______8____||.debug_rnglists.dwo______



 1      The ooesets provided by the CU and TU index sections are the base ooese*
 *ts for the

 2      contributions made by each CU or TU to the corresponding section in the

 3      package ole. Each CU and TU header contains a debug_abbrev_offset oeld,

 4      used to ond the abbreviations table for that CU or TU within the contri*
 *bution to

 5      the .debug_abbrev.dwo section for that CU or TU, and are interpreted as*
 * relative

 6      to the base ooeset given in the index section. Likewise, ooesets into

 7      .debug_line.dwo from DW.AT.stmt.list attributes are interpreted as rela*
 *tive to

 8      the base ooeset for .debug_line.dwo, and ooesets into other debug secti*
 *ons

 9      obtained from DWARF attributes are also interpreted as relative to the

10      corresponding base ooeset.


11      The table of sizes begins immediately following the table of ooesets, a*
 *nd provides

12      the sizes of the contributions made by each CU or TU to the correspondi*
 *ng

13      section in the package ole. This table consists of U data rows, each wi*
 *th N

14      unsigned integer oelds of size specioed by the index header offset_size*
 *_flag

15      oeld. Each data row corresponds to the same CU or TU as the correspondi*
 *ng

16      data row in the table of ooesets described above. Within each data row,*
 * the N

17      oelds also correspond one-to-one with the oelds in the corresponding da*
 *ta row

18      of the table of ooesets. Each oeld provides the size of the contributio*
 *n made by a

19      CU or TU to the corresponding section in the package ole.


20      For an example, see Figure F.10 on page 437.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 201
                                Chapter 7. Data Representation



 1      7.3.6   DWARF Supplementary Object Files


 2      A supplementary object ole permits a post-link utility to analyze execu*
 *table and shared

 3      object oles and collect duplicate debugging information into a single o*
 *le that can be

 4      referenced by each of the original oles. This is in contrast to split D*
 *WARF object oles,

 5      which allow the compiler to split the debugging information between mul*
 *tiple oles in

 6      order to reduce link time and executable size.


 7      A DWARF supplementary object ole is itself an object ole, using the sam*
 *e object

 8      ole format, byte order, and size as the corresponding application execu*
 *tables or

 9      shared libraries. It contains a ole header, section table, and a number*
 * of DWARF

10      debug information sections. Both the supplementary object ole and all t*
 *he

11      executable or shared object oles that reference entries or strings in t*
 *hat ole must

12      contain a .debug_sup section that establishes the relationship.


13      The .debug_sup section contains:


14      1.  version (uhalf)

15          A 2-byte unsigned integer representing the version of the DWARF

16          information for the compilation unit.


17          The value in this oeld is 5.


18      2.  is_supplementary (ubyte)

19          A 1-byte unsigned integer, which contains the value 1 if it is in t*
 *he

20          supplementary object ole that other executable or shared object ole*
 *s refer to,

21          or 0 if it is an executable or shared object referring to a supplem*
 *entary object

22          ole.


23      3.  sup.olename (null terminated olename string)

24          If is_supplementary is 0, this contains either an absolute olename *
 *for the

25          supplementary object ole, or a olename relative to the object ole c*
 *ontaining

26          the .debug_sup section. If is_supplementary is 1, then sup.olename *
 *is not

27          needed and must be an empty string (a single null byte).


28      4.  sup_checksum_len (unsigned LEB128)

29          Length of the following sup_checksum oeld; this value can be 0 if no

30          checksum is provided.


31      5.  sup_checksum (array of ubyte)

32          An implementation-deoned integer constant value that provides unique

33          identiocation of the supplementary ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 202
                                Chapter 7. Data Representation



 1      Debug information entries that refer to an executable's or shared objec*
 *t's

 2      addresses must not be moved to supplementary oles (the addresses will l*
 *ikely

 3      not be the same). Similarly, entries referenced from within location de*
 *scriptions

 4      or using loclistsptr form attributes must not be moved to a supplementa*
 *ry object

 5      ole.


 6      Executable or shared object ole compilation units can use

 7      DW.TAG.imported.unit with an DW.AT.import attribute that uses form

 8      DW.FORM.ref.sup4 or DW.FORM.ref.sup8 to import entries from the

 9      supplementary object ole, form DW.FORM.ref.sup4 or DW.FORM.ref.sup8 to

10      refer directly to individual entries in the supplementary ole, or form

11      DW.FORM.strp.sup or DW.FORM.strp.sup8 to refer to strings that are used

12      by debug information of multiple executables or shared object oles. Wit*
 *hin the

13      supplementary object ole's debugging sections, forms DW.FORM.ref.sup4,

14      DW.FORM.ref.sup8, DW.FORM.strp.sup and DW.FORM.strp.sup8 are not

15      used, and all reference forms referring to other sections refer to the *
 *local sections

16      in the supplementary object ole.


17      In macro information, DW.MACRO.deone.sup4, DW.MACRO.deone.sup8,

18      DW.MACRO.undef.sup4 and DW.MACRO.undef.sup8 opcodes can refer to

19      strings in the .debug_str section of the supplementary object ole, while

20      DW.MACRO.import.sup4 and DW.MACRO.import.sup8 can refer to

21      .debug_macro section entries. Within the .debug_macro section of a

22      supplementary object ole, DW.MACRO.deone.strp and

23      DW.MACRO.undef.strp opcodes refer to the local .debug_str section in th*
 *at

24      supplementary ole, not the one in the executable or shared object ole.


25      Forms for both 4- and 8-byte references are provided so that references*
 * may use the

26      appropriate ooeset size for the content of the supplementary object ole*
 *, which might not

27      use the same 32-bit or 64-bit DWARF format as a referencing object ole.



28      7.4    32-Bit and 64-Bit DWARF Formats


29      There are two closely-related DWARF formats. In the 32-bit DWARF format*
 *, all

30      values that represent lengths of DWARF sections and ooesets relative to*
 * the

31      beginning of DWARF sections are represented using four bytes. In the 64*
 *-bit

32      DWARF format, all values that represent lengths of DWARF sections and o*
 *oesets

33      relative to the beginning of DWARF sections are represented using eight*
 * bytes. A

34      special convention applies to the initial length oeld of certain DWARF *
 *sections,

35      as well as the CIE and FDE structures, so that the 32-bit and 64-bit DW*
 *ARF

36      formats can coexist and be distinguished within a single linked object.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 203
                                Chapter 7. Data Representation



 1      The 32-bit and 64-bit DWARF format conventions must not be intermixed w*
 *ithin

 2      a single compilation unit, except for contributions to the .debug_str_o*
 *ffsets (or

 3      .debug_str_offsets.dwo) section.


 4      The exception for the .debug_str_offsets section enables an executable *
 *program with

 5      a mixture of 32-bit and 64-bit DWARF compilation units to refer to any *
 *string in the

 6      merged .debug_str section, even if that section exceeds 4GB in size.


 7      Except where noted otherwise, all references in this document to a debu*
 *gging

 8      information section (for example, .debug_info), apply also to the corre*
 *sponding

 9      split DWARF section (for example, .debug_info.dwo).


10      Attribute values and section header oelds that represent addresses in t*
 *he target program

11      are not aoeected by the rules that follow.


12      The dioeerences between the 32- and 64-bit DWARF formats are detailed i*
 *n the

13      following:


14      1.  In the 32-bit DWARF format, an initial length oeld (see Section 7.2*
 *.2 on

15          page 191). is an unsigned 4-byte integer (which must be less than

16          0xfffffff0); in the 64-bit DWARF format, an initial length oeld is *
 *12 bytes in

17          size, and has two parts:


18            # The orst four bytes have the value 0xffffffff.


19            # The following eight bytes contain the actual length represented*
 * as an

20              unsigned 8-byte integer.


21          This representation allows a DWARF consumer to dynamically detect t*
 *hat a

22          DWARF section contribution is using the 64-bit format and to adapt *
 *its processing

23          accordingly.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 204
                                Chapter 7. Data Representation



 1      2.  Section ooeset and section length oelds that occur in the headers o*
 *f DWARF

 2          sections (other than initial length oelds) depend on the choice of *
 *DWARF

 3          format as follows: for the 32-bit DWARF format these are 4-byte uns*
 *igned

 4          integer values; for the 64-bit DWARF format, they are 8-byte unsign*
 *ed integer

 5          values.


              _Section_____________Name___________________Role_________________*
 *____

               .debug_aranges       debug_info_offset      ooeset in .debug_info

               .debug_frame/CIE     CIE_id                 CIE distinguished va*
 *lue

               .debug_frame/FDE     CIE_pointer            ooeset in .debug_fra*
 *me

               .debug_info          debug_abbrev_offset    ooeset in .debug_abb*
 *rev

               .debug_line          header_length          length of header its*
 *elf

               .debug_names         entry in array of CUs  ooeset in .debug_info

              ______________________or_local_TUs_______________________________*
 *____


 6          The CIE_id oeld in a CIE structure must be 64 bits because it overl*
 *ays the

 7          CIE_pointer in a FDE structure; this implicit union must be accesse*
 *d to

 8          distinguish whether a CIE or FDE is present, consequently, these tw*
 *o oelds

 9          must exactly overlay each other (both ooeset and size).


10      3.  Within the body of the .debug_info section, certain forms of attrib*
 *ute value

11          depend on the choice of DWARF format as follows: for the 32-bit DWA*
 *RF

12          format, the value is a 4-byte unsigned integer; for the 64-bit DWAR*
 *F format,

13          the value is an 8-byte unsigned integer.


                    _Form___________________Role____________________________

                     DW.FORM.line.strp       ooeset in .debug_line_str

                     DW.FORM.ref.addr        ooeset in .debug_info

                     DW.FORM.sec.ooeset      ooeset in a section other than

                                             .debug_info or .debug_str

                     DW.FORM.strp            ooeset in .debug_str

                     DW.FORM.strp.sup        ooeset in .debug_str section of a

                                             supplementary object ole

                    _DW.OP.call.ref__________ooeset_in_.debug_info__________



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 205
                                Chapter 7. Data Representation



 1      4.  Within the body of the .debug_line section, certain forms of content

 2          description depend on the choice of DWARF format as follows: for th*
 *e 32-bit

 3          DWARF format, the value is a 4-byte unsigned integer; for the 64-bi*
 *t DWARF

 4          format, the value is a 8-byte unsigned integer.


                    __Form__________________Role___________________________

                    _DW.FORM.line.strp______ooeset_in_.debug_line_str______


 5      5.  Within the body of the .debug_names sections, the representation of*
 * each

 6          entry in the array of compilation units (CUs) and the array of loca*
 *l type units

 7          (TUs), which represents an ooeset in the .debug_info section, depen*
 *ds on the

 8          DWARF format as follows: for the 32-bit DWARF format, each entry is*
 * a

 9          4-byte unsigned integer; for the 64-bit DWARF format, it is a 8-byt*
 *e unsigned

10          integer.


11      6.  In the body of the .debug_str_offsets sections, the size of entries*
 * in the

12          body depend on the DWARF format as follows: for the 32-bit DWARF fo*
 *rmat,

13          entries are 4-byte unsigned integer values; for the 64-bit DWARF fo*
 *rmat, they

14          are 8-byte unsigned integers.


15      7.  Within the body of the .debug_loclists and .debug_rnglists sections*
 *, the

16          ooesets that follow the header depend on the DWARF format as follow*
 *s: for

17          the 32-bit DWARF format, ooesets are 4-byte unsigned integer values*
 *; for the

18          64-bit DWARF format, they are 8-byte unsigned integers.


19      A DWARF consumer that supports the 64-bit DWARF format must support

20      executables in which some compilation units use the 32-bit format and o*
 *thers use

21      the 64-bit format provided that the combination links correctly (that i*
 *s, provided

22      that there are no link-time errors due to truncation or overAEow). (An

23      implementation is not required to guarantee detection and reporting of *
 *all such

24      errors.)


25      It is expected that DWARF producing compilers will not use the 64-bit f*
 *ormat by

26      default. In most cases, the division of even very large applications in*
 *to a number of

27      executable and shared object oles will suOEce to assure that the DWARF *
 *sections within

28      each individual linked object are less than 4 GBytes in size. However, *
 *for those cases

29      where needed, the 64-bit format allows the unusual case to be handled a*
 *s well. Even in

30      this case, it is expected that only application supplied objects will n*
 *eed to be compiled

31      using the 64-bit format; separate 32-bit format versions of system supp*
 *lied shared

32      executable libraries can still be used.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 206
                                Chapter 7. Data Representation



 1      7.5    Format of Debugging Information


 2      For each compilation unit compiled with a DWARF producer, a contributio*
 *n is

 3      made to the .debug_info section of the object ole. Each such contributi*
 *on

 4      consists of a compilation unit header (see Section 7.5.1.1 on the next *
 *page)

 5      followed by a single DW.TAG.compile.unit or DW.TAG.partial.unit

 6      debugging information entry, together with its children.


 7      For each type deoned in a compilation unit, a separate contribution may*
 * also be

 8      made to the .debug_info section of the object ole. Each such contributi*
 *on

 9      consists of a type unit header (see Section 7.5.1.3 on page 210) follow*
 *ed by a

10      DW.TAG.type.unit entry, together with its children.


11      Each debugging information entry begins with a code that represents an *
 *entry in

12      a separate abbreviations table. This code is followed directly by a ser*
 *ies of

13      attribute values.


14      The appropriate entry in the abbreviations table guides the interpretat*
 *ion of the

15      information contained directly in the .debug_info section.


16      Multiple debugging information entries may share the same abbreviation *
 *table

17      entry. Each compilation unit is associated with a particular abbreviati*
 *on table,

18      but multiple compilation units may share the same table.



19      7.5.1   Unit Headers


20      Unit headers contain a oeld, unit_type, whose value indicates the kind *
 *of

21      compilation unit (see Section 3.1 on page 61). The encodings for the un*
 *it type

22      enumeration are shown in Table 7.2.


                          Table 7.2: Unit header unit type encodings
                          __________________________________________
                          _Unit_header_unit_type_encodings_||Value__

                           DW.UT.compile                ||   0x01

                           DW.UT.type                   ||   0x02

                           DW.UT.partial                  || 0x03

                           DW.UT.skeleton                ||  0x04

                           DW.UT.split.compile           ||  0x05

                           DW.UT.split.type              ||  0x06

                           DW.UT.lo.user                 ||  0x80

                          _DW.UT.hi.user_________________||__0xff__



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 207
                                Chapter 7. Data Representation



                         ___________________________________________



 1      All unit headers have the same initial three oelds: initial_length, ver*
 *sion and

 2      unit_type.



 3      7.5.1.1 Full and Partial Compilation Unit Headers


 4      1.  unit_length (initial length)

 5          A 4-byte or 12-byte unsigned integer representing the length of the

 6          .debug_info contribution for that compilation unit, not including t*
 *he length

 7          oeld itself (see Section 7.4 on page 203).


 8      2.  version (uhalf)

 9          A 2-byte unsigned integer representing the version of the DWARF

10          information for the compilation unit.


11          The value in this oeld is 5.


12          See also Appendix G on page 440 for a summary of all version number*
 *s that apply to

13          DWARF sections.


14      3.  unit_type (ubyte)

15          A 1-byte unsigned integer identifying this unit as a compilation un*
 *it. The

16          value of this oeld is DW.UT.compile for a (non-split) full compilat*
 *ion unit or

17          DW.UT.partial for a (non-split) partial compilation unit (see Secti*
 *on 3.1.1 on

18          page 62).


19          See Section 7.5.1.2 regarding a split full compilation unit.


20      4.  address_size (ubyte)

21          A 1-byte unsigned integer representing the size in bytes of an addr*
 *ess on the

22          target architecture.


23      5.  debug_abbrev_offset (section ooeset)

24          A 4-byte or 8-byte unsigned ooeset into the .debug_abbrev section. *
 *This ooeset

25          associates the compilation unit with a particular set of debugging

26          information entry abbreviations. In the 32-bit DWARF format, this i*
 *s a 4-byte

27          unsigned length; in the 64-bit DWARF format, this is an 8-byte unsi*
 *gned

28          length (see Section 7.4 on page 203).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 208
                                Chapter 7. Data Representation



 1      7.5.1.2 Skeleton and Split Compilation Unit Headers


 2      1.  unit_length (initial length)

 3          A 4-byte or 12-byte unsigned integer representing the length of the

 4          .debug_info contribution for that compilation unit, not including t*
 *he length

 5          oeld itself (see Section 7.4 on page 203).


 6      2.  version (uhalf)

 7          A 2-byte unsigned integer representing the version of the DWARF

 8          information for the compilation unit.


 9          The value in this oeld is 5.


10          See also Appendix G on page 440 for a summary of all version number*
 *s that apply to

11          DWARF sections.


12      3.  unit_type (ubyte)

13          A 1-byte unsigned integer identifying this unit as a compilation un*
 *it. The

14          value of this oeld is DW.UT.skeleton for a skeleton compilation uni*
 *t or

15          DW.UT.split.compile for a split (full) compilation unit (see Sectio*
 *n 3.1.2 on

16          page 69).


17          There is no split analog to the partial compilation unit.


18      4.  address_size (ubyte)

19          A 1-byte unsigned integer representing the size in bytes of an addr*
 *ess on the

20          target architecture.


21      5.  debug_abbrev_offset (section ooeset)

22          A 4-byte or 8-byte unsigned ooeset into the .debug_abbrev section. *
 *This ooeset

23          associates the compilation unit with a particular set of debugging

24          information entry abbreviations. In the 32-bit DWARF format, this i*
 *s a 4-byte

25          unsigned length; in the 64-bit DWARF format, this is an 8-byte unsi*
 *gned

26          length (see Section 7.4 on page 203).


27      6.  dwo_id (unit ID)

28          An 8-byte implementation-deoned integer constant value, known as the

29          compilation unit ID, that provides unique identiocation of a skelet*
 *on

30          compilation unit and its associated split compilation unit in the o*
 *bject ole

31          named in the DW.AT.dwo.name attribute of the skeleton compilation.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 209
                                Chapter 7. Data Representation



 1      7.5.1.3 Type Unit Headers


 2      The header for the series of debugging information entries contributing*
 * to the

 3      description of a type that has been placed in its own type unit, within*
 * the

 4      .debug_info section, consists of the following information:


 5      1.  unit_length (initial length)

 6          A 4-byte or 12-byte unsigned integer representing the length of the

 7          .debug_info contribution for that type unit, not including the leng*
 *th oeld

 8          itself (see Section 7.4 on page 203).


 9      2.  version (uhalf)

10          A 2-byte unsigned integer representing the version of the DWARF

11          information for the type unit.


12          The value in this oeld is 5.


13      3.  unit_type (ubyte)

14          A 1-byte unsigned integer identifying this unit as a type unit. The*
 * value of

15          this oeld is DW.UT.type for a non-split type unit (see Section 3.1.*
 *4 on

16          page 72) or DW.UT.split.type for a split type unit.


17      4.  address_size (ubyte)

18          A 1-byte unsigned integer representing the size in bytes of an addr*
 *ess on the

19          target architecture.


20      5.  debug_abbrev_offset (section ooeset)

21          A 4-byte or 8-byte unsigned ooeset into the .debug_abbrev section. *
 *This ooeset

22          associates the type unit with a particular set of debugging informa*
 *tion entry

23          abbreviations. In the 32-bit DWARF format, this is a 4-byte unsigne*
 *d length;

24          in the 64-bit DWARF format, this is an 8-byte unsigned length (see *
 *Section 7.4

25          on page 203).


26      6.  type_signature (8-byte unsigned integer)

27          A unique 8-byte signature (see Section 7.32 on page 257) of the typ*
 *e described

28          in this type unit.


29          An attribute that refers (using DW.FORM.ref.sig8) to the primary ty*
 *pe contained

30          in this type unit uses this value.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 210
                                Chapter 7. Data Representation



 1      7.  type_offset (section ooeset)

 2          A 4-byte or 8-byte unsigned ooeset relative to the beginning of the*
 * type unit

 3          header. This ooeset refers to the debugging information entry that *
 *describes

 4          the type. Because the type may be nested inside a namespace or other

 5          structures, and may contain references to other types that have not*
 * been

 6          placed in separate type units, it is not necessarily either the ors*
 *t or the only

 7          entry in the type unit. In the 32-bit DWARF format, this is a 4-byt*
 *e unsigned

 8          length; in the 64-bit DWARF format, this is an 8-byte unsigned leng*
 *th (see

 9          Section 7.4 on page 203).



10      7.5.2   Debugging Information Entry


11      Each debugging information entry begins with an unsigned LEB128 number

12      containing the abbreviation code for the entry. This code represents an*
 * entry

13      within the abbreviations table associated with the compilation unit con*
 *taining

14      this entry. The abbreviation code is followed by a series of attribute *
 *values.


15      On some architectures, there are alignment constraints on section bound*
 *aries. To

16      make it easier to pad debugging information sections to satisfy such co*
 *nstraints,

17      the abbreviation code 0 is reserved. Debugging information entries cons*
 *isting of

18      only the abbreviation code 0 are considered null entries.



19      7.5.3   Abbreviations Tables


20      The abbreviations tables for all compilation units are contained in a s*
 *eparate

21      object ole section called .debug_abbrev. As mentioned before, multiple

22      compilation units may share the same abbreviations table.


23      The abbreviations table for a single compilation unit consists of a ser*
 *ies of

24      abbreviation declarations. Each declaration specioes the tag and attrib*
 *utes for a

25      particular form of debugging information entry. Each declaration begins*
 * with an

26      unsigned LEB128 number representing the abbreviation code itself. It is*
 * this code

27      that appears at the beginning of a debugging information entry in the

28      .debug_info section. As described above, the abbreviation code 0 is res*
 *erved for

29      null debugging information entries. The abbreviation code is followed by

30      another unsigned LEB128 number that encodes the entry's tag. The encodi*
 *ngs

31      for the tag names are given in Table 7.3 on the following page.


32      An abbreviations table may be padded at the end with null bytes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 211
                        Chapter 7. Data Representation



                           Table 7.3: Tag encodings
               ________________________________________________
               _Tag_name____________________________||Value____

                DW.TAG.array.type                ||    0x01

                DW.TAG.class.type                 ||   0x02

                DW.TAG.entry.point               ||    0x03

                DW.TAG.enumeration.type         ||     0x04

                DW.TAG.formal.parameter          ||    0x05

                Reserved                             ||0x06

                Reserved                             ||0x07

                DW.TAG.imported.declaration      ||    0x08

                Reserved                             ||0x09

                DW.TAG.label                      ||   0x0a

                DW.TAG.lexical.block              ||   0x0b

                Reserved                             ||0x0c

                DW.TAG.member                   ||     0x0d

                Reserved                             ||0x0e

                DW.TAG.pointer.type              ||    0x0f

                DW.TAG.reference.type             ||   0x10

                DW.TAG.compile.unit              ||    0x11

                DW.TAG.string.type                ||   0x12

                DW.TAG.structure.type             ||   0x13

                Reserved                             ||0x14

                DW.TAG.subroutine.type           ||    0x15

                DW.TAG.typedef                   ||    0x16

                DW.TAG.union.type                ||    0x17

                DW.TAG.unspecioed.parameters    ||     0x18

                DW.TAG.variant                    ||   0x19

                DW.TAG.common.block            ||      0x1a

                DW.TAG.common.inclusion         ||     0x1b

                DW.TAG.inheritance                ||   0x1c

                DW.TAG.inlined.subroutine         ||   0x1d

               _DW.TAG.module___________________||_____0x1e____

                Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 212
                        Chapter 7. Data Representation



               _Tag_name____________________________||Value____

                DW.TAG.ptr.to.member.type       ||     0x1f

                DW.TAG.set.type                   ||  0x20

                DW.TAG.subrange.type             ||   0x21

                DW.TAG.with.stmt                 ||   0x22

                DW.TAG.access.declaration         ||  0x23

                DW.TAG.base.type                 ||   0x24

                DW.TAG.catch.block               ||   0x25

                DW.TAG.const.type                ||   0x26

                DW.TAG.constant                   ||  0x27

                DW.TAG.enumerator               ||    0x28

                DW.TAG.ole.type                  ||   0x29

                DW.TAG.friend                     ||  0x2a

                DW.TAG.namelist                  ||   0x2b

                DW.TAG.namelist.item             ||   0x2c

                DW.TAG.packed.type              ||    0x2d

                DW.TAG.subprogram               ||    0x2e

                DW.TAG.template.type.parameter  ||     0x2f

                DW.TAG.template.value.parameter ||    0x30

                DW.TAG.thrown.type              ||    0x31

                DW.TAG.try.block                  ||  0x32

                DW.TAG.variant.part               ||  0x33

                DW.TAG.variable                   ||  0x34

                DW.TAG.volatile.type              ||  0x35

                DW.TAG.dwarf.procedure          ||    0x36

                DW.TAG.restrict.type               || 0x37

                DW.TAG.interface.type             ||  0x38

                DW.TAG.namespace                ||    0x39

                DW.TAG.imported.module         ||     0x3a

                DW.TAG.unspecioed.type          ||    0x3b

                DW.TAG.partial.unit               ||  0x3c

               _DW.TAG.imported.unit_____________||___0x3d_____

                Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 213
                                Chapter 7. Data Representation



                       _Tag_name____________________________||Value____

                        Reserved                             ||0x3e1

                        DW.TAG.condition                  ||  0x3f

                        DW.TAG.shared.type               ||   0x40

                        DW.TAG.type.unit                 ||   0x41

                        DW.TAG.rvalue.reference.type      ||  0x42

                        DW.TAG.template.alias             ||  0x43

                        DW.TAG.coarray.type              ||   0x44

                        DW.TAG.generic.subrange          ||   0x45

                        DW.TAG.dynamic.type             ||    0x46

                        DW.TAG.atomic.type               ||   0x47

                        DW.TAG.call.site                   || 0x48

                        DW.TAG.call.site.parameter        ||  0x49

                        DW.TAG.skeleton.unit              ||  0x4a

                        DW.TAG.immutable.type           ||    0x4b

                        DW.TAG.lo.user                    || 0x4080

                       _DW.TAG.hi.user____________________||_0xffff____



 1      Following the tag encoding is a 1-byte value that determines whether a

 2      debugging information entry using this abbreviation has child entries o*
 *r not. If

 3      the value is DW.CHILDREN.yes, the next physically succeeding entry of a*
 *ny

 4      debugging information entry using this abbreviation is the orst child o*
 *f that

 5      entry. If the 1-byte value following the abbreviation's tag encoding is

 6      DW.CHILDREN.no, the next physically succeeding entry of any debugging

 7      information entry using this abbreviation is a sibling of that entry. (*
 *Either the

 8      orst child or sibling entries may be null entries). The encodings for t*
 *he child

 9      determination byte are given in Table 7.4 on the next page (As mentione*
 *d in

10      Section 2.3 on page 25, each chain of sibling entries is terminated by *
 *a null entry.)
        _______________________________
           1Code 0x3e is reserved to allow backward compatible support of the D*
 *W.TAG.mutable.type

        DIE that was deoned (only) in DWARF Version 3.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 214
                                Chapter 7. Data Representation



                          Table 7.4: Child determination encodings
                           ________________________________________
                           _Children_determination_name_||_Value___

                            DW.CHILDREN.no          ||      0x00

                           _DW.CHILDREN.yes__________||_____0x01_____



 1      Finally, the child encoding is followed by a series of attribute specio*
 *cations. Each

 2      attribute speciocation consists of two parts (except for

 3      DW.FORM.implicit.const, DW.FORM.addrx.ooeset and DW.FORM.indirect,

 4      see below). The orst part is an unsigned LEB128 number representing the

 5      attribute's name. The second part is an unsigned LEB128 number represen*
 *ting

 6      the attribute's form. The series of attribute speciocations ends with a*
 *n entry

 7      containing 0 for the name and 0 for the form.

 8      For attributes with the form DW.FORM.implicit.const, in addition to the

 9      attribute name and form values, the attribute speciocation contains a t*
 *hird part,

10      which is a signed LEB128 number. The value of this number is used as th*
 *e value

11      of the attribute.

12      For attributes with the form DW.FORM.addrx.ooeset, following the attrib*
 *ute

13      name, the attribute speciocation contains two unsigned LEB128 numbers, *
 *each

14      representing a form. The orst form must be of class address and the sec*
 *ond of

15      class constant. Values using this form in the .debug_info section conta*
 *in a value

16      for the orst form followed by a value for the second form. The total va*
 *lue of the

17      DW.FORM.addrx.ooeset is then computed by adding those two values togeth*
 *er

18      (if the orst value is an indirect address, that is resolved orst before*
 * adding it to

19      the second value).

20      For attributes with the form DW.FORM.indirect, the actual attribute for*
 *m value

21      itself is in the .debug_info section which begins with an unsigned LEB1*
 *28

22      number that specioes the actual form, followed by the value according t*
 *o that

23      form. This allows producers to choose forms for particular attributes

24      dynamically, without having to add a new entry to the abbreviations tab*
 *le.

25      If the actual attribute form is DW.FORM.implicit.const, the form is (st*
 *ill)

26      followed by a signed LEB128 number.

27      If the actual attribute form is itself DW.FORM.indirect, the indirectio*
 *n repeats.

28      There may be one or more occurrences of DW.FORM.indirect in sequence un*
 *til

29      a non-DW.FORM.indirect form is reached. The sequence of

30      DW.FORM.indirect forms does not have any eoeect other than to use up sp*
 *ace.

31      The abbreviations for a given compilation unit end with an entry consis*
 *ting of a

32      0 byte for the abbreviation code.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 215
                               Chapter 7. Data Representation



1      See Appendix D.1.1 on page 300 for a depiction of the organization of th*
 *e debugging

2      information.



3      7.5.4   Attribute Encodings


4      The encodings for the attribute names are given in Table 7.5 following.



                               Table 7.5: Attribute encodings
         ______________________________________________________________________*
 *____
         _Attribute_name_________________||_Value__||Classes___________________*
 *____

          DW.AT.sibling                 ||  0x01  ||reference

          DW.AT.location                ||  0x02  ||locdesc, loclist

          DW.AT.name                  ||    0x03  ||string

          Reserved                         ||0x04  ||not applicable

          Reserved                         ||0x05  ||not applicable

          Reserved                         ||0x06  ||not applicable

          Reserved                         ||0x07  ||not applicable

          Reserved                         ||0x08  ||not applicable

          DW.AT.ordering               ||   0x09  ||constant

          Reserved                         ||0x0a  ||not applicable

          DW.AT.byte.size               ||  0x0b  ||constant, exprval, reference

          Reserved                         ||0x0c2  ||not applicable

          DW.AT.bit.size                ||  0x0d  ||constant, exprval, reference

          Reserved                         ||0x0e  ||not applicable

          Reserved                         ||0x0f   ||not applicable

          DW.AT.stmt.list                || 0x10  ||lineptr

          DW.AT.low.pc                 ||   0x11  ||address

          DW.AT.high.pc                ||   0x12  ||address, constant

          Reserved                         ||0x133  ||not applicable

          Reserved                         ||0x14  ||not applicable

          DW.AT.discr                   ||  0x15  ||reference

         _DW.AT.discr.value_____________||__0x16__||constant___________________*
 *____

          Continued on next page
       _______________________________
          2Code 0x0c is reserved to allow backward compatible support of the DW*
 *.AT.bit.ooeset

       attributewhich was deoned in DWARF Version 3 and earlier.
          3Code 0x13 is reserved to allow backward compatible support of the DW*
 *.AT.language

       attributewhich was deoned in DWARF Version 5 and earlier.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 216
                        Chapter 7. Data Representation



 __Attribute_name_________________||Value__||Classes_______________________

   DW.AT.visibility               || 0x17  ||constant

   DW.AT.import                 ||   0x18  ||reference

   DW.AT.string.length           ||  0x19  ||locdesc, loclist, reference

   DW.AT.common.reference      ||    0x1a  ||reference

   DW.AT.comp.dir              ||    0x1b  ||string

   DW.AT.const.value            ||   0x1c  ||block, constant, string

   DW.AT.containing.type        ||   0x1d  ||reference

   DW.AT.default.value           ||  0x1e  ||constant, reference, AEag, string

   Reserved                         ||0x1f   ||not applicable

   DW.AT.inline                  ||  0x20  ||constant

   DW.AT.is.optional             ||  0x21  ||AEag

   DW.AT.lower.bound           ||    0x22  ||constant, exprval, reference

   Reserved                         ||0x23  ||not applicable

   Reserved                         ||0x24  ||not applicable

   DW.AT.producer               ||   0x25  ||string

   Reserved                         ||0x26  ||not applicable

   DW.AT.prototyped             ||   0x27  ||AEag

   Reserved                         ||0x28  ||not applicable

   Reserved                         ||0x29  ||not applicable

   DW.AT.return.addr            ||   0x2a  ||locdesc, loclist

   Reserved                         ||0x2b  ||not applicable

   DW.AT.start.scope             ||  0x2c  ||constant, rnglist

   Reserved                         ||0x2d  ||not applicable

   DW.AT.bit.stride               || 0x2e  ||constant, exprval, reference

   DW.AT.upper.bound           ||    0x2f   ||constant, exprval, reference

   Reserved                         ||0x30  ||not applicable

   DW.AT.abstract.origin         ||  0x31  ||reference

   DW.AT.accessibility            || 0x32  ||constant

   DW.AT.address.class           ||  0x33  ||constant

   DW.AT.artiocial                || 0x34  ||AEag

   DW.AT.base.types             ||   0x35  ||reference

  _DW.AT.calling.convention______||__0x36__||constant_______________________

   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 217
                        Chapter 7. Data Representation



 __Attribute_name_________________||Value__||Classes_______________________

   DW.AT.count                  ||   0x37  ||constant, exprval, reference

   DW.AT.data.member.location  ||    0x38  ||constant, locdesc, loclist

   DW.AT.decl.column            ||   0x39  ||constant

   DW.AT.decl.ole                ||  0x3a  ||constant

   DW.AT.decl.line               ||  0x3b  ||constant

   DW.AT.declaration             ||  0x3c  ||AEag

   DW.AT.discr.list               || 0x3d  ||block

   DW.AT.encoding               ||   0x3e  ||constant

   DW.AT.external                ||  0x3f  ||AEag

   DW.AT.frame.base             ||   0x40  ||locdesc, loclist

   DW.AT.friend                  ||  0x41  ||reference

   DW.AT.identioer.case          ||  0x42  ||constant

   Reserved                         ||0x434  ||not applicable

   DW.AT.namelist.item          ||   0x44  ||reference

   DW.AT.priority                ||  0x45  ||reference

   Reserved                         ||0x465  ||not applicable

   DW.AT.speciocation            ||  0x47  ||reference

   DW.AT.static.link              || 0x48  ||locdesc, loclist

   DW.AT.type                   ||   0x49  ||reference

   DW.AT.use.location            ||  0x4a  ||locdesc, loclist

   DW.AT.variable.parameter     ||   0x4b  ||AEag

   DW.AT.virtuality               || 0x4c  ||constant

   DW.AT.vtable.elem.location    ||  0x4d  ||locdesc, loclist

   DW.AT.allocated               ||  0x4e  ||constant, exprval, reference

   DW.AT.associated              ||  0x4f   ||constant, exprval, reference

   DW.AT.data.location           ||  0x50  ||locdesc

   DW.AT.byte.stride             ||  0x51  ||constant, exprval, reference

   DW.AT.entry.pc               ||   0x52  ||address, constant

  _DW.AT.use.UTF8______________||____0x53__||AEag___________________________

   Continued on next page
_______________________________
   4Code 0x43 is reserved to allow backward compatible support of the DW.AT.mac*
 *ro.info

attributewhich was deoned in DWARF Version 4 and earlier.
   5Code 0x46 is reserved to allow backward compatible support of the DW.AT.seg*
 *ment

attributewhich was deoned in DWARF Version 5 and earlier.



July 15 2024               ***WORKING DRAFT***                       Page 218
                        Chapter 7. Data Representation



 __Attribute_name_________________||Value__||Classes_______________________

   DW.AT.extension               ||  0x54  ||reference

   DW.AT.ranges                 ||   0x55  ||rnglist

   DW.AT.trampoline             ||   0x56  ||address, AEag, reference, string

   DW.AT.call.column            ||   0x57  ||constant

   DW.AT.call.ole                ||  0x58  ||constant

   DW.AT.call.line                || 0x59  ||constant

   DW.AT.description             ||  0x5a  ||string

   DW.AT.binary.scale            ||  0x5b  ||constant

   DW.AT.decimal.scale           ||  0x5c  ||constant

   DW.AT.small                  ||   0x5d  ||reference

   DW.AT.decimal.sign           ||   0x5e  ||constant

   DW.AT.digit.count             ||  0x5f   ||constant

   DW.AT.picture.string          ||  0x60  ||string

   DW.AT.mutable                ||   0x61  ||AEag

   DW.AT.threads.scaled          ||  0x62  ||AEag

   DW.AT.explicit                 || 0x63  ||AEag

   DW.AT.object.pointer          ||  0x64  ||reference

   DW.AT.endianity               ||  0x65  ||constant

   DW.AT.elemental              ||   0x66  ||AEag

   DW.AT.pure                   ||   0x67  ||AEag

   DW.AT.recursive               ||  0x68  ||AEag

   DW.AT.signature               ||  0x69  ||reference

   DW.AT.main.subprogram      ||     0x6a  ||AEag

   DW.AT.data.bit.ooeset          || 0x6b  ||constant

   DW.AT.const.expr             ||   0x6c  ||AEag

   DW.AT.enum.class             ||   0x6d  ||AEag

   DW.AT.linkage.name          ||    0x6e  ||string

   DW.AT.string.length.bit.size   || 0x6f   ||constant

   DW.AT.string.length.byte.size ||  0x70  ||constant

  _DW.AT.rank___________________||___0x71__||constant,_exprval______________

   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 219
                        Chapter 7. Data Representation



 __Attribute_name_________________||Value__||Classes_______________________

   Reserved                         ||0x726 n||ot applicable

   DW.AT.addr.base              ||   0x73  ||addrptr

   DW.AT.rnglists.base           ||  0x74  ||rnglistsptr

   Reserved                         ||0x75  ||not applicable

   DW.AT.dwo.name             ||     0x76  ||string

   DW.AT.reference               ||  0x77  ||AEag

   DW.AT.rvalue.reference        ||  0x78  ||AEag

   DW.AT.macros                 ||   0x79  ||macptr

   DW.AT.call.all.calls            ||0x7a  ||AEag

   DW.AT.call.all.source.calls     ||0x7b  ||AEag

   DW.AT.call.all.tail.calls        ||0x7c  ||AEag

   DW.AT.call.return.pc          ||  0x7d  ||address

   DW.AT.call.value              ||  0x7e  ||exprval

   DW.AT.call.origin              || 0x7f   ||reference

   DW.AT.call.parameter          ||  0x80  ||reference

   DW.AT.call.pc                 ||  0x81  ||address

   DW.AT.call.tail.call            ||0x82  ||AEag

   DW.AT.call.target              || 0x83  ||locdesc

   DW.AT.call.target.clobbered    || 0x84  ||locdesc

   DW.AT.call.data.location       || 0x85  ||locdesc

   DW.AT.call.data.value         ||  0x86  ||exprval

   DW.AT.noreturn               ||   0x87  ||AEag

   DW.AT.alignment              ||   0x88  ||constant

   DW.AT.export.symbols         ||   0x89  ||AEag

   DW.AT.deleted                 ||  0x8a  ||AEag

   DW.AT.defaulted               ||  0x8b  ||constant

   DW.AT.loclists.base            || 0x8c  ||loclistsptr

   DW.AT.scale.multiplier #       || 0x8d  ||constant

   DW.AT.scale.divisor #          || 0x8e  ||constant

  _DW.AT.str.ooesets_#____________||_0x8f___||strooesetsptr_________________

   Continued on next page

_______________________________
   6Code 0x72 is reserved to allow backward compatible support of the DW.AT.str*
 *.ooesets.base

attributewhich was deoned in DWARF Version 5 and earlier.



July 15 2024               ***WORKING DRAFT***                       Page 220
                                Chapter 7. Data Representation



         __Attribute_name_________________||Value__||Classes___________________*
 *____

           DW.AT.language.name #       ||    0x90  ||constant

           DW.AT.language.version #     ||   0x91  ||constant

           DW.AT.bias #                  ||  0x92  ||constant

           DW.AT.tensor #                ||  0x93  ||AEag

           DW.AT.num.lanes #            ||   0x94  ||constant, exprval, vallist

           DW.AT.lo.user                 || 0x2000 ||~

          _DW.AT.hi.user_________________||_0x3fff_||~_________________________*
 *_____

           # New in DWARF Version 6



 1      7.5.5   Classes and Forms


 2      Each class is a set of forms which have related representations and whi*
 *ch are

 3      given a common interpretation according to the attribute in which the f*
 *orm is

 4      used. The attribute form governs how the value of an attribute is encod*
 *ed. The

 5      classes and the forms they include are listed below.


 6      Form DW.FORM.sec.ooeset is a member of more than one class, namely

 7      addrptr, lineptr, loclist, loclistsptr, macptr, rnglist, rnglistsptr, a*
 *nd strooesetsptr;

 8      as a result, it is not possible for an attribute to allow more than one*
 * of these

 9      classes. The list of classes allowed by the applicable attribute in Tab*
 *le 7.5 on

10      page 216 determines the class of the form.


11      In the form descriptions that follow, some forms are said to depend in *
 *part on the

12      value of an attribute of the associated compilation unit:


13        #  In the case of a split DWARF object ole, the associated compilatio*
 *n unit is

14           the skeleton compilation unit corresponding to the containing unit.


15        #  Otherwise, the associated compilation unit is the containing unit.


16      Each possible form belongs to one or more of the following classes (see*
 * Table 2.3

17      on page 23 for a summary of the purpose and general usage of each class*
 *):


18        #  address

19           Represented as either:


20              ~ An object of appropriate size to hold an address on the targe*
 *t machine

21                (DW.FORM.addr). The size is encoded in the compilation unit h*
 *eader

22                (see Section 7.5.1.1 on page 208). This address is relocatabl*
 *e in a

23                relocatable object ole and is relocated in an executable ole *
 *or shared

24                object ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 221
                                Chapter 7. Data Representation



 1              ~An indirect index into a table of addresses (as described in t*
 *he

 2               previous bullet) in the .debug_addr section (DW.FORM.addrx,

 3               DW.FORM.addrx1, DW.FORM.addrx2, DW.FORM.addrx3 and

 4               DW.FORM.addrx4). The representation of a DW.FORM.addrx value

 5               is an unsigned LEB128 value, which is interpreted as a zero-ba*
 *sed

 6               index into an array of addresses in the .debug_addr section. T*
 *he

 7               representation of a DW.FORM.addrx1, DW.FORM.addrx2,

 8               DW.FORM.addrx3 or DW.FORM.addrx4 value is a 1-, 2-, 3- or

 9               4-byte unsigned integer value, respectively, which is similarly

10               interpreted. The index is relative to the value of the

11               DW.AT.addr.base attribute of the associated compilation unit.


12        #  addrptr

13           This is an ooeset into the .debug_addr section (DW.FORM.sec.ooeset*
 *). It

14           consists of an ooeset from the beginning of the .debug_addr sectio*
 *n to the

15           beginning of the list of machine addresses information for the ref*
 *erencing

16           entity. It is relocatable in a relocatable object ole, and relocat*
 *ed in an

17           executable or shared object ole. In the 32-bit DWARF format, this *
 *ooeset is a

18           4-byte unsigned value; in the 64-bit DWARF format, it is an 8-byte

19           unsigned value (see Section 7.4 on page 203).


20        #  block

21           Blocks come in four forms:


22              ~ A 1-byte length followed by 0 to 255 contiguous information b*
 *ytes

23                (DW.FORM.block1).


24              ~ A 2-byte length followed by 0 to 65,535 contiguous informatio*
 *n bytes

25                (DW.FORM.block2).


26              ~ A 4-byte length followed by 0 to 4,294,967,295 contiguous inf*
 *ormation

27                bytes (DW.FORM.block4).


28              ~ An unsigned LEB128 length followed by the number of bytes spe*
 *cioed

29                by the length (DW.FORM.block).


30           In all forms, the length is the number of information bytes that f*
 *ollow. The

31           information bytes may contain any mixture of relocated (or relocat*
 *able)

32           addresses, references to other debugging information entries or da*
 *ta bytes.


33        #  constant

34           There are eight forms of constants. There are oxed length constant*
 * data

35           forms for one-, two-, four-, eight- and sixteen-byte values (respe*
 *ctively,

36           DW.FORM.data1, DW.FORM.data2, DW.FORM.data4,

37           DW.FORM.data8 and DW.FORM.data16). There are variable length



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 222
                                Chapter 7. Data Representation



 1           constant data forms encoded using signed LEB128 numbers

 2           (DW.FORM.sdata) and unsigned LEB128 numbers (DW.FORM.udata).

 3           There is also an implicit constant (DW.FORM.implicit.const, see Se*
 *ction

 4           7.5.3 on page 215), whose value is provided as part of an abbrevia*
 *tion

 5           speciocation.


 6           The data in DW.FORM.data1, DW.FORM.data2, DW.FORM.data4,

 7           DW.FORM.data8 and DW.FORM.data16 can be anything. Depending on

 8           context, it may be a signed integer, an unsigned integer, a AEoati*
 *ng-point

 9           constant, or anything else. A consumer must use context to know ho*
 *w to

10           interpret the bits, which if they are target machine data (such as*
 * an integer

11           or AEoating-point constant) will be in target machine byte order.


12           If one of the DW.FORM.data!n?forms is used to represent a signed o*
 *r unsigned

13           integer, it can be hard for a consumer to discover the context nec*
 *essary to

14           determine which interpretation is intended. Producers are therefor*
 *e strongly

15           encouraged to use DW.FORM.sdata or DW.FORM.udata for signed and

16           unsigned integers respectively, rather than DW.FORM.data!n?.


17        #  exprval

18           A DWARF expression that evaluates to a value (see Section 2.5 on p*
 *age 26).

19           This is represented as an unsigned LEB128 length, followed by a by*
 *te

20           sequence of the specioed length (DW.FORM.exprval) containing the

21           expression.


22        #  AEag

23           A AEag is represented explicitly as a single byte of data (DW.FORM*
 *.AEag) or

24           implicitly (DW.FORM.AEag.present). In the orst case, if the AEag h*
 *as value

25           zero, it indicates the absence of the attribute; if the AEag has a*
 * non-zero

26           value, it indicates the presence of the attribute. In the second c*
 *ase, the

27           attribute is implicitly indicated as present, and no value is enco*
 *ded in the

28           debugging information entry itself.


29        #  lineptr

30           This is an ooeset into the .debug_line or .debug_line.dwo section

31           (DW.FORM.sec.ooeset). It consists of an ooeset from the beginning *
 *of the

32           .debug_line section to the orst byte of the data making up the lin*
 *e number

33           list for the compilation unit. It is relocatable in a relocatable *
 *object ole, and

34           relocated in an executable or shared object ole. In the 32-bit DWA*
 *RF

35           format, this ooeset is a 4-byte unsigned value; in the 64-bit DWAR*
 *F format,

36           it is an 8-byte unsigned value (see Section 7.4 on page 203).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 223
                                Chapter 7. Data Representation



 1        #  locdesc

 2           A DWARF location description (see Section 2.6 on page 39). This is

 3           represented as an unsigned LEB128 length, followed by a byte seque*
 *nce of

 4           the specioed length (DW.FORM.locdesc) containing the location

 5           description.


 6        #  loclist

 7           A location list (see Section 2.6.2 on page 44). This is represente*
 *d as either:


 8              ~ An index into the .debug_loclists section (DW.FORM.loclistx).*
 * The

 9                unsigned ULEB operand identioes an ooeset location relative t*
 *o the

10                base of that section (the location of the orst ooeset in the *
 *section, not the

11                orst byte of the section). The contents of that location is t*
 *hen added to

12                the base to determine the location of the target list of entr*
 *ies.


13              ~ An ooeset into the .debug_loclists section (DW.FORM.sec.ooese*
 *t).

14                The operand consists of a byte ooeset from the beginning of t*
 *he

15                .debug_loclists section. It is relocatable in a relocatable o*
 *bject ole,

16                and relocated in an executable or shared object ole. In the 3*
 *2-bit

17                DWARF format, this ooeset is a 4-byte unsigned value; in the *
 *64-bit

18                DWARF format, it is an 8-byte unsigned value (see Section 7.4*
 * on

19                page 203).


20        #  loclistsptr

21           This is an ooeset into the .debug_loclists section (DW.FORM.sec.oo*
 *eset).

22           The operand consists of a byte ooeset from the beginning of the

23           .debug_loclists section. It is relocatable in a relocatable object*
 * ole, and

24           relocated in an executable or shared object ole. In the 32-bit DWA*
 *RF

25           format, this ooeset is a 4-byte unsigned value; in the 64-bit DWAR*
 *F format,

26           it is an 8-byte unsigned value (see Section 7.4 on page 203).


27        #  macptr

28           This is an ooeset into the .debug_macro or .debug_macro.dwo section

29           (DW.FORM.sec.ooeset). It consists of an ooeset from the beginning *
 *of the

30           .debug_macro or .debug_macro.dwo section to the the header making *
 *up

31           the macro information list for the compilation unit. It is relocat*
 *able in a

32           relocatable object ole, and relocated in an executable or shared o*
 *bject ole. In

33           the 32-bit DWARF format, this ooeset is a 4-byte unsigned value; i*
 *n the 64-bit

34           DWARF format, it is an 8-byte unsigned value (see Section 7.4 on p*
 *age 203).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 224
                                Chapter 7. Data Representation



 1        #  rnglist

 2           This is represented as either:


 3              ~ An index into the .debug_rnglists section (DW.FORM.rnglistx).*
 * The

 4                unsigned ULEB operand identioes an ooeset location relative t*
 *o the

 5                base of that section (the location of the orst ooeset in the *
 *section, not the

 6                orst byte of the section). The contents of that location is t*
 *hen added to

 7                the base to determine the location of the target range list o*
 *f entries.


 8              ~ An ooeset into the .debug_rnglists section (DW.FORM.sec.ooese*
 *t).

 9                The operand consists of a byte ooeset from the beginning of t*
 *he

10                .debug_rnglists section. It is relocatable in a relocatable o*
 *bject ole,

11                and relocated in an executable or shared object ole. In the 3*
 *2-bit

12                DWARF format, this ooeset is a 4-byte unsigned value; in the *
 *64-bit

13                DWARF format, it is an 8-byte unsigned value (see Section 7.4*
 * on

14                page 203).


15        #  rnglistsptr

16           This is an ooeset into the .debug_rnglists section (DW.FORM.sec.oo*
 *eset).

17           It consists of a byte ooeset from the beginning of the .debug_rngl*
 *ists

18           section. It is relocatable in a relocatable object ole, and reloca*
 *ted in an

19           executable or shared object ole. In the 32-bit DWARF format, this *
 *ooeset is a

20           4-byte unsigned value; in the 64-bit DWARF format, it is an 8-byte

21           unsigned value (see Section 7.4 on page 203).


22        #  reference

23           There are four types of reference.


24              ~ The orst type of reference can identify any debugging informa*
 *tion

25                entry within the containing unit. This type of reference is a*
 *n ooeset

26                from the orst byte of the compilation header for the compilat*
 *ion unit

27                containing the reference. There are ove forms for this type o*
 *f reference.

28                There are oxed length forms for one, two, four and eight byte*
 * ooesets

29                (respectively, DW.FORM.ref1, DW.FORM.ref2, DW.FORM.ref4,

30                and DW.FORM.ref8). There is also an unsigned variable length *
 *ooeset

31                encoded form that uses unsigned LEB128 numbers

32                (DW.FORM.ref.udata). Because this type of reference is within*
 * the

33                containing compilation unit, no relocation of the value is re*
 *quired.


34              ~ The second type of reference can identify any debugging infor*
 *mation

35                entry within a .debug_info section; in particular, it may ref*
 *er to an

36                entry in a dioeerent compilation unit from the unit containin*
 *g the

37                reference, and may refer to an entry in a dioeerent shared ob*
 *ject ole.

38                This type of reference (DW.FORM.ref.addr) is an ooeset from t*
 *he



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 225
                                Chapter 7. Data Representation



 1               beginning of the .debug_info section of the target executable *
 *or

 2               shared object ole, or, for references within a supplementary o*
 *bject ole,

 3               an ooeset from the beginning of the local .debug_info section;*
 * it is

 4               relocatable in a relocatable object ole and frequently relocat*
 *ed in an

 5               executable or shared object ole. In the 32-bit DWARF format, t*
 *his

 6               ooeset is a 4-byte unsigned value; in the 64-bit DWARF format,*
 * it is an

 7               8-byte unsigned value (see Section 7.4 on page 203).


 8               A debugging information entry that may be referenced by anothe*
 *r compilation

 9               unit using DW.FORM.ref.addr must have a global symbolic name.


10               For a reference from one executable or shared object ole to an*
 *other, the

11               reference is resolved by the debugger to identify the executab*
 *le or shared object

12               ole and the ooeset into that ole's .debug_info section in the *
 *same fashion as

13               the run time loader, either when the debug information is orst*
 * read, or when

14               the reference is used.


15              ~The third type of reference can identify any debugging informa*
 *tion

16               type entry that has been placed in its own type unit. This typ*
 *e of

17               reference (DW.FORM.ref.sig8) is the 8-byte type signature (see

18               Section 7.32 on page 257) that was computed for the type.


19              ~The fourth type of reference is a reference from within the .d*
 *ebug_info

20               section of the executable or shared object ole to a debugging

21               information entry in the .debug_info section of a supplementary

22               object ole. This type of reference (DW.FORM.ref.sup4 or

23               DW.FORM.ref.sup8) is a 4- or 8-byte ooeset (respectively) from*
 * the

24               beginning of the .debug_info section in the supplementary obje*
 *ct ole.


25               The use of compilation unit relative references will reduce th*
 *e number of

26               link-time relocations and so speed up linking. The use of the *
 *second, third and

27               fourth type of reference allows for the sharing of information*
 *, such as types,

28               across compilation units, while the fourth type further allows*
 * for sharing of

29               information across compilation units from dioeerent executable*
 *s or shared

30               object oles.


31               A reference to any kind of compilation unit identioes the debu*
 *gging

32               information entry for that unit, not the preceding header.


33        #  string

34           A string is a sequence of contiguous non-null bytes followed by on*
 *e null

35           byte. A string may be represented:


36              ~ Immediately in the debugging information entry itself

37                (DW.FORM.string),



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 226
                                Chapter 7. Data Representation



 1              ~As an ooeset into a string table contained in the .debug_str s*
 *ection of

 2               the object ole (DW.FORM.strp or DW.FORM.strp8), the

 3                .debug_line_str section of the object ole (DW.FORM.line.strp)*
 *, or

 4                as an ooeset into a string table contained in the .debug_str *
 *section of a

 5                supplementary object ole (DW.FORM.strp.sup or

 6                DW.FORM.strp.sup8), DW.FORM.strp.sup ooesets from the

 7                .debug_info section of a supplementary object ole refer to th*
 *e local

 8                .debug_str section of that same ole.


 9                In the 32-bit DWARF format, the representation of a DW.FORM.s*
 *trp,

10                DW.FORM.line.strp or DW.FORM.strp.sup value is a 4-byte

11                unsigned ooeset; in the 64-bit DWARF format, it is an 8-byte *
 *unsigned

12                ooeset (see Section 7.4 on page 203). In both 32-bit and 64-b*
 *it formats,

13                the representation of a DW.FORM.strp8 or DW.FORM.strp.sup8

14                value is an 8-byte unsigned ooeset.


15              ~ As an indirect ooeset into the string table using an index in*
 *to a table of

16                ooesets contained in the .debug_str_offsets section of the ob*
 *ject ole

17                (DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2,

18                DW.FORM.strx3 and DW.FORM.strx4). The representation of a

19                DW.FORM.strx value is an unsigned LEB128 value, which is

20                interpreted as a zero-based index into an array of ooesets in*
 * the

21                .debug_str_offsets section. The representation of a

22                DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

23                DW.FORM.strx4 value is a 1-, 2-, 3- or 4-byte unsigned intege*
 *r value,

24                respectively, which is similarly interpreted. The ooeset entr*
 *ies in the

25                .debug_str_offsets section are described in Section 7.26 on p*
 *age 252.


26           Any combination of these three forms may be used within a single

27           compilation.


28           If the DW.AT.use.UTF8 attribute is specioed for the compilation, p*
 *artial,

29           skeleton or type unit entry, string values are encoded using the U*
 *TF-8

30           (Unicode Transformation Format-8) from the Universal Character Set

31           standard (ISO/IEC 10646-1:1993). Otherwise, the string representat*
 *ion is

32           unspecioed.


33           The Unicode Standard Version 3 is fully compatible with ISO/IEC 10*
 *646-1:1993.

34           It contains all the same characters and encoding points as ISO/IEC*
 * 10646, as well

35           as additional information about the characters and their use.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 227
                                Chapter 7. Data Representation



 1           Earlier versions of DWARF did not specify the representation of st*
 *rings; for

 2           compatibility, this version also does not. However, the UTF-8 repr*
 *esentation is

 3           strongly recommended.


 4        #  strooesetsptr

 5           This is an ooeset into the .debug_str_offsets section

 6           (DW.FORM.sec.ooeset). It consists of an ooeset from the beginning *
 *of the

 7           .debug_str_offsets section to the header of the string ooesets inf*
 *ormation

 8           for the referencing entity. It is relocatable in a relocatable obj*
 *ect ole, and

 9           relocated in an executable or shared object ole. In the 32-bit DWA*
 *RF

10           format, this ooeset is a 4-byte unsigned value; in the 64-bit DWAR*
 *F format,

11           it is an 8-byte unsigned value (see Section 7.4 on page 203).


12        #  vallist

13           A value list (see Section 2.5.2 on page 38). This class has the sa*
 *me

14           representation as class loclist.


15           This class is new in DWARF Version 6.


16      In no case does an attribute use one of the classes addrptr, lineptr, l*
 *oclistsptr,

17      macptr, rnglistsptr or strooesetsptr to point into either the .debug_in*
 *fo or

18      .debug_str section.



19      7.5.6   Form Encodings


20      The form encodings are listed in Table 7.6 following.



                             Table 7.6: Attribute form encodings
         ______________________________________________________________________*
 *______
         _Form_name________________||_Value_||Classes__________________________*
 *______

          DW.FORM.addr          ||    0x01  ||address

          Reserved                   ||0x02  ||

          DW.FORM.block2        ||    0x03  ||block

          DW.FORM.block4        ||    0x04  ||block

          DW.FORM.data2         ||    0x05  ||constant

          DW.FORM.data4         ||    0x06  ||constant

          DW.FORM.data8         ||    0x07  ||constant

          DW.FORM.string         ||   0x08  ||string

          DW.FORM.block         ||    0x09  ||block

         _DW.FORM.block1________||____0x0a__||block____________________________*
 *______

          Continued on next page



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 228
                        Chapter 7. Data Representation



 _Form_name________________||Value_||Classes_________________________________

  DW.FORM.data1         ||    0x0b  ||constant

  DW.FORM.AEag           ||   0x0c  ||AEag

  DW.FORM.sdata          ||   0x0d  ||constant

  DW.FORM.strp           ||   0x0e  ||string

  DW.FORM.udata         ||    0x0f  ||constant

  DW.FORM.ref.addr      ||    0x10  ||reference

  DW.FORM.ref1           ||   0x11  ||reference

  DW.FORM.ref2           ||   0x12  ||reference

  DW.FORM.ref4           ||   0x13  ||reference

  DW.FORM.ref8           ||   0x14  ||reference

  DW.FORM.ref.udata      ||   0x15  ||reference

  DW.FORM.indirect       ||   0x16  ||(see Section 7.5.3 on page 211)

  DW.FORM.sec.ooeset     ||   0x17  ||addrptr, lineptr, loclist, loclistsptr,

                            |       |macptr, rnglist, rnglistsptr, strooesetsptr
                            |       |
  DW.FORM.exprloc        ||   0x18  ||exprval, locdesc

  DW.FORM.AEag.present   ||   0x19  ||AEag

  DW.FORM.strx           ||   0x1a  ||string

  DW.FORM.addrx         ||    0x1b  ||address

  DW.FORM.ref.sup4      ||    0x1c  ||reference

  DW.FORM.strp.sup      ||    0x1d  ||string

  DW.FORM.data16        ||    0x1e  ||constant

  DW.FORM.line.strp      ||   0x1f  ||string

  DW.FORM.ref.sig8       ||   0x20  ||reference

  DW.FORM.implicit.const ||   0x21  ||constant

  DW.FORM.loclistx        ||  0x22  ||loclist, vallist

  DW.FORM.rnglistx       ||   0x23  ||rnglist

  DW.FORM.ref.sup8      ||    0x24  ||reference

  DW.FORM.strx1          ||   0x25  ||string

  DW.FORM.strx2          ||   0x26  ||string

  DW.FORM.strx3          ||   0x27  ||string

  DW.FORM.strx4          ||   0x28  ||string

 _DW.FORM.addrx1________||____0x29__||address________________________________

  Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 229
                                Chapter 7. Data Representation



         _Form_name________________||Value_||Classes___________________________*
 *______

          DW.FORM.addrx2        ||    0x2a  ||address

          DW.FORM.addrx3        ||    0x2b  ||address

          DW.FORM.addrx4        ||    0x2c  ||address

          DW.FORM.strp8 #        ||   0x2d  ||string

         _DW.FORM.strp.sup8_#____||___0x2e__||string___________________________*
 *______

          # New in DWARF Version 6



 1      7.6    Variable Length Data


 2      Integers may be encoded using iLittle-Endian Base 128j (LEB128) numbers.

 3      LEB128 is a scheme for encoding integers densely that exploits the assu*
 *mption

 4      that most integers are small in magnitude.


 5      This encoding is equally suitable whether the target machine architectu*
 *re represents data

 6      in big-endian or little-endian byte order. It is ilittle-endianj only i*
 *n the sense that it

 7      avoids using space to represent the ibigj end of an unsigned integer, w*
 *hen the big end is

 8      all zeroes or sign extension bits.


 9      Unsigned LEB128 (ULEB128) numbers are encoded as follows: start at the *
 *low

10      order end of an unsigned integer and chop it into 7-bit chunks. Place e*
 *ach chunk

11      into the low order 7 bits of a byte. Typically, several of the high ord*
 *er bytes will

12      be zero, which may be discarded. Emit the remaining bytes in a stream, *
 *starting

13      with the low order byte; set the high order bit on each byte except the*
 * last

14      emitted byte. The high bit of zero on the last byte indicates to the de*
 *coder that it

15      has encountered the last byte.


16      The integer zero is a special case, consisting of a single zero byte.


17      Table 7.7 on the next page gives some examples of unsigned LEB128 numbe*
 *rs.

18      The 0x80 in each case is the high order bit of the byte, indicating tha*
 *t an

19      additional byte follows.


20      The encoding for signed, two's complement LEB128 (SLEB128) numbers is

21      similar, except that the criterion for discarding high order bytes is n*
 *ot whether

22      they are zero, but whether they consist entirely of sign extension bits*
 *. Consider

23      the 4-byte integer -2. The three high level bytes of the number are sig*
 *n extension,

24      thus LEB128 would represent it as a single byte containing the low orde*
 *r 7 bits,

25      with the high order bit cleared to indicate the end of the byte stream.*
 * Note that

26      there is nothing within the LEB128 representation that indicates whethe*
 *r an



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 230
                                Chapter 7. Data Representation



 1      encoded number is signed or unsigned. The decoder must know what type of

 2      number to expect. Table 7.7 gives some examples of unsigned LEB128 numb*
 *ers

 3      and Table 7.8 gives some examples of signed LEB128 numbers.


 4      Some producers may choose to insert padding or alignment bytes by retai*
 *ning (not

 5      discarding) one or more high-order bytes that would not aoeect the deco*
 *ded value.


 6      Appendix C on page 296 gives algorithms for encoding and decoding these*
 * forms.



                      Table 7.7: Examples of unsigned LEB128 encodings
                      _________________________________________________
                      _______Number_______||__First_byte_||Second_byte__

                                 2           ||   2     ||    ~

                                127          ||  127    ||    ~

                                128          ||0 + 0x80  ||    1

                                129          ||1 + 0x80  ||    1

                      _________12857_________||57_+_0x80__||__100______



                       Table 7.8: Examples of signed LEB128 encodings
                      ___________________________________________________
                      _______Number_______||__First_byte__||Second_byte__

                                2           ||    2      ||    ~

                                -2           || 0x7e    ||     ~

                               127          ||127 + 0x80  ||   0

                               -127          ||1 + 0x80   ||  0x7f

                               128          || 0 + 0x80   ||   1

                               -128          ||0 + 0x80   ||  0x7f

                               129          || 1 + 0x80   ||   1

                      _________-129__________||0x7f_+_0x80_||_0x7e_______



 7      7.7    DWARF Expressions and Location Descriptions



 8      7.7.1   DWARF Expressions


 9      A DWARF expression is stored in a block of contiguous bytes. The bytes *
 *form a

10      sequence of operations. Each operation is a 1-byte code that identioes *
 *that

11      operation, followed by zero or more bytes of additional data. The encod*
 *ings for

12      the operations are described in Table 7.9 on the next page.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 231
                        Chapter 7. Data Representation



                     Table 7.9: DWARF operation encodings
________________________________________________________________________________
                               |      |  No. of   |
                               |      |           |
_Operation____________________||Code_||Operands_||_Notes________________________

 Reserved                      ||0x01  ||  -      ||

 Reserved                      ||0x02  ||  -      ||

 DW.OP.addr                ||   0x03  ||   1      ||constant address

                               |      |           |(size is target specioc)
                               |      |           |
 Reserved                      ||0x04  ||  -      ||

 Reserved                      ||0x05  ||  -      ||

 DW.OP.deref                ||  0x06  ||   0      ||

 Reserved                      ||0x07  ||  -      ||

 DW.OP.const1u              ||  0x08  ||   1      ||1-byte constant

 DW.OP.const1s              ||  0x09  ||   1      ||1-byte constant

 DW.OP.const2u              ||  0x0a  ||   1      ||2-byte constant

 DW.OP.const2s              ||  0x0b  ||   1      ||2-byte constant

 DW.OP.const4u              ||  0x0c  ||   1      ||4-byte constant

 DW.OP.const4s              ||  0x0d  ||   1      ||4-byte constant

 DW.OP.const8u              ||  0x0e  ||   1      ||8-byte constant

 DW.OP.const8s              ||  0x0f  ||   1      ||8-byte constant

 DW.OP.constu               ||  0x10  ||   1      ||ULEB128 constant

 DW.OP.consts               ||  0x11  ||   1      ||SLEB128 constant

 DW.OP.dup                 ||   0x12  ||   0      ||

 DW.OP.drop                ||   0x13  ||   0      ||

 DW.OP.over                 ||  0x14  ||   0      ||

 DW.OP.pick                 ||  0x15  ||   1      ||1-byte stack index

 DW.OP.swap                ||   0x16  ||   0      ||

 DW.OP.rot                  ||  0x17  ||   0      ||

 DW.OP.xderef               ||  0x18  ||   0      ||

 DW.OP.abs                  ||  0x19  ||   0      ||

 DW.OP.and                 ||   0x1a  ||   0      ||

 DW.OP.div                  ||  0x1b  ||   0      ||

_DW.OP.minus_______________||___0x1c__||___0______||____________________________

 Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 232
                        Chapter 7. Data Representation



                              |      |  No. of   |
                              |      |           |
_Operation____________________||Code_||Operands_||Notes_________________________

 DW.OP.mod                 ||   0x1d  ||   0      ||

 DW.OP.mul                 ||   0x1e  ||   0      ||

 DW.OP.neg                 ||   0x1f  ||   0      ||

 DW.OP.not                  ||  0x20  ||   0      ||

 DW.OP.or                   ||  0x21  ||   0      ||

 DW.OP.plus                 ||  0x22  ||   0      ||

 DW.OP.plus.uconst          ||  0x23  ||   1      ||ULEB128 addend

 DW.OP.shl                  ||  0x24  ||   0      ||

 DW.OP.shr                  ||  0x25  ||   0      ||

 DW.OP.shra                 ||  0x26  ||   0      ||

 DW.OP.xor                  ||  0x27  ||   0      ||

 DW.OP.bra                  ||  0x28  ||   1      ||signed 2-byte constant

 DW.OP.eq                   ||  0x29  ||   0      ||

 DW.OP.ge                   ||  0x2a  ||   0      ||

 DW.OP.gt                   ||  0x2b  ||   0      ||

 DW.OP.le                   ||  0x2c  ||   0      ||

 DW.OP.lt                    || 0x2d  ||   0      ||

 DW.OP.ne                   ||  0x2e  ||   0      ||

_DW.OP.skip_________________||__0x2f__||___1______||signed_2-byte_constant______

 DW.OP.lit0                  || 0x30  ||   0      ||

 DW.OP.lit1                  || 0x31  ||   0      ||literals 0 .. 31 =

 . . .                           ||  ||          || (DW.OP.lit0 + literal)

_DW.OP.lit31_________________||_0x4f__||___0______||____________________________

 DW.OP.reg0                 ||  0x50  ||   0      ||

 DW.OP.reg1                 ||  0x51  ||   0      ||reg 0 .. 31 =

 . . .                           ||  ||          || (DW.OP.reg0 + regnum)

_DW.OP.reg31________________||__0x6f__||___0______||____________________________

 DW.OP.breg0                ||  0x70  ||   1      ||SLEB128 ooeset

 DW.OP.breg1                ||  0x71  ||   1      ||base register 0 .. 31 =

 ...                            ||   ||          || (DW.OP.breg0 + regnum)

_DW.OP.breg31_______________||__0x8f__||___1______||___________________________*
 *__

 Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 233
                        Chapter 7. Data Representation



                              |      |  No. of   |
                              |      |           |
_Operation____________________||Code_||Operands_||Notes________________________*
 *__

 DW.OP.regx                 ||  0x90  ||   1      ||ULEB128 register

 DW.OP.fbreg                ||  0x91  ||   1      ||SLEB128 ooeset

 DW.OP.bregx                ||  0x92  ||   2      ||ULEB128 register,

                              |      |           |SLEB128 ooeset
                              |      |           |
 DW.OP.piece                ||  0x93  ||   1      ||ULEB128 size of piece

 DW.OP.deref.size           ||  0x94  ||   1      ||1-byte size of data retriev*
 *ed

 DW.OP.xderef.size          ||  0x95  ||   1      ||1-byte size of data retriev*
 *ed

 DW.OP.nop                 ||   0x96  ||   0      ||

 DW.OP.push.object.address ||   0x97  ||   0      ||

 DW.OP.call2                 || 0x98  ||   1      ||2-byte ooeset of DIE

 DW.OP.call4                 || 0x99  ||   1      ||4-byte ooeset of DIE

 DW.OP.call.ref              || 0x9a  ||   1      ||4- or 8-byte ooeset of DIE

 DW.OP.form.tls.address     ||  0x9b  ||   0      ||

 DW.OP.call.frame.cfa       ||  0x9c  ||   0      ||

 DW.OP.bit.piece            ||  0x9d  ||   2      ||ULEB128 size,

                              |      |           |ULEB128 ooeset
                              |      |           |
 DW.OP.implicit.value       ||  0x9e  ||   2      ||ULEB128 size,

                              |      |           |block of that size
                              |      |           |
 DW.OP.stack.value          ||  0x9f  ||   0      ||

 DW.OP.implicit.pointer      || 0xa0  ||         ||4- or 8-byte ooeset of DIE,

                              |      |           |SLEB128 constant ooeset
                              |      |           |
 DW.OP.addrx               ||   0xa1  ||   1      ||ULEB128 indirect address

 DW.OP.constx               ||  0xa2  ||   1      ||ULEB128 indirect constant

 DW.OP.entry.value          ||  0xa3  ||   2      ||ULEB128 size,

                              |      |           |block of that size
                              |      |           |
 DW.OP.const.type           ||  0xa4  ||   3      ||ULEB128 type entry ooeset,

                              |      |           |1-byte size,
                              |      |           |
                              |      |           |constant value
                              |      |           |
 DW.OP.regval.type          ||  0xa5  ||   2      ||ULEB128 register number,

                              |      |           |ULEB128 constant ooeset
______________________________|______|___________|______________________________
 Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 234
                               Chapter 7. Data Representation



                                     |      |  No. of   |
                                     |      |           |
       _Operation____________________||Code_||Operands_||Notes_________________*
 *________

        DW.OP.deref.type           ||  0xa6  ||   2      ||1-byte size,

                                     |      |           |ULEB128 type entry ooe*
 *set
                                     |      |           |
        DW.OP.xderef.type          ||  0xa7  ||   2      ||1-byte size,

                                     |      |           |ULEB128 type entry ooe*
 *set
                                     |      |           |
        DW.OP.convert              ||  0xa8  ||   1      ||ULEB128 type entry o*
 *oeset

        DW.OP.reinterpret           || 0xa9  ||   1      ||ULEB128 type entry o*
 *oeset

        DW.OP.regval.bits #         || 0xaa  ||   1      ||ULEB128 oeld size,

                                     |      |   TOS #   |integer bit ooeset,
                                     |      |           |
                                     |      |  TOS - 1   |integer register numb*
 *er
                                     |      |            |
        DW.OP.push.lane #          ||  0xab  ||   0      ||

        DW.OP.extended #           ||  0xde  ||  1 +     ||

        DW.OP.user.extended #      ||  0xdf  ||  1 +     ||

        DW.OP.lo.user              ||  0xe0  ||          ||

       _DW.OP.hi.user______________||__0xff__||__________||____________________*
 *________

        # New in DWARF Version 6              # TOS indicates parameter on top *
 *of stack



1      7.7.2   Location Descriptions


2      A location description is used to compute the location of a variable or *
 *other

3      entity.



4      7.7.3   Location Lists


5      Each entry in a location list is either a location list entry, a base ad*
 *dress entry, a

6      default location entry or an end-of-list entry.


7      Each entry begins with an unsigned 1-byte code that indicates the kind o*
 *f entry

8      that follows. The encodings for these constants are given in Table 7.10 *
 *on the

9      following page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 235
                               Chapter 7. Data Representation



                       Table 7.10: Location list entry encoding values
                        ____________________________________________
                        _Location_list_entry_encoding_name_||Value__

                         DW.LLE.end.of.list              ||  0x00

                         DW.LLE.base.addressx           ||   0x01

                         DW.LLE.startx.endx             ||   0x02

                         DW.LLE.startx.length            ||  0x03

                         DW.LLE.ooeset.pair              ||  0x04

                         DW.LLE.default.location         ||  0x05

                         DW.LLE.base.address            ||   0x06

                         DW.LLE.start.end                ||  0x07

                         DW.LLE.start.length             ||  0x08

                         DW.LLE.include.loclist #         || 0x09

                         DW.LLE.include.loclistx #        || 0x0a

                         DW.LLE.lo.user #                ||  0xc0

                        _DW.LLE.hi.user_#________________||__0xff___

                         # New in DWARF Version 6



1      If a producer deones a producer-specioc kind of location list entry, the*
 * kind code

2      must be immediately followed by an unsigned LEB128 value that specioes t*
 *he

3      length of all remaining bytes (not including either the kind or the leng*
 *th itself)

4      for that entry.



5      7.8    Base Type Attribute Encodings


6      The encodings of the constants used in the DW.AT.encoding attribute are *
 *given

7      in Table 7.11.


                           Table 7.11: Base type encoding values
                         __________________________________________
                         _Base_type_encoding_name________||Value___

                          DW.ATE.address               ||   0x01

                          DW.ATE.boolean               ||   0x02

                          DW.ATE.complex.AEoat         ||   0x03

                         _DW.ATE.AEoat__________________||__0x04___

                          Continued on next page            ||



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 236
                               Chapter 7. Data Representation



                        _Base_type_encoding_name________||_Value__

                         DW.ATE.signed                ||   0x05

                         DW.ATE.signed.char           ||   0x06

                         DW.ATE.unsigned              ||   0x07

                         DW.ATE.unsigned.char        ||    0x08

                         DW.ATE.imaginary.AEoat       ||   0x09

                         DW.ATE.packed.decimal       ||    0x0a

                         DW.ATE.numeric.string        ||   0x0b

                         DW.ATE.edited                ||   0x0c

                         DW.ATE.signed.oxed          ||    0x0d

                         DW.ATE.unsigned.oxed        ||    0x0e

                         DW.ATE.decimal.AEoat          ||  0x0f

                         DW.ATE.UTF                  ||    0x10

                         DW.ATE.UCS                  ||    0x11

                         DW.ATE.ASCII                 ||   0x12

                         DW.ATE.complex.signed #     ||    0x13

                         DW.ATE.imaginary.signed #    ||   0x14

                         DW.ATE.complex.unsigned #   ||    0x15

                         DW.ATE.imaginary.unsigned # ||    0x16

                         DW.ATE.signed.bitint #        ||  0x17

                         DW.ATE.unsigned.bitint #      ||  0x18

                         DW.ATE.lo.user               ||   0x80

                         _DW.ATE.hi.user_______________||___0xff___

                          # New in DWARF Version 6



1      The encodings of the constants used in the DW.AT.decimal.sign attribute *
 *are

2      given in Table 7.12 on the following page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 237
                               Chapter 7. Data Representation



                             Table 7.12: Decimal sign encodings
                           ______________________________________
                           _Decimal_sign_code_name_____||Value___

                            DW.DS.unsigned           ||   0x01

                            DW.DS.leading.overpunch ||    0x02

                            DW.DS.trailing.overpunch ||   0x03

                            DW.DS.leading.separate    ||  0x04

                           _DW.DS.trailing.separate____||_0x05___



1      The encodings of the constants used in the DW.AT.endianity attribute are*
 * given

2      in Table 7.13.


                              Table 7.13: Endianity encodings
                              ________________________________
                              _Endian_code_name____||_Value___

                               DW.END.default    ||   0x00

                               DW.END.big        ||   0x01

                               DW.END.little       || 0x02

                               DW.END.lo.user    ||   0x40

                              _DW.END.hi.user____||___0xff____



3      7.9    Accessibility Codes


4      The encodings of the constants used in the DW.AT.accessibility attribute*
 * are

5      given in Table 7.14.


                             Table 7.14: Accessibility encodings
                             ___________________________________
                             _Accessibility_code_name_||Value___

                              DW.ACCESS.public     ||   0x01

                              DW.ACCESS.protected  ||   0x02

                             _DW.ACCESS.private____||___0x03____



6      7.10     Visibility Codes


7      The encodings of the constants used in the DW.AT.visibility attribute ar*
 *e given

8      in Table 7.15 on the next page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 238
                                Chapter 7. Data Representation



                               Table 7.15: Visibility encodings
                               ________________________________
                               _Visibility_code_name__||Value__

                                DW.VIS.local        || 0x01

                                DW.VIS.exported    ||  0x02

                               _DW.VIS.qualioed____||__0x03____



 1      7.11     Virtuality Codes


 2      The encodings of the constants used in the DW.AT.virtuality attribute a*
 *re given

 3      in Table 7.16.


                               Table 7.16: Virtuality encodings
                          __________________________________________
                          _Virtuality_code_name____________||Value__

                           DW.VIRTUALITY.none        ||     0x00

                           DW.VIRTUALITY.virtual       ||   0x01

                          _DW.VIRTUALITY.pure.virtual_||____0x02____



 4      The value DW.VIRTUALITY.none is equivalent to the absence of the

 5      DW.AT.virtuality attribute.



 6      7.12     Source Languages


 7      The encodings of the constants used in the DW.AT.language.name attribut*
 *e are

 8      given in Table 7.17 on the next page. Table 7.17 on the following page *
 *also shows

 9      the default lower bound, if any, assumed for an omitted DW.AT.lower.bou*
 *nd

10      attribute in the context of a DW.TAG.subrange.type debugging information

11      entry_for_each_deoned_language.________________________________________*
 *__

              Continued on next page



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 239
                        Chapter 7. Data Representation



    __Language_name__________________||__Value__||Default_Lower_Bound___



                       Table 7.17: Language encodings
     ____________________________________________________________________
     _Language_name__________________||__Value__||Default_Lower_Bound____

      DW.LNAME.Ada                ||     0x0001 ||         1

      DW.LNAME.BLISS              ||     0x0002 ||         0

      DW.LNAME.C                  ||     0x0003 ||         0

      DW.LNAME.C.plus.plus        ||     0x0004 ||         0

      DW.LNAME.Cobol              ||     0x0005 ||         1

      DW.LNAME.Crystal #           ||    0x0006 ||         0

      DW.LNAME.D                  ||     0x0007 ||         0

      DW.LNAME.Dylan              ||     0x0008 ||         0

      DW.LNAME.Fortran             ||    0x0009 ||         1

      DW.LNAME.Go                 ||     0x000a ||         0

      DW.LNAME.Haskell             ||    0x000b ||         0

      DW.LNAME.Java                ||    0x000c ||         0

      DW.LNAME.Julia               ||   0x000d ||          1

      DW.LNAME.Kotlin #            ||    0x000e ||         0

      DW.LNAME.Modula2           ||      0x000f  ||        1

      DW.LNAME.Modula3           ||      0x0010 ||         1

      DW.LNAME.ObjC               ||     0x0011 ||         0

      DW.LNAME.ObjC.plus.plus     ||     0x0012 ||         0

      DW.LNAME.OCaml             ||      0x0013 ||         0

      DW.LNAME.OpenCL.C7        ||       0x0014 ||         0

      DW.LNAME.Pascal              ||    0x0015 ||         1

      DW.LNAME.PLI                ||     0x0016 ||         1

      DW.LNAME.Python             ||     0x0017 ||         0

      DW.LNAME.RenderScript       ||     0x0018 ||         0

      DW.LNAME.Rust               ||     0x0019 ||         0

      DW.LNAME.Swift               ||    0x001a ||         0

      DW.LNAME.UPC               ||      0x001b ||         0

     _DW.LNAME.Zig_#_______________||____0x001c_||_________0_____________

      Continued on next page
_______________________________
   7Formerly DW.LANG.OpenCL in DWARF Version 5.



July 15 2024               ***WORKING DRAFT***                       Page 240
                               Chapter 7. Data Representation



           __Language_name__________________||__Value__||Default_Lower_Bound___

             DW.LNAME.Assembly #         ||    0x001d ||          0

             DW.LNAME.C.sharp #          ||    0x001e ||          0

             DW.LNAME.Mojo #             ||    0x001f  ||         0

             DW.LNAME.GLSL #             ||    0x0020 ||          0

             DW.LNAME.GLSL.ES #         ||     0x0021 ||          0

             DW.LNAME.HLSL #             ||    0x0022 ||          0

             DW.LNAME.OpenCL.CPP #     ||      0x0023 ||          0

             DW.LNAME.CPP.for.OpenCL # ||      0x0024 ||          0

             DW.LNAME.SYCL #             ||    0x0025 ||          0

             DW.LNAME.Ruby #             ||    0x0026 ||          0

             DW.LNAME.Move #             ||    0x0027 ||          0

             DW.LNAME.Hylo #             ||    0x0028 ||          0

             DW.LNAME.HIP #              ||    0x0029 ||          0

             DW.LNAME.Odin #             ||    0x002a ||          0

             DW.LNAME.lo.user             ||    0x8000 ||

            _DW.LNAME.hi.user_____________||____0xffff_||_______________________

             # Base language is new in DWARF Version 6



1      7.13     Address Class Encodings


2      The value of the common address class encoding DW.ADDR.none is 0.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 241
                               Chapter 7. Data Representation



1      7.14     Identioer Case


2      The encodings of the constants used in the DW.AT.identioer.case attribut*
 *e are

3      given in Table 7.18.



                            Table 7.18: Identioer case encodings
                             ___________________________________
                             _Identioer_case_name_____||Value___

                              DW.ID.case.sensitive   || 0x00

                              DW.ID.up.case         ||  0x01

                              DW.ID.down.case      ||   0x02

                             _DW.ID.case.insensitive_||_0x03____



4      7.15     Calling Convention Encodings


5      The encodings of the constants used in the DW.AT.calling.convention attr*
 *ibute

6      are given in Table 7.19.



                          Table 7.19: Calling convention encodings
                           _____________________________________
                           _Calling_convention_name___||_Value__

                            DW.CC.normal            ||   0x01

                            DW.CC.program          ||    0x02

                            DW.CC.nocall             ||  0x03

                            DW.CC.pass.by.reference ||   0x04

                            DW.CC.pass.by.value     ||   0x05

                            DW.CC.lo.user            ||  0x40

                           _DW.CC.hi.user___________||___0xff___



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 242
                               Chapter 7. Data Representation



1      7.16     Inline Codes


2      The encodings of the constants used in the DW.AT.inline attribute are gi*
 *ven in

3      Table 7.20.


                                Table 7.20: Inline encodings
                          _________________________________________
                          _Inline_code_name______________||Value___

                           DW.INL.not.inlined          ||  0x00

                           DW.INL.inlined               || 0x01

                           DW.INL.declared.not.inlined ||  0x02

                          _DW.INL.declared.inlined_____||__0x03____



4      7.17     Array Ordering


5      The encodings of the constants used in the DW.AT.ordering attribute are *
 *given

6      in Table 7.21.


                              Table 7.21: Ordering encodings
                              ________________________________
                              _Ordering_name_______||_Value___

                               DW.ORD.row.major ||     0x00

                              _DW.ORD.col.major__||____0x01___



7      7.18     Discriminant Lists


8      The descriptors used in the DW.AT.discr.list attribute are encoded as 1-*
 *byte

9      constants. The deoned values are given in Table 7.22.



                        Table 7.22: Discriminant descriptor encodings
                              ________________________________
                              _Descriptor_name______||Value___

                               DW.DSC.label       ||  0x00

                              _DW.DSC.range______||___0x01____



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 243
                                Chapter 7. Data Representation



 1      7.19     Name Index Table


 2      The version number in the name index table header is 6.


 3      The name index attributes and their encodings are listed in Table 7.23.



                          Table 7.23: Name index attribute encodings
                    ______________________________________________________
                    _Attribute_name_________||Value__||Form/Class_________

                     DW.IDX.compile.unit ||     1    ||constant

                     DW.IDX.type.unit     ||    2    ||constant

                     DW.IDX.die.ooeset     ||   3    ||reference

                     DW.IDX.parent        ||    4    ||constant

                     DW.IDX.type.hash    ||     5    ||DW.FORM.data8

                     DW.IDX.external #     ||   6    ||AEag

                     DW.IDX.lo.user       || 0x2000 ||

                    _DW.IDX.hi.user_______||_0x3fff_||____________________

                     # New in DWARF Version 6



 4      It is suggested that producers should use the form code DW.FORM.AEag.pr*
 *esent for the

 5      DW.IDX.external attribute for abbreviation codes that represent externa*
 *l names.


 6      The abbreviations table ends with an entry consisting of a single 0 byt*
 *e for the

 7      abbreviation code. The size of the table given by abbrev_table_size may

 8      include optional padding following the terminating 0 byte.



 9      7.20     Defaulted Member Encodings


10      The encodings of the constants used in the DW.AT.defaulted attribute ar*
 *e given

11      in Table 7.24 following.



                           Table 7.24: Defaulted attribute encodings
                          _________________________________________
                          _Defaulted_name________________||_Value__

                           DW.DEFAULTED.no          ||      0x00

                           DW.DEFAULTED.in.class      ||    0x01

                          _DW.DEFAULTED.out.of.class_||_____0x02___



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 244
                                Chapter 7. Data Representation



 1      7.21     Address Range Table


 2      Each .debug_aranges section contribution begins with a header containin*
 *g:


 3      1.  unit_length (initial length)

 4          A 4-byte or 12-byte length containing the length of the set of entr*
 *ies for this

 5          compilation unit, not including the length oeld itself (see Section*
 * 7.4 on

 6          page 203).


 7      2.  version (uhalf)

 8          A 2-byte version identioer representing the version of the DWARF

 9          information for the address range table.


10          This value in this oeld is 2.


11      3.  debug_info_offset (section ooeset)

12          A 4-byte or 8-byte ooeset into the .debug_info section of the compi*
 *lation unit

13          header. In the 32-bit DWARF format, this is a 4-byte unsigned ooese*
 *t; in the

14          64-bit DWARF format, this is an 8-byte unsigned ooeset (see Section*
 * 7.4 on

15          page 203).


16      4.  address_size (ubyte)

17          A 1-byte unsigned integer containing the size in bytes of an addres*
 *s.


18      5.  reserved 8 (ubyte, MBZ)


19      This header is followed by a series of tuples. Each tuple consists of a*
 *n address

20      and a length. The address and length size are each given by the address*
 *_size

21      oeld of the header. The orst tuple following the header in each set beg*
 *ins at an

22      ooeset that is a multiple of the size of a single tuple (that is, twice*
 * the size of an

23      address). The header is padded, if necessary, to that boundary. Each se*
 *t of tuples

24      is terminated by a 0 for the address and a 0 for the length.
        _______________________________
           8This allows backward compatible support of the deprecated segment_s*
 *elector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 245
                               Chapter 7. Data Representation



1      7.22     Line Number Information


2      The version number in the line number program header is 6.


3      The boolean values itruej and ifalsej used by the line number information

4      program are encoded as a single byte containing the value 0 for ifalse,j*
 * and a

5      non-zero value for itrue.j


6      The encodings for the standard opcodes are given in Table 7.25.



                     Table 7.25: Line number standard opcode encodings
                          _______________________________________
                          _Opcode_name________________||__Value__

                           DW.LNS.extended.op #      ||   0x00

                           DW.LNS.copy               ||   0x01

                           DW.LNS.advance.pc        ||    0x02

                           DW.LNS.advance.line       ||   0x03

                           DW.LNS.set.ole             ||  0x04

                           DW.LNS.set.column         ||   0x05

                           DW.LNS.negate.stmt        ||   0x06

                           DW.LNS.set.basic.block     ||  0x07

                           DW.LNS.const.add.pc      ||    0x08

                           DW.LNS.oxed.advance.pc   ||    0x09

                           DW.LNS.set.prologue.end   ||   0x0a

                           DW.LNS.set.epilogue.begin ||   0x0b

                          _DW.LNS.set.isa_____________||__0x0c___

                           # New in DWARF Version 6



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 246
                               Chapter 7. Data Representation



1      The encodings for the extended opcodes are given in Table 7.26.



                    Table 7.26: Line number extended opcode encodings
                        ____________________________________________
                        _Opcode_name_____________________||_Value___

                         DW.LNE.end.sequence           ||    0x01

                         DW.LNE.set.address             ||   0x02

                         Reserved                           ||0x039

                         DW.LNE.set.discriminator        ||  0x04

                         DW.LNE.padding #               ||   0x05

                         DW.LNE.set.prologue.epilogue # ||   0x06

                         DW.LNE.lo.user                 ||   0x80

                        _DW.LNE.hi.user_________________||___0xff___

                         # New in DWARF Version 6



2      The encodings for the line number header entry formats are given in Tabl*
 *e 7.27.



                   Table  7.27:    Line  number  header  entry  format

                   encodings
                     __________________________________________________
                     _Line_number_header_entry_format_name_||__Value___

                      DW.LNCT.path                       ||     0x1

                      DW.LNCT.directory.index             ||    0x2

                      DW.LNCT.timestamp                  ||     0x3

                      DW.LNCT.size                        ||    0x4

                      DW.LNCT.MD5                       ||      0x5

                      DW.LNCT.source #                    ||    0x6

                      DW.LNCT.URL #                      ||     0x7

                      DW.LNCT.lo.user                     ||  0x2000

                     _DW.LNCT.hi.user_____________________||__0x3fff___

                      # New in DWARF Version 6


       _______________________________
          9Code 0x03 is reserved to allow backward compatible support of the DW*
 *.LNE.deone.ole

       operation which was deoned in DWARF Version 4 and earlier.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 247
                               Chapter 7. Data Representation



1      7.23     Macro Information


2      The version number in the macro information header is 5.


3      The source line numbers and source ole indices encoded in the macro

4      information section are represented as unsigned LEB128 numbers.


5      The macro information entry type is encoded as a single unsigned byte. T*
 *he

6      encodings are given in Table 7.28 on the following page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 248
                        Chapter 7. Data Representation



              Table 7.28: Macro information entry type encodings
                ______________________________________________
                _Macro_information_entry_type_name_||_Value___

                 DW.MACRO.padding #            ||     0x00

                 DW.MACRO.deone                ||     0x01

                 DW.MACRO.undef                ||     0x02

                 DW.MACRO.start.ole              ||   0x03

                 DW.MACRO.end.ole              ||     0x04

                 DW.MACRO.deone.strp           ||     0x05

                 DW.MACRO.undef.strp           ||     0x06

                 DW.MACRO.import               ||     0x07

                 Reserved                            ||0x0810

                 Reserved                            ||0x0911

                 Reserved                            ||0x0a12

                 DW.MACRO.deone.strx           ||     0x0b

                 DW.MACRO.undef.strx            ||    0x0c

                 DW.MACRO.deone.sup4 #         ||     0x0d

                 DW.MACRO.deone.sup8 #         ||     0x0e

                 DW.MACRO.undef.sup4 #         ||      0x0f

                 DW.MACRO.undef.sup8 #         ||     0x10

                 DW.MACRO.import.sup4 #        ||     0x11

                 DW.MACRO.import.sup8 #        ||     0x12

                 DW.MACRO.lo.user               ||    0xe0

                _DW.MACRO.hi.user_______________||____0xff____

                 # New in DWARF Version 6


_______________________________
   10Code   0x08   is   reserved   to   allow   backward   compatible   support*
 *   of   the

DW.MACRO.deone.sup entry type that was deoned (only) in DWARF Version 5.
   11Code 0x09 is reserved to allow backward compatible support of the DW.MACRO*
 *.undef.sup

entry type that was deoned (only) in DWARF Version 5.
   12Code   0x0a   is   reserved   to   allow   backward   compatible   support*
 *   of   the

DW.MACRO.import.sup entry type that was deoned (only) in DWARF Version 5.



July 15 2024               ***WORKING DRAFT***                       Page 249
                               Chapter 7. Data Representation



1      7.24     Call Frame Information


2      In the 32-bit DWARF format, the value of the CIE id in the CIE header is

3      0xffffffff; in the 64-bit DWARF format, the value is 0xffffffffffffffff.


4      The value of the CIE version number is 4.


5      Call frame instructions are encoded in one or more bytes. The primary op*
 *code is

6      encoded in the high order two bits of the orst byte (that is, opcode = b*
 *yte >> 6).

7      An operand or extended opcode may be encoded in the low order 6 bits.

8      Additional operands are encoded in subsequent bytes. The instructions an*
 *d their

9      encodings are presented in Table 7.29.



                        Table 7.29: Call frame instruction encodings
           _____________________________________________________________________
                                         |High 2 |  Low 6  |Operand 1,
                                         |       |         |

           _Instruction__________________||_Bits___||Bits___||Operand_2_________

            DW.CFA.advance.loc        ||    0x1   ||delta  ||

            DW.CFA.ooeset              ||   0x2   ||registerU||LEB128 ooeset

            DW.CFA.restore             ||   0x3   ||register ||

            DW.CFA.nop               ||      0    ||  0    ||

            DW.CFA.set.loc             ||    0    || 0x01   ||address

            DW.CFA.advance.loc1       ||     0    || 0x02   ||1-byte delta

            DW.CFA.advance.loc2       ||     0    || 0x03   ||2-byte delta

            DW.CFA.advance.loc4       ||     0    || 0x04   ||4-byte delta

            DW.CFA.ooeset.extended    ||     0    || 0x05   ||ULEB128 register,
                                      |           |         |ULEB128 ooeset
                                      |           |         |

            DW.CFA.restore.extended   ||     0    || 0x06   ||ULEB128 register

            DW.CFA.undeoned         ||       0    || 0x07   ||ULEB128 register

            DW.CFA.same.value        ||      0    || 0x08   ||ULEB128 register

            DW.CFA.register            ||    0    || 0x09   ||ULEB128 register,
                                       |          |         |ULEB128 ooeset
                                       |          |         |

            DW.CFA.remember.state    ||      0    || 0x0a   ||

            DW.CFA.restore.state       ||    0    ||0x0b   ||

            DW.CFA.def.cfa            ||     0    || 0x0c   ||ULEB128 register,
                                      |           |         |ULEB128 ooeset
           ___________________________|___________|_________|___________________

            Continued on next page



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 250
                               Chapter 7. Data Representation


           _____________________________________________________________________
                                         |High 2 | Low 6  | Operand 1,
                                         |       |        |

           _Instruction__________________||Bits___||Bits___||Operand_2__________

            DW.CFA.def.cfa.register    ||    0    ||0x0d   ||ULEB128 register

            DW.CFA.def.cfa.ooeset      ||    0    ||0x0e   ||ULEB128 ooeset

            DW.CFA.def.cfa.expression ||     0    ||0x0f   ||exprloc

            DW.CFA.expression         ||     0    || 0x10   ||ULEB128 register,
                                      |           |         |exprloc
                                      |           |         |

            DW.CFA.ooeset.extended.sf  ||    0    || 0x11   ||ULEB128 register,
                                       |          |         |SLEB128 ooeset
                                       |          |         |

            DW.CFA.def.cfa.sf          ||    0    || 0x12   ||ULEB128 register,
                                       |          |         |SLEB128 ooeset
                                       |          |         |

            DW.CFA.def.cfa.ooeset.sf    ||   0    || 0x13   ||SLEB128 ooeset

            DW.CFA.val.ooeset          ||    0    || 0x14   ||ULEB128 register,
                                       |          |         |ULEB128 ooeset
                                       |          |         |

            DW.CFA.val.ooeset.sf       ||    0    || 0x15   ||ULEB128 register,
                                       |          |         |SLEB128 ooeset
                                       |          |         |

            DW.CFA.val.expression     ||     0    || 0x16   ||ULEB128 register,
                                      |           |         |exprloc
                                      |           |         |

            DW.CFA.lo.user            ||     0    || 0x1c   ||

           _DW.CFA.hi.user____________||_____0____||_0x3f___||__________________



1      7.25     Range List Entries for Non-contiguous Address


2               Ranges


3      Each entry in a range list (see Section 2.17.3 on page 54) is either a r*
 *ange list

4      entry, a base address selection entry, or an end-of-list entry.


5      Each entry begins with an unsigned 1-byte code that indicates the kind o*
 *f entry

6      that follows. The encodings for these constants are given in Table 7.30 *
 *on the next

7      page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 251
                                Chapter 7. Data Representation



                         Table 7.30: Range list entry encoding values
                          __________________________________________
                          _Range_list_entry_encoding_name_||Value___

                           DW.RLE.end.of.list            || 0x00

                           DW.RLE.base.addressx        ||   0x01

                           DW.RLE.startx.endx           ||  0x02

                           DW.RLE.startx.length          || 0x03

                           DW.RLE.ooeset.pair            || 0x04

                           DW.RLE.base.address          ||  0x05

                           DW.RLE.start.end             ||  0x06

                           DW.RLE.start.length           || 0x07

                           DW.RLE.include.rnglist #      || 0x08

                           DW.RLE.include.rnglistx #     || 0x09

                           DW.RLE.lo.user #              || 0xc0

                          _DW.RLE.hi.user_#_____________||__0xff____

                           # New in DWARF Version 6



 1      If a producer deones a producer-specioc kind of range list entry, the k*
 *ind code

 2      must be immediately followed by an unsigned LEB128 value that specioes *
 *the

 3      length of all remaining bytes (not including either the kind or the len*
 *gth itself)

 4      for that entry.


 5      For a range list to be specioed, the base address of the corresponding *
 *compilation

 6      unit must be deoned (see Section 3.1.1 on page 62).



 7      7.26     String Ooesets Table


 8      Each .debug_str_offsets or .debug_str_offsets.dwo section contribution

 9      begins with a header containing:


10      1.  unit_length (initial length)

11          A 4-byte or 12-byte length containing the length of the set of entr*
 *ies for this

12          compilation unit, not including the length oeld itself (see Section*
 * 7.4 on

13          page 203).


14          The DWARF format used for the string ooesets table is not required *
 *to match

15          the format used by other sections describing the same compilation u*
 *nit.


16      2.  version (uhalf)

17          A 2-byte version identioer containing the value 5.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 252
                                Chapter 7. Data Representation



 1      3.  padding (uhalf)

 2          Reserved to DWARF (must be zero).


 3      This header is followed by a series of string table ooeset entries that*
 * have the same

 4      representation as DW.FORM.strp. For the 32-bit DWARF format, each ooese*
 *t is 4

 5      bytes long; for the 64-bit DWARF format, each ooeset is 8 bytes long.


 6      The DW.AT.str.ooesets attribute points to the header. The entries follo*
 *wing the

 7      header are indexed sequentially, starting from 0.


 8      This table may be padded with unused entries. These entries should have*
 * all 1 bits as a

 9      hint that the entries are unused.



10      7.27     Address Table


11      Each .debug_addr section contribution begins with a header containing:


12      1.  unit_length (initial length)

13          A 4-byte or 12-byte length containing the length of the set of entr*
 *ies for this

14          compilation unit, not including the length oeld itself (see Section*
 * 7.4 on

15          page 203).


16      2.  version (uhalf)

17          A 2-byte version identioer containing the value 5.


18      3.  address_size (ubyte)

19          A 1-byte unsigned integer containing the size in bytes of an addres*
 *s on the

20          target system.


21      4.  reserved 13 (ubyte, MBZ)


22      This header is followed by a series of addresses where the address size*
 * is given

23      by the address_size oeld of the header.


24      The DW.AT.addr.base attribute points to the orst entry following the he*
 *ader.

25      The entries are indexed sequentially from this base entry, starting fro*
 *m 0.


26      This table may be padded with unused entries. These entries should have*
 * all 1 bits as a

27      hint that the entries are unused.
        _______________________________
           13This allows backward compatible support of the deprecated segment_*
 *selector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 253
                                Chapter 7. Data Representation



 1      7.28     Range List Table


 2      Each .debug_rnglists and .debug_rnglists.dwo section contribution begins

 3      with a header containing:


 4      1.  unit_length (initial length)

 5          A 4-byte or 12-byte length containing the length of the set of entr*
 *ies for this

 6          compilation unit, not including the length oeld itself (see Section*
 * 7.4 on

 7          page 203).


 8      2.  version (uhalf)

 9          A 2-byte version identioer containing the value 5.


10      3.  address_size (ubyte)

11          A 1-byte unsigned integer containing the size in bytes of an addres*
 *s on the

12          target system.


13      4.  reserved 14 (ubyte, MBZ)


14      5.  offset_entry_count (uword)

15          A 4-byte count of the number of ooesets that follow the header. Thi*
 *s count

16          may be zero.


17      Immediately following the header is an array of ooesets. This array is *
 *followed by

18      a series of range lists.


19      If the offset_entry_count is non-zero, there is one ooeset for each ran*
 *ge list. The

20      contents of the ithooeset is the ooeset (an unsigned integer) from the *
 *beginning of

21      the ooeset array to the location of the ithrange list. In the 32-bit DW*
 *ARF format,

22      each ooeset is 4-bytes in size; in the 64-bit DWARF format, each ooeset*
 * is 8-bytes in

23      size (see Section 7.4 on page 203).


24      If the offset_entry_count is zero, then DW.FORM.rnglistx cannot be used*
 * to access

25      a range list; DW.FORM.sec.ooeset must be used instead. If the offset_en*
 *try_count

26      is non-zero, then DW.FORM.rnglistx may be used to access a range list.


27      Range lists are described in Section 2.17.3 on page 54.


28      The DW.AT.rnglists.base attribute points to the orst ooeset following t*
 *he header.

29      The range lists are referenced by the index of the position of their co*
 *rresponding

30      ooeset in the array of ooesets, which indirectly specioes the ooeset to*
 * the target list.


31      This table may be padded with unused entries. These entries should have*
 * all 1 bits as a

32      hint that the entries are unused.
        _______________________________
           14This allows backward compatible support of the deprecated segment_*
 *selector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 254
                                Chapter 7. Data Representation



 1      7.29     Value List and Location List Table


 2      Each .debug_loclists or .debug_loclists.dwo section contribution begins*
 * with

 3      a header containing:


 4      1.  unit_length (initial length)

 5          A 4-byte or 12-byte length containing the length of the set of entr*
 *ies for this

 6          compilation unit, not including the length oeld itself (see Section*
 * 7.4 on

 7          page 203).


 8      2.  version (uhalf)

 9          A 2-byte version identioer containing the value 5.


10      3.  address_size (ubyte)

11          A 1-byte unsigned integer containing the size in bytes of an addres*
 *s on the

12          target system.


13      4.  reserved 15 (ubyte, MBZ)


14      5.  offset_entry_count (uword)

15          A 4-byte count of the number of ooesets that follow the header. Thi*
 *s count

16          may be zero.


17      Immediately following the header is an array of ooesets. This array is *
 *followed by

18      a series of value lists and location lists.


19      If the offset_entry_count is non-zero, there is one ooeset for each val*
 *ue list and

20      location list. The contents of the ithooeset is the ooeset (an unsigned*
 * integer) from

21      the beginning of the ooeset array to the location of the ithvalue list *
 *or location list.

22      In the 32-bit DWARF format, each ooeset is 4-bytes in size; in the 64-b*
 *it DWARF

23      format, each ooeset is 8-bytes in size (see Section 7.4 on page 203).


24      If the offset_entry_count is zero, then DW.FORM.loclistx cannot be used*
 * to access

25      a value list or location list; DW.FORM.sec.ooeset must be used instead.*
 * If the

26      offset_entry_count is non-zero, then DW.FORM.loclistx may be used to ac*
 *cess a

27      value list or location list.


28      Value lists are described in Section 2.5.2 on page 38. Location lists a*
 *re described

29      in Section 2.6.2 on page 44.


30      The DW.AT.loclists.base attribute points to the orst ooeset following t*
 *he header.

31      The value lists and location lists are referenced by the index of the p*
 *osition of

32      their corresponding ooeset in the array of ooesets, which indirectly sp*
 *ecioes the

33      ooeset to the target list.
        _______________________________
           15This allows backward compatible support of the deprecated segment_*
 *selector_size oeld

        which was deoned in DWARF Version 5 and earlier.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 255
                                Chapter 7. Data Representation



 1      7.30     Dependencies and Constraints


 2      The debugging information in this format is intended to exist in sectio*
 *ns of an

 3      object ole, or an equivalent separate ole or database, having names beg*
 *inning

 4      with the preox ".debug." (see Appendix G on page 440 for a complete lis*
 *t of such

 5      names). Except as speciocally specioed, this information is not aligned*
 * on 2-, 4-

 6      or 8-byte boundaries. Consequently:


 7        #  For the 32-bit DWARF format and a target architecture with 32-bit

 8           addresses, an assembler or compiler must provide a way to produce *
 *2-byte

 9           and 4-byte quantities without alignment restrictions, and the link*
 *er must be

10           able to relocate a 4-byte address or section ooeset that occurs at*
 * an arbitrary

11           alignment.


12        #  For the 32-bit DWARF format and a target architecture with 64-bit

13           addresses, an assembler or compiler must provide a way to produce *
 *2-byte,

14           4-byte and 8-byte quantities without alignment restrictions, and t*
 *he linker

15           must be able to relocate an 8-byte address or 4-byte section ooese*
 *t that

16           occurs at an arbitrary alignment.


17        #  For the 64-bit DWARF format and a target architecture with 32-bit

18           addresses, an assembler or compiler must provide a way to produce *
 *2-byte,

19           4-byte and 8-byte quantities without alignment restrictions, and t*
 *he linker

20           must be able to relocate a 4-byte address or 8-byte section ooeset*
 * that occurs

21           at an arbitrary alignment.


22           It is expected that this will be required only for very large 32-b*
 *it programs or by

23           those architectures which support a mix of 32-bit and 64-bit code *
 *and data within

24           the same executable object.


25        #  For the 64-bit DWARF format and a target architecture with 64-bit

26           addresses, an assembler or compiler must provide a way to produce *
 *2-byte,

27           4-byte and 8-byte quantities without alignment restrictions, and t*
 *he linker

28           must be able to relocate an 8-byte address or section ooeset that *
 *occurs at an

29           arbitrary alignment.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 256
                                Chapter 7. Data Representation



 1      7.31     Integer Representation Names


 2      The sizes of the integers used in the lookup by name, lookup by address*
 *, line

 3      number, call frame information and other sections are given in Table 7.*
 *31.



                           Table 7.31: Integer representation names
                      _________________________________________________
                      _Representation_name_||_Representation___________

                               sbyte         ||signed, 1-byte integer

                               ubyte         ||unsigned, 1-byte integer

                               uhalf         ||unsigned, 2-byte integer

                      _________uword________||unsigned,_4-byte_integer__



 4      7.32     Type Signature Computation


 5      A type signature is used by a DWARF consumer to resolve type references*
 * to the

 6      type deonitions that are contained in type units (see Section 3.1.4 on *
 *page 72).


 7      A type signature is computed only by a DWARF producer; a consumer need *
 *only

 8      compare two type signatures to check for equality.


 9      The type signature for a type T0 is formed from the MD516 digest of a A*
 *Eattened

10      description of the type. The AEattened description of the type is a byt*
 *e sequence

11      derived from the DWARF encoding of the type as follows:


12      1.  Start with an empty sequence S and a list V of visited types, where*
 * V is

13          initialized to a list containing the type T0 as its single element.*
 * Elements in V

14          are indexed from 1, so that V[1] is T0.


15      2.  If the debugging information entry represents a type that is nested*
 * inside

16          another type or a namespace, append to S the type's context as foll*
 *ows: For

17          each surrounding type or namespace, beginning with the outermost su*
 *ch

18          construct, append the letter 'C', the DWARF tag of the construct, a*
 *nd the

19          name (taken from the DW.AT.name attribute) of the type or namespace

20          (including its trailing null byte).


21      3.  Append to S the letter 'D', followed by the DWARF tag of the debugg*
 *ing

22          information entry.
        _______________________________
           16MD5 Message Digest Algorithm, R.L. Rivest, RFC 1321, April 1992



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 257
                               Chapter 7. Data Representation



1      4.  For each of the attributes in Table 7.32 that are present in the deb*
 *ugging

2          information entry, in the order listed, append to S a marker letter *
 *(see below),

3          the DWARF attribute code, and the attribute value.



                  Table 7.32: Attributes used in type signature computation

       ________________________________________________________________________*
 *_____



        DW.AT.name                       DW.AT.endianity

        DW.AT.accessibility              DW.AT.enum.class

        DW.AT.address.class              DW.AT.explicit

        DW.AT.alignment                  DW.AT.is.optional

        DW.AT.allocated                  DW.AT.location

        DW.AT.artiocial                  DW.AT.lower.bound

        DW.AT.associated                 DW.AT.mutable

        DW.AT.binary.scale               DW.AT.ordering

        DW.AT.bit.size                   DW.AT.picture.string

        DW.AT.bit.stride                 DW.AT.prototyped

        DW.AT.byte.size                  DW.AT.rank

        DW.AT.byte.stride                DW.AT.reference

        DW.AT.const.expr                 DW.AT.rvalue.reference

        DW.AT.const.value                DW.AT.scale.divisor

        DW.AT.containing.type            DW.AT.scale.multiplier

        DW.AT.count                      DW.AT.small

        DW.AT.data.bit.ooeset            DW.AT.string.length

        DW.AT.data.location              DW.AT.string.length.bit.size

        DW.AT.data.member.location       DW.AT.string.length.byte.size

        DW.AT.decimal.scale              DW.AT.threads.scaled

        DW.AT.decimal.sign               DW.AT.upper.bound

        DW.AT.default.value              DW.AT.use.location

        DW.AT.digit.count                DW.AT.use.UTF8

        DW.AT.discr                      DW.AT.variable.parameter

        DW.AT.discr.list                 DW.AT.virtuality

        DW.AT.discr.value                DW.AT.visibility

        DW.AT.encoding                   DW.AT.vtable.elem.location

       ________________________________________________________________________*
 *_____



4          Note that except for the initial DW.AT.name attribute, attributes are

5          appended in order according to the alphabetical spelling of their id*
 *entioer.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 258
                                Chapter 7. Data Representation



 1         If an implementation deones any producer-specioc attributes, any such

 2          attributes that are essential to the deonition of the type are also*
 * included at

 3          the end of the above list, in their own alphabetical suborder.


 4          An attribute that refers to another type entry T is processed as fo*
 *llows:


 5           a)If T is in the list V at some V[x], use the letter 'R' as the ma*
 *rker and use

 6             the unsigned LEB128 encoding of x as the attribute value.


 7           b)Otherwise, append type T to the list V, then use the letter 'T' *
 *as the

 8             marker, process the type T recursively by performing Steps 2 thr*
 *ough 7,

 9             and use the result as the attribute value.


10          Other attribute values use the letter 'A' as the marker, and the va*
 *lue consists

11          of the form code (encoded as an unsigned LEB128 value) followed by *
 *the

12          encoding of the value according to the form code. To ensure reprodu*
 *cibility

13          of the signature, the set of forms used in the signature computatio*
 *n is limited

14          to the following: DW.FORM.sdata, DW.FORM.AEag, DW.FORM.string,

15          DW.FORM.exprval, and DW.FORM.block.


16      5.  If the tag in Step 3 is one of DW.TAG.pointer.type,

17          DW.TAG.reference.type, DW.TAG.rvalue.reference.type,

18          DW.TAG.ptr.to.member.type, or DW.TAG.friend, and the referenced

19          type (via the DW.AT.type or DW.AT.friend attribute) has a DW.AT.name

20          attribute, append to S the letter 'N', the DWARF attribute code (DW*
 *.AT.type

21          or DW.AT.friend), the context of the type (according to the method *
 *in Step

22          2), the letter 'E', and the name of the type. For DW.TAG.friend, if*
 * the

23          referenced entry is a DW.TAG.subprogram, the context is omitted and*
 * the

24          name to be used is the ABI-specioc name of the subprogram (for exam*
 *ple, the

25          mangled linker name).


26      6.  If the tag in Step 3 is not one of DW.TAG.pointer.type,

27          DW.TAG.reference.type, DW.TAG.rvalue.reference.type,

28          DW.TAG.ptr.to.member.type, or DW.TAG.friend, but has a DW.AT.type

29          attribute, or if the referenced type (via the DW.AT.type or DW.AT.f*
 *riend

30          attribute) does not have a DW.AT.name attribute, the attribute is p*
 *rocessed

31          according to the method in Step 4 for an attribute that refers to a*
 *nother type

32          entry.


33      7.  Visit each child C of the debugging information entry as follows: I*
 *f C is a

34          nested type entry or a member function entry, and has a DW.AT.name

35          attribute, append to S the letter 'S', the tag of C, and its name; *
 *otherwise,

36          process C recursively by performing Steps 3 through 7, appending th*
 *e result

37          to S. Following the last child (or if there are no children), appen*
 *d a zero byte.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 259
                                Chapter 7. Data Representation



 1      For the purposes of this algorithm, if a debugging information entry S *
 *has a

 2      DW.AT.speciocation attribute that refers to another entry D (which has a

 3      DW.AT.declaration attribute), then S inherits the attributes and childr*
 *en of D,

 4      and S is processed as if those attributes and children were present in *
 *the entry S.

 5      Exception: if a particular attribute is found in both S and D, the attr*
 *ibute in S is

 6      used and the corresponding one in D is ignored.


 7      DWARF tag and attribute codes are appended to the sequence as unsigned

 8      LEB128 values, using the values deoned earlier in this chapter.


 9      A grammar describing this computation may be found in Appendix E.2.2 on*
 * page 410.


10      An attribute that refers to another type entry is recursively processed*
 * or replaced with the

11      name of the referent (in Step 4, 5 or 6). If neither treatment applies *
 *to an attribute that

12      references another type entry, the entry that contains that attribute i*
 *s not suitable for a

13      separate type unit.


14      If a debugging information entry contains an attribute from the list ab*
 *ove that would

15      require an unsupported form, that entry is not suitable for a separate *
 *type unit.


16      A type is suitable for a separate type unit only if all of the type ent*
 *ries that it contains or

17      refers to in Steps 6 and 7 are themselves suitable for a separate type *
 *unit.


18      Where the DWARF producer may reasonably choose two or more dioeerent fo*
 *rms for a

19      given attribute, it should choose the simplest possible form in computi*
 *ng the signature.

20      (For example, a constant value should be preferred to an expression whe*
 *n possible.)


21      Once the string S has been formed from the DWARF encoding, an 16-byte M*
 *D5

22      digest is computed for the string and the last eight bytes are taken as*
 * the type

23      signature.


24      The string S is intended to be a AEattened representation of the type t*
 *hat uniquely

25      identioes that type (that is, a dioeerent type is highly unlikely to pr*
 *oduce the same string).


26      A debugging information entry is not placed in a separate type unit if *
 *any of the

27      following apply:


28        #  The entry has an attribute whose value is a location description, *
 *and the location

29           description contains a reference to another debugging information *
 *entry (for

30           example, a DW.OP.call.ref operator), as it is unlikely that the en*
 *try will remain

31           identical across compilation units.


32        #  The entry has an attribute whose value refers to a code location o*
 *r a location list.


33        #  The entry has an attribute whose value refers to another debugging*
 * information

34           entry that does not represent a type.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 260
                                Chapter 7. Data Representation



 1      Certain attributes are not included in the type signature:


 2        #  The DW.AT.declaration attribute is not included because it indicat*
 *es that the

 3           debugging information entry represents an incomplete declaration, *
 *and incomplete

 4           declarations should not be placed in separate type units.


 5        #  The DW.AT.description attribute is not included because it does no*
 *t provide any

 6           information unique to the deoning declaration of the type.


 7        #  The DW.AT.decl.ole, DW.AT.decl.line, and DW.AT.decl.column attribu*
 *tes

 8           are not included because they may vary from one source ole to the *
 *next, and would

 9           prevent two otherwise identical type declarations from producing t*
 *he same MD5

10           digest.


11        #  The DW.AT.object.pointer attribute is not included because the inf*
 *ormation it

12           provides is not necessary for the computation of a unique type sig*
 *nature.


13      Nested types and some types referred to by a debugging information entr*
 *y are encoded by

14      name rather than by recursively encoding the type to allow for cases wh*
 *ere a complete

15      deonition of the type might not be available in all compilation units.


16      If a type deonition contains the deonition of a member function, it can*
 *not be moved as is

17      into a type unit, because the member function contains attributes that *
 *are unique to that

18      compilation unit. Such a type deonition can be moved to a type unit by *
 *rewriting the

19      debugging information entry tree, moving the member function declaratio*
 *n into a

20      separate declaration tree, and replacing the function deonition in the *
 *type with a

21      non-deoning declaration of the function (as if the function had been de*
 *oned out of line).


22      An example that illustrates the computation of an MD5 digest may be fou*
 *nd in

23      Appendix E.2 on page 400.



24      7.33     Name Table Hash Function


25      The hash function used for hashing name strings in the accelerated acce*
 *ss name

26      index table (see Section 6.1 on page 140) is deoned in C as shown in Fi*
 *gure 7.1

27      following.17
        _______________________________
           17This hash function is sometimes known as the "Bernstein hash funct*
 *ion" or the "DJB

        hash function" (see,  for example,  http://en.wikipedia.org/wiki/List.o*
 *f.hash.functions or
        http://stackoverAEow.com/questions/10696223/reason-for-5381-number-in-d*
 *jb-hash-function).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 261
                                Chapter 7. Data Representation


       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||uint32_t/*mustbea32-bitintegertype*/
       |||=====================================================================*
 *=====|||hash(unsignedchar*str)
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||uint32_thash=5381;
       |||=====================================================================*
 *=====|||intc;
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||while(c=*str++)
       |||=====================================================================*
 *=====|||hash=hash*33+c;
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||returnhash;
       |||=====================================================================*
 *=====|||}_|___|


                       Figure 7.1: Name Table Hash Function Deonition



 1      7.34     Contiguous Tables


 2      Tables within each section must be contiguous with the preceding table *
 *in that

 3      section, or the beginning of the section if there is no preceding table.


 4      Consumers may prefer to have these tables padded so that each subsequen*
 *t table is

 5      "aligned" on a certain boundary, typically 4 or 8 bytes. Every table of*
 * information has a

 6      way for the table as a whole to be padded if the producer wishes to do *
 *so. Tables from

 7      multiple object oles that are concatenated by a linker would then each *
 *be aligned without

 8      any special eoeort by the linker; this alignment may provide performanc*
 *e or other beneots.

 9      This padding is entirely optional, and does not relax any constraint sp*
 *ecioed in Section

10      7.30 on page 256.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 262
                        Chapter 7. Data Representation



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 263




 1      Appendix A



 2      Attributes by Tag Value (Informative)



 3      The table below enumerates the attributes that are most applicable to e*
 *ach type

 4      of debugging information entry. DWARF does not in general require that *
 *a given

 5      debugging information entry contain a particular attribute or set of at*
 *tributes.

 6      Instead, a DWARF producer is free to generate any, all, or none of the *
 *attributes

 7      described in the text as being applicable to a given entry. Other attri*
 *butes (both

 8      those deoned within this document but not explicitly associated with th*
 *e entry in

 9      question, and new, producer-deoned ones) may also appear in a given

10      debugging information entry. Therefore, the table may be taken as instr*
 *uctive,

11      but cannot be considered deonitive.


12      In the following table, the following special conventions apply:


13      1.  The DECL pseudo-attribute stands for all three of the declaration c*
 *oordinates

14          DW.AT.decl.column, DW.AT.decl.ole and DW.AT.decl.line.


15      2.  The DW.AT.description attribute can be used on any debugging inform*
 *ation

16          entry that may have a DW.AT.name attribute. For simplicity, this at*
 *tribute is

17          not explicitly shown.


18      3.  The DW.AT.sibling attribute can be used on any debugging information

19          entry. For simplicity, this attribute is not explicitly shown.


20      4.  The DW.AT.abstract.origin attribute can be used with almost any

21          debugging information entry; the exceptions are mostly the compilat*
 *ion

22          unit-like entries. For simplicity, this attribute is not explicitly*
 * shown.


23      5.  The DW.AT.artiocial attribute can be used with any declarative debu*
 *gging

24          information entry. For simplicity, this attribute is not shown.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 264
                 Appendix A. Attributes by Tag (Informative)



                        Table A.1: Attributes by tag value
   ________________________________________________________________________
   _TAG_name________________________||Applicable_attributes________________

    DW.TAG.access.declaration        ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.name
   __________________________________|_____________________________________
    DW.TAG.array.type               ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.bit.stride
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.ordering
                                     |
                                     |DW.AT.rank
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
   __________________________________|_____________________________________
    DW.TAG.atomic.type              ||DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 265
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.base.type                || DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bias
                                     |
                                     |DW.AT.binary.scale
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.bit.ooeset
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.decimal.scale
                                     |
                                     |DW.AT.decimal.sign
                                     |
                                     |DW.AT.digit.count
                                     |
                                     |DW.AT.encoding
                                     |
                                     |DW.AT.endianity
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.picture.string
                                     |
                                     |DW.AT.scale.divisor
                                     |
                                     |DW.AT.scale.multiplier
                                     |
                                     |DW.AT.small
   __________________________________|_____________________________________
    DW.TAG.call.site                 ||DW.AT.call.column
                                     |DW.AT.call.ole
                                     |
                                     |DW.AT.call.line
                                     |
                                     |DW.AT.call.origin
                                     |
                                     |DW.AT.call.pc
                                     |
                                     |DW.AT.call.return.pc
                                     |
                                     |DW.AT.call.tail.call
                                     |
                                     |DW.AT.call.target
                                     |
                                     |DW.AT.call.target.clobbered
                                     |
                                     |DW.AT.type
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 266
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.call.site.parameter        ||DW.AT.call.data.location
                                     |DW.AT.call.data.value
                                     |
                                     |DW.AT.call.parameter
                                     |
                                     |DW.AT.call.value
                                     |
                                     |DW.AT.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.catch.block              || DECL
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.ranges
  ___________________________________|____________________________________
   DW.TAG.class.type               || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.calling.convention
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.export.symbols
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.coarray.type             || DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 267
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.common.block           ||   DECL
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.linkage.name
                                     |
                                     |DW.AT.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.common.inclusion        ||  DECL
                                     |DW.AT.common.reference
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.compile.unit             || DW.AT.addr.base
                                     |DW.AT.base.types
                                     |
                                     |DW.AT.comp.dir
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.identioer.case
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.language.name
                                     |
                                     |DW.AT.language.version
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.macros
                                     |
                                     |DW.AT.main.subprogram
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.producer
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.rnglists.base
                                     |
                                     |DW.AT.stmt.list
                                     |
                                     |DW.AT.str.ooesets
                                     |
                                     |DW.AT.use.UTF8
   __________________________________|_____________________________________
    DW.TAG.condition                ||DECL
                                     |DW.AT.name
   __________________________________|_____________________________________
    DW.TAG.const.type               ||DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 268
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.constant                 || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.const.value
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.endianity
                                     |
                                     |DW.AT.external
                                     |
                                     |DW.AT.linkage.name
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
  _DW.TAG.dwarf.procedure_________||__DW.AT.location______________________

   DW.TAG.dynamic.type            ||  DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.entry.point              || DECL
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.frame.base
                                     |
                                     |DW.AT.linkage.name
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.return.addr
                                     |
                                     |DW.AT.static.link
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 269
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.enumeration.type         || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.bit.stride
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.byte.stride
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.enum.class
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.enumerator              ||  DECL
                                     |DW.AT.const.value
                                     |
                                     |DW.AT.name
  ___________________________________|____________________________________
   DW.TAG.ole.type                 || DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 270
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.formal.parameter         || DECL
                                     |DW.AT.const.value
                                     |
                                     |DW.AT.default.value
                                     |
                                     |DW.AT.endianity
                                     |
                                     |DW.AT.is.optional
                                     |
                                     |DW.AT.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.variable.parameter
  ___________________________________|____________________________________
   DW.TAG.friend                   || DECL
                                     |DW.AT.friend
  ___________________________________|____________________________________
   DW.TAG.generic.subrange         || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.bit.stride
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.byte.stride
                                     |
                                     |DW.AT.count
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.lower.bound
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.threads.scaled
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.upper.bound
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.immutable.type          ||  DECL
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 271
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.imported.declaration      ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.import
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
  ___________________________________|____________________________________
   DW.TAG.imported.module         ||  DECL
                                     |DW.AT.import
                                     |
                                     |DW.AT.start.scope
  ___________________________________|____________________________________
  _DW.TAG.imported.unit____________||_DW.AT.import________________________

   DW.TAG.inheritance               ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.data.member.location
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.virtuality
  ___________________________________|____________________________________
   DW.TAG.inlined.subroutine        ||DW.AT.call.column
                                     |DW.AT.call.ole
                                     |
                                     |DW.AT.call.line
                                     |
                                     |DW.AT.const.expr
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.return.addr
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.trampoline
  ___________________________________|____________________________________
   DW.TAG.interface.type            ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.start.scope
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 272
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.label                    || DECL
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
  ___________________________________|____________________________________
   DW.TAG.lexical.block             ||DECL
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.ranges
  ___________________________________|____________________________________
   DW.TAG.member                 ||   DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.bit.ooeset
                                     |
                                     |DW.AT.data.member.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.mutable
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.module                  ||  DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.priority
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.visibility
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 273
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.namelist                 || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.namelist.item            || DECL
                                     |DW.AT.namelist.item
  ___________________________________|____________________________________
   DW.TAG.namespace               ||  DECL
                                     |DW.AT.export.symbols
                                     |
                                     |DW.AT.extension
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
  ___________________________________|____________________________________
   DW.TAG.packed.type             ||  DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 274
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.partial.unit              ||DW.AT.addr.base
                                     |DW.AT.base.types
                                     |
                                     |DW.AT.comp.dir
                                     |
                                     |DW.AT.dwo.name
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.identioer.case
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.language.name
                                     |
                                     |DW.AT.language.version
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.macros
                                     |
                                     |DW.AT.main.subprogram
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.producer
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.rnglists.base
                                     |
                                     |DW.AT.stmt.list
                                     |
                                     |DW.AT.str.ooesets
                                     |
                                     |DW.AT.use.UTF8
   __________________________________|_____________________________________
    DW.TAG.pointer.type             ||DECL
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 275
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.ptr.to.member.type      ||  DECL
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.containing.type
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.use.location
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.reference.type            ||DECL
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.restrict.type              ||DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.rvalue.reference.type     ||DECL
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 276
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.set.type                 || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.shared.type              || DECL
                                     |DW.AT.count
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.skeleton.unit             ||DW.AT.addr.base
                                     |DW.AT.comp.dir
                                     |
                                     |DW.AT.dwo.name
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.rnglists.base
                                     |
                                     |DW.AT.stmt.list
                                     |
                                     |DW.AT.str.ooesets
                                     |
                                     |DW.AT.use.UTF8
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 277
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.string.type               ||DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.string.length
                                     |
                                     |DW.AT.string.length.bit.size
                                     |
                                     |DW.AT.string.length.byte.size
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.structure.type            ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.calling.convention
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.export.symbols
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.visibility
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 278
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.subprogram              ||  DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.calling.convention
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.defaulted
                                     |
                                     |DW.AT.deleted
                                     |
                                     |DW.AT.elemental
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.explicit
                                     |
                                     |DW.AT.external
                                     |
                                     |DW.AT.frame.base
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.inline
                                     |
                                     |DW.AT.linkage.name
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.main.subprogram
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.noreturn
                                     |
                                     |DW.AT.object.pointer
                                     |
                                     |DW.AT.prototyped
                                     |
                                     |DW.AT.pure
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.recursive
                                     |
                                     |DW.AT.reference
                                     |
                                     |DW.AT.return.addr
                                     |
                                     |DW.AT.rvalue.reference
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |Additional attributes continue on next pa*
 *ge
  ___________________________________|____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 279
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes_______________

   DW.TAG.subprogram (cont.)        ||DW.AT.start.scope
                                     |DW.AT.static.link
                                     |
                                     |DW.AT.trampoline
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
                                     |
                                     |DW.AT.virtuality
                                     |
                                     |DW.AT.vtable.elem.location
  ___________________________________|____________________________________
   DW.TAG.subrange.type            || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.bit.stride
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.byte.stride
                                     |
                                     |DW.AT.count
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.lower.bound
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.threads.scaled
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.upper.bound
                                     |
                                     |DW.AT.visibility
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 280
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.subroutine.type          || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.prototyped
                                     |
                                     |DW.AT.reference
                                     |
                                     |DW.AT.rvalue.reference
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.template.alias            ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.template.type.parameter  || DECL
                                     |DW.AT.default.value
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 281
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.template.value.parameter || DECL
                                     |DW.AT.const.value
                                     |
                                     |DW.AT.default.value
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.thrown.type             ||  DECL
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.try.block                || DECL
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.ranges
  ___________________________________|____________________________________
   DW.TAG.typedef                  || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
   DW.TAG.type.unit                || DW.AT.language.name
                                     |DW.AT.language.version
                                     |
                                     |DW.AT.stmt.list
                                     |
                                     |DW.AT.str.ooesets
                                     |
                                     |DW.AT.use.UTF8
   __________________________________|______________________________________
    Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 282
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.union.type              ||  DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.allocated
                                     |
                                     |DW.AT.associated
                                     |
                                     |DW.AT.bit.size
                                     |
                                     |DW.AT.byte.size
                                     |
                                     |DW.AT.calling.convention
                                     |
                                     |DW.AT.data.location
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.export.symbols
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.signature
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________
  _DW.TAG.unspecioed.parameters____||_DECL________________________________

   DW.TAG.unspecioed.type          || DECL
                                     |DW.AT.name
  ___________________________________|____________________________________
   DW.TAG.variable                 || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.alignment
                                     |
                                     |DW.AT.const.expr
                                     |
                                     |DW.AT.const.value
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.endianity
                                     |
                                     |DW.AT.external
                                     |
                                     |DW.AT.linkage.name
                                     |
                                     |DW.AT.location
                                     |
                                     |DW.AT.name
                                     |
                                     |DW.AT.speciocation
                                     |
                                     |DW.AT.start.scope
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|_____________________________________
   Continued on next page



July 15 2024               ***WORKING DRAFT***                       Page 283
                 Appendix A. Attributes by Tag (Informative)



  _TAG_name________________________||_Applicable_attributes________________

   DW.TAG.variant                  || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.discr.list
                                     |
                                     |DW.AT.discr.value
  ___________________________________|____________________________________
   DW.TAG.variant.part              ||DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.discr
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.volatile.type             ||DECL
                                     |DW.AT.name
                                     |
                                     |DW.AT.type
  ___________________________________|____________________________________
   DW.TAG.with.stmt                || DECL
                                     |DW.AT.accessibility
                                     |
                                     |DW.AT.address.class
                                     |
                                     |DW.AT.declaration
                                     |
                                     |DW.AT.entry.pc
                                     |
                                     |DW.AT.high.pc
                                     |
                                     |DW.AT.location
                                     |
                                     |DW.AT.low.pc
                                     |
                                     |DW.AT.ranges
                                     |
                                     |DW.AT.type
                                     |
                                     |DW.AT.visibility
  ___________________________________|____________________________________



July 15 2024               ***WORKING DRAFT***                       Page 284
                 Appendix A. Attributes by Tag (Informative)



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 285




 1      Appendix B



 2      Debug Section Relationships



 3      (Informative)



 4      DWARF information is organized into multiple program sections, each of *
 *which

 5      holds a particular kind of information. In some cases, information in o*
 *ne section

 6      refers to information in one or more of the others. These relationships*
 * are

 7      illustrated by the diagrams and associated notes on the following pages.


 8      In the ogures, a section is shown as a shaded oval with the name of the*
 * section

 9      inside. References from one section to another are shown by an arrow. I*
 *n the orst

10      ogure, the arrow is annotated with an unshaded box which contains an

11      indication of the construct (such as an attribute or form) that encodes*
 * the

12      reference. In the second ogure, this box is left out for reasons of spa*
 *ce in favor of

13      a label annotation that is explained in the subsequent notes.



14      B.1     Normal DWARF Section Relationships


15      Figure B.1 following illustrates the DWARF section relations without sp*
 *lit

16      DWARF object oles involved. Similarly, it does not show the relationshi*
 *ps

17      between the main debugging sections of an executable or sharable ole an*
 *d a

18      related supplementary object ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 286
                   Appendix B. Debug Section Relationships (Informative)



1      B.2     Split DWARF Section Relationships


2      Figure B.2 on page 292 illustrates the DWARF section relationships for s*
 *plit

3      DWARF object oles. However, it does not show the relationships between t*
 *he

4      main debugging sections of an executable or shareable ole and a related

5      supplementary object ole. For space reasons, the ogure omits some detail*
 *s that

6      are shown in Figure B.1, such as indirect references using indexing sect*
 *ions (such

7      as .debug_str_offsets).



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 287
            Appendix B. Debug Section Relationships (Informative)



                                                                               *
 *          DW.DW.AT.addr.baseMACRO.deone.strxDW.OP.addrxDW.MACRO.deone.strpDW.*
 *RLE.base.addressx

                                                                               *
 *         .debug_arangesTo.compilationdunite(a)bug_infoATo.compilationdunite(b*
 *)bug_names.debug_frameToDabbreviationsW(c).FORM.strp[8]D(d)W.AT.str.ooesetsDW*
 *.OP.call.refDW(f).AT.macrosD(g)W.AT.stmt.listD(h)W.AT.rangesDW.(i)AT.location*
 *,Detc.W(j).FORM.addrx[1,2,3,4].debug_a@
                                                                               *
 *          DW.FORM.strx[1,2,3,4]D(e)W.FORM.ref.addrDW.AT.rnglists.baseDW.OP.ad*
 *drx(m)DW.MACRO.start.oleDW.LLE.*x*(p)(q)DW.RLE.startx.length
July 15 2024               ***WORKING DRAFT***                       Page 288  *
 *              DW.OP.constx  (k)



                                                                               *
 *                               Figure B.1: Debug section relationships
                    Appendix B. Debug Section Relationships (Informative)



 1                                  Notes for Figure B.1


 2       (a) .debug_aranges to .debug_info

 3           The debug_info_offset value in the header is the ooeset in the .de*
 *bug_info

 4           section of the corresponding compilation unit header (not the comp*
 *ilation

 5           unit entry).


 6       (b) .debug_names to .debug_info

 7           The list of compilation units following the header contains the oo*
 *esets in the

 8           .debug_info section of the corresponding compilation unit headers *
 *(not the

 9           compilation unit entries).


10       (c) .debug_info to .debug_abbrev

11           The debug_abbrev_offset value in the header is the ooeset in the

12           .debug_abbrev section of the abbreviations for that compilation un*
 *it.


13       (d) .debug_info to .debug_str

14           Attribute values of class string may have form DW.FORM.strp or

15           DW.FORM.strp8, whose value is the ooeset in the .debug_str section*
 * of

16           the corresponding string.


17       (e) .debug_info to .debug_str_offsets

18           The value of the DW.AT.str.ooesets attribute in a DW.TAG.compile.u*
 *nit,

19           DW.TAG.type.unit or DW.TAG.partial.unit DIE is the ooeset in the

20           .debug_str_offsets section of the header of the string ooesets inf*
 *ormation

21           for that unit. In addition, attribute values of class string may h*
 *ave one of

22           the forms DW.FORM.strx, DW.FORM.strx1, DW.FORM.strx2,

23           DW.FORM.strx3 or DW.FORM.strx4, whose value is an index into the

24           string ooesets table.


25       (f) .debug_info to .debug_info

26           The operand of the DW.OP.call.ref DWARF expression operator is the

27           ooeset of a debugging information entry in the .debug_info section*
 * of

28           another compilation. Similarly for attribute operands that use

29           DW.FORM.ref.addr.


30       (g) .debug_info to .debug_macro

31           An attribute value of class macptr (speciocally form DW.FORM.sec.o*
 *oeset)

32           is an ooeset within the .debug_macro section of the beginning of t*
 *he macro

33           information for the referencing unit.


34       (h) .debug_info to .debug_line

35           An attribute value of class lineptr (speciocally form DW.FORM.sec.*
 *ooeset)

36           is an ooeset in the .debug_line section of the beginning of the li*
 *ne number

37           information for the referencing unit.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 289
                    Appendix B. Debug Section Relationships (Informative)



 1       (i) .debug_info to .debug_rnglists

 2           An attribute value of class rnglist (speciocally form DW.FORM.rngl*
 *istx or

 3           DW.FORM.sec.ooeset) is an index or ooeset within the .debug_rnglis*
 *ts

 4           section of a range list.


 5       (j) .debug_info to .debug_loclists

 6           An attribute value of class loclist (speciocally form DW.FORM.locl*
 *istx or

 7           DW.FORM.sec.ooeset) is an index or ooeset within the .debug_loclis*
 *ts

 8           section of a value list or location list.


 9       (k) .debug_info to .debug_addr

10           The value of the DW.AT.addr.base attribute in the

11           DW.TAG.compile.unit or DW.TAG.partial.unit DIE is the ooeset in the

12           .debug_addr section of the machine addresses for that unit.

13           DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

14           DW.FORM.addrx3, DW.FORM.addrx4, DW.OP.addrx and

15           DW.OP.constx contain indices relative to that ooeset.


16       (l) .debug_str_offsets to .debug_str

17           Entries in the string ooesets table are ooesets to the correspondi*
 *ng string text

18           in the .debug_str section.


19       (m) .debug_macro to .debug_str_offsets

20           The second operand of a DW.MACRO.deone.strx or

21           DW.MACRO.undef.strx macro information entry is an index into the

22           string ooeset table in the .debug_str_offsets section.


23       (n) .debug_macro to .debug_line

24           The second operand of DW.MACRO.start.ole refers to a ole entry in *
 *the

25           .debug_line section relative to the start of that section given in*
 * the macro

26           information header.


27       (o) .debug_loclists to .debug_addr

28           DW.OP.addrx and DW.OP.constx operators that occur in the

29           .debug_loclists section refer indirectly to the .debug_addr sectio*
 *n by way

30           of the DW.AT.addr.base attribute in the associated .debug_info sec*
 *tion.

31           Also, some operands of the DW.LLE.base.addressx,

32           DW.LLE.startx.endx and DW.LLE.startx.length value list or location*
 * list

33           entries have operands that are an index into the .debug_addr secti*
 *on.


34       (p) .debug_macro to .debug_str

35           The second operand of a DW.MACRO.deone.strp or

36           DW.MACRO.undef.strp macro information entry is an index into the

37           string table in the .debug_str section.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 290
                    Appendix B. Debug Section Relationships (Informative)



 1       (q) .debug_macro to .debug_macro

 2           The operand of a DW.MACRO.import macro information entry is an

 3           ooeset into another part of the .debug_macro section to the header*
 * for the

 4           sequence to be replicated.


 5       (r) .debug_line to .debug_line_str

 6           The value of a DW.FORM.line.strp form refers to a string section s*
 *pecioc

 7           to the line number table. This form can be used in a .debug_line s*
 *ection (as

 8           well as in a .debug_info section).


 9       (s) .debug_info to .debug_line_str

10           The value of a DW.FORM.line.strp form refers to a string section s*
 *pecioc

11           to the line number table. This form can be used in a .debug_info s*
 *ection (as

12           well as in a .debug_line section).1


13       (t) .debug_rnglists to .debug_addr

14           Some operands of DW.RLE.base.addressx, DW.RLE.startx.endx and

15           DW.RLE.startx.length range list entries are an an index into the

16           .debug_addr section.



        _______________________________
           1The circled (A) of the left connects to the circled (A) on the righ*
 *t via hyperspace (a wormhole).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 291
            Appendix B. Debug Section Relationships (Informative)



                                                                               *
 *         .debug_info.dwo

                                                                               *
 *        S.debug_info(onekCU,epossiblyletonSDWARFplit DWARF
                                                                               *
 *       .debug_abbrev.debug_addr.debug_aranges.debug_frame.debug_line.debug_li*
 *ne_str.debug_names.debug_rnglists.debug_str.debug_str_offsets.debug_abbrev.dw*
 *o.debug_loclists.dwo.debug_rnglists.dwo.debug_line.dwo.debug_macro.dwo.debug_*
 *str.dwo.debug_str_offsets.dwo(c)(k)(a)@
                                                                               *
 *        (skeletonmCU)ultipleiCOMDATniexecutablen separate object

                                                                               *
 *            type units)

July 15 2024               ***WORKING DRAFT***                       Page 292


                                                                               *
 *                            Figure B.2: Split DWARF section relationships
                    Appendix B. Debug Section Relationships (Informative)



 1                                  Notes for Figure B.2


 2       (a) .debug_aranges to .debug_info

 3           The debug_info_offset oeld in the header is the ooeset in the .deb*
 *ug_info

 4           section of the corresponding compilation unit header of the skelet*
 *on

 5           .debug_info section (not the compilation unit entry). The

 6           DW.AT.dwo.name attribute in the .debug_info skeleton connects the

 7           ranges to the full compilation unit in .debug_info.dwo.


 8       (b) .debug_names to .debug_info

 9           The .debug_names section ooesets lists provide an ooeset for the s*
 *keleton

10           compilation unit and eight byte signatures for the type units that*
 * appear

11           only in the .debug_info.dwo. The DIE ooesets for these compilation*
 * units

12           and type units refer to the DIEs in the .debug_info.dwo section fo*
 *r the

13           respective compilation unit and type units.


14       (c) .debug_info skeleton to .debug_abbrev

15           The debug_abbrev_offset value in the header is the ooeset in the

16           .debug_abbrev section of the abbreviations for that compilation un*
 *it

17           skeleton.


18       (co) .debug_info.dwo to .debug_abbrev.dwo

19           The debug_abbrev_offset value in the header is the ooeset in the

20           .debug_abbrev.dwo section of the abbreviations for that compilatio*
 *n unit.


21       (d) .debug_info to .debug_str

22           Attribute values of class string may have form DW.FORM.strp or

23           DW.FORM.strp8, whose value is an ooeset in the .debug_str section *
 *of the

24           corresponding string.


25       (did) .debug_info to .debug_info.dwo

26           The DW.AT.dwo.name attribute in a skeleton unit identioes the ole

27           containing the corresponding .dwo (split) data.


28       (e) .debug_info to .debug_str_offsets

29           Attribute values of class string may have one of the forms DW.FORM*
 *.strx,

30           DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

31           DW.FORM.strx4, whose value is an index into the .debug_str_offsets

32           section for the corresponding string.


33       (eo).debug_info.dwo to .debug_str_offsets.dwo

34           Attribute values of class string may have one of the forms DW.FORM*
 *.strx,

35           DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

36           DW.FORM.strx4, whose value is an index into the

37           .debug_str_offsets.dwo section for the corresponding string.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 293
                    Appendix B. Debug Section Relationships (Informative)



 1       (go) .debug_info.dwo to .debug_macro.dwo

 2           An attribute of class macptr (speciocally DW.AT.macros with form

 3           DW.FORM.sec.ooeset) is an ooeset within the .debug_macro.dwo secti*
 *on of

 4           the beginning of the macro information for the referencing unit.


 5       (h) .debug_info (skeleton) to .debug_line

 6           An attribute value of class lineptr (speciocally DW.AT.stmt.list w*
 *ith form

 7           DW.FORM.sec.ooeset) is an ooeset within the .debug_line section of*
 * the

 8           beginning of the line number information for the referencing unit.


 9       (ho) .debug_info.dwo to .debug_line.dwo (skeleton)

10           An attribute value of class lineptr (speciocally DW.AT.stmt.list w*
 *ith form

11           DW.FORM.sec.ooeset) is an ooeset within the .debug_line.dwo sectio*
 *n of

12           the beginning of the line number header information for the refere*
 *ncing

13           unit (the line table details are not in .debug_line.dwo but the li*
 *ne header

14           with its list of ole names is present).


15       (i) .debug_info to .debug_rnglists

16           An attribute value of class rnglist (speciocally form DW.FORM.rngl*
 *istx or

17           DW.FORM.sec.ooeset) is an index or ooeset within the .debug_rnglis*
 *ts

18           section of a range list.


19       (io) .debug_info.dwo to .debug_rnglists.dwo

20           An attribute value of class rnglist (speciocally DW.AT.ranges with*
 * form

21           DW.FORM.rnglistx or DW.FORM.sec.ooeset) is an index or ooeset with*
 *in

22           the .debug_rnglists.dwo section of a range list. The format of

23           .debug_rnglists.dwo value list or location list entries is restric*
 *ted to a

24           subset of those in .debug_rnglists. See Section 2.17.3 on page 54 *
 *for

25           details.


26       (jo) .debug_info.dwo to .debug_loclists.dwo

27           An attribute value of class loclist (speciocally with form

28           DW.FORM.loclistx or DW.FORM.sec.ooeset) is an index or ooeset with*
 *in

29           the .debug_loclists.dwo section of a value list or location list. *
 *The format

30           of .debug_loclists.dwo location list entries is restricted to a su*
 *bset of

31           those in .debug_loclists. See Section 2.6.2 on page 44 for details.


32       (k) .debug_info to .debug_addr

33           The value of the DW.AT.addr.base attribute in the

34           DW.TAG.compile.unit, DW.TAG.partial.unit or DW.TAG.type.unit

35           DIE is the ooeset in the .debug_addr section of the machine addres*
 *ses for

36           that unit. DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

37           DW.FORM.addrx3, DW.FORM.addrx4, DW.OP.addrx and

38           DW.OP.constx contain indices relative to that ooeset.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 294
                    Appendix B. Debug Section Relationships (Informative)



 1       (lmo) .debug_line.dwo to .debug_str_offsets.dwo

 2           The value of a DW.FORM.line.strp form refers to a string section s*
 *pecioc

 3           to the line number table. This form can be used in a .debug_line.d*
 *wo

 4           section (as well as in a .debug_info.dwo section).


 5       (lo) .debug_str_offsets.dwo to .debug_str.dwo

 6           Entries in the string ooesets table are ooesets to the correspondi*
 *ng string text

 7           in the .debug_str.dwo section.


 8       (mo) .debug_macro.dwo to .debug_str_offsets.dwo

 9           Within the .debug_macro.dwo sections, the second operand of

10           DW.MACRO.deone.strx and DW.MACRO.undef.strx operations is an

11           unsigned LEB128 value interpreted as an index into the

12           .debug_str_offsets.dwo section.


13       (qo) .debug_macro.dwo to .debug_line.dwo

14           Within the .debug_macro.dwo sections, if a DW.MACRO.start.ole entr*
 *y is

15           present, the macro header contains an ooeset into the .debug_line.*
 *dwo

16           section.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 295




 1      Appendix C



 2      Variable Length Data:



 3      Encoding/Decoding (Informative)



 4      Here are algorithms expressed in a C-like pseudo-code to encode and dec*
 *ode

 5      signed and unsigned numbers in LEB128 representation.


 6      The encode and decode algorithms given here do not take account of C/C++

 7      rules that mean that in E1<<E2 the type of E1 should be a suOEciently l*
 *arge

 8      unsigned type to hold the correct mathematical result. The decode algor*
 *ithms do

 9      not take account of or protect from possibly invalid LEB values, such a*
 *s values

10      that are too large to ot in the target type or that lack a proper termi*
 *nator byte.

11      Implementation languages may have additional or dioeerent rules.



       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||do
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||byte=loworder7bitsofvalue;
       |||=====================================================================*
 *=====|||value>>=7;
       |||=====================================================================*
 *=====|||if(value!=0)/*morebytestocome*/
       |||=====================================================================*
 *=====|||sethighorderbitofbyte;
       |||=====================================================================*
 *=====|||emitbyte;
       |||=====================================================================*
 *=====|||}while(value!=0);_|___|


                     Figure C.1: Algorithm to encode an unsigned integer



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 296
                 Appendix C. Encoding/Decoding (Informative)



______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|more=1;
|||==========================================================================||*
 *|negative=(value<0);
|||==========================================================================||*
 *|size=no.ofbitsinsignedinteger;
|||==========================================================================||*
 *|while(more)
|||==========================================================================||*
 *|{
|||==========================================================================||*
 *|byte=loworder7bitsofvalue;
|||==========================================================================||*
 *|value>>=7;
|||==========================================================================||*
 *|/*thefollowingisunnecessaryifthe
|||==========================================================================||*
 *|*implementationof>>=usesanarithmeticrather
|||==========================================================================||*
 *|*thanlogicalshiftforasignedleftoperand
|||==========================================================================||*
 *|*/
|||==========================================================================||*
 *|if(negative)
|||==========================================================================||*
 *|/*signextend*/
|||==========================================================================||*
 *|value|=-(1<<(size-7));
|||==========================================================================||*
 *|/*signbitofbyteissecondhighorderbit(0x40)*/
|||==========================================================================||*
 *|if((value==0&&signbitofbyteisclear)||
|||==========================================================================||*
 *|(value==-1&&signbitofbyteisset))
|||==========================================================================||*
 *|more=0;
|||==========================================================================||*
 *|else
|||==========================================================================||*
 *|sethighorderbitofbyte;
|||==========================================================================||*
 *|emitbyte;
|||==========================================================================||*
 *|}_|___|


                Figure C.2: Algorithm to encode a signed integer



______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|result=0;
|||==========================================================================||*
 *|shift=0;
|||==========================================================================||*
 *|while(true)
|||==========================================================================||*
 *|{
|||==========================================================================||*
 *|byte=nextbyteininput;
|||==========================================================================||*
 *|result|=(loworder7bitsofbyte<<shift);
|||==========================================================================||*
 *|if(highorderbitofbyte==0)
|||==========================================================================||*
 *|break;
|||==========================================================================||*
 *|shift+=7;
|||==========================================================================||*
 *|}_|___|


           Figure C.3: Algorithm to decode an unsigned LEB128 integer



 July 15 2024               ***WORKING DRAFT***                       Page 297
                 Appendix C. Encoding/Decoding (Informative)



______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|result=0;
|||==========================================================================||*
 *|shift=0;
|||==========================================================================||*
 *|size=numberofbitsinsignedinteger;
|||==========================================================================||*
 *|while(true)
|||==========================================================================||*
 *|{
|||==========================================================================||*
 *|byte=nextbyteininput;
|||==========================================================================||*
 *|result|=(loworder7bitsofbyte<<shift);
|||==========================================================================||*
 *|shift+=7;
|||==========================================================================||*
 *|/*signbitofbyteissecondhighorderbit(0x40)*/
|||==========================================================================||*
 *|if(highorderbitofbyte==0)
|||==========================================================================||*
 *|break;
|||==========================================================================||*
 *|}
|||==========================================================================||*
 *|if((shift<size)&&(signbitofbyteisset))
|||==========================================================================||*
 *|/*signextend*/
|||==========================================================================||*
 *|result|=-(1<<shift);_|___|


             Figure C.4: Algorithm to decode a signed LEB128 integer



 July 15 2024               ***WORKING DRAFT***                       Page 298
                Appendix C. Encoding/Decoding (Informative)



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 299




 1      Appendix D



 2      Examples (Informative)



 3      The following sections provide examples that illustrate various aspects*
 * of the

 4      DWARF debugging information format.



 5      D.1     General Description Examples



 6      D.1.1    Compilation Units and Abbreviations Table Example


 7      Figure D.1 on the following page depicts the relationship of the abbrev*
 *iations

 8      tables contained in the .debug_abbrev section to the information contai*
 *ned in

 9      the .debug_info section. Values are given in symbolic form, where possi*
 *ble.


10      The ogure corresponds to the following two trivial source oles:


        File myole.c
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||typedefchar*POINTER;_|___|



        File myole2.c
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||typedefchar*strp;_|___|



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 300
                     Appendix D. Examples (Informative)



        Compilation Unit #1:                 |     Abbreviation Table:       |
   |                             |           |                               |
   |       .debug_info           |           |       .debug_abbrev           |
   _____________________________||||         ________________________________||*
 *||

   |                             |           |                               |
   | length                      |        a1:||1                             ||
   ||4                           ||          | DW_TAG_compile_unit           |
   | a1 (abbreviations table offset)|        | DW_CHILDREN_yes               |
   | 4                           |           ||DW_AT_name      DW_FORM_string||
   ||__________________________  ||          | DW_AT_producer   DW_FORM_string|
   | 1                           |           | DW_AT_comp_dir   DW_FORM_string|
   | "myfile.c"                  |           ||DW_AT_language_name DW_FORM_data*
 *1||
   ||"Best Compiler Corp, V1.3"  ||          | DW_AT_low_pc    DW_FORM_addr  |
   | "/home/mydir/src"           |           | DW_AT_high_pc    DW_FORM_data1|
   | DW_LNAME_C                  |           ||DW_AT_stmt_list  DW_FORM_indirec*
 *t||
   ||0x0                         ||          | 0                             |
   | 0x55                        |           | ____________________________  |
   | DW_FORM_sec_offset          |           ||2                             ||
   ||0x0                         ||          | DW_TAG_base_type              |
   | __________________________  |           | DW_CHILDREN_no                |
e1:||2                           ||          ||DW_AT_name      DW_FORM_string||
   | "char"                      |           | DW_AT_encoding   DW_FORM_data1|
   | DW_ATE_unsigned_char        |           | DW_AT_byte_size  DW_FORM_data1|
   | 1                           |           ||0                             ||
   ||__________________________  ||          | ____________________________  |
e2:| 3                           |           | 3                             |
   | e1  (debug info offset)     |           ||DW_TAG_pointer_type           ||
   ||__________________________  ||          | DW_CHILDREN_no                |
   | 4                           |           | DW_AT_type      DW_FORM_ref4  |
   | "POINTER"                   |           ||0                             ||
   ||e2__(debug_info_offset)___  ||          | ____________________________  |
   |                             |           ||4                             ||
   ||0                           ||          | DW_TAG_typedef                |
   |____________________________ |           | DW_CHILDREN_no                |
                                             ||DW_AT_name     DW_FORM_string ||

        Compilation Unit #2:                 ||DW_AT_type0    DW_FORM_ref_addr||

   |       .debug_info           |           | ____________________________  |
   _____________________________||           | 0                             |
   |                             |           ||______________________________||
   ||length                      ||
   | 4                           |
   ||a1 (abbreviations table offset)||
   | 4                           |
   | __________________________  |
   ||...                         ||
   | __________________________  |
   | 4                           |
   ||"strp"                      ||
   | e2  (debug info offset)     |
   | __________________________  |
   ||...                         ||
   |____________________________ |


             Figure D.1: Compilation units and abbreviations table



July 15 2024               ***WORKING DRAFT***                       Page 301
                            Appendix D. Examples (Informative)



1      D.1.2    DWARF Stack Operation Examples


2      The stack operations deoned in Section 2.5.1.3 on page 29. are fairly co*
 *nventional, but

3      the following examples illustrate their behavior graphically.



                           __Before_____Operation_______After____

                            0    17    DW.OP.dup       0    17

                            1    29                    1    17

                            2  1000                    2    29

                                                       3  1000



                            0    17    DW.OP.drop      0    29

                            1    29                    1  1000

                            2  1000



                            0    17   DW.OP.pick, 2    0  1000

                            1    29                    1    17

                            2  1000                    2    29

                                                       3  1000



                            0    17    DW.OP.over      0    29

                            1    29                    1    17

                            2  1000                    2    29

                                                       3  1000



                            0    17   DW.OP.swap       0    29

                            1    29                    1    17

                            2  1000                    2  1000



                            0    17    DW.OP.rot       0    29

                            1    29                    1  1000

                            2  1000                    2    17



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 302
                             Appendix D. Examples (Informative)



 1      D.1.3    DWARF Location Description Examples


 2      Following are examples of DWARF operations used to form location

 3      descriptions:



 4      DW_OP_reg3


 5           The value is in register 3.



 6      DW_OP_regx (54)


 7           The value is in register 54.



 8      DW_OP_addr (0x80d0045c)


 9           The value of a static variable is at machine address 0x80d0045c.



10      DW_OP_breg11 (44)


11           Add 44 to the value in register 11 to get the address of an automa*
 *tic variable

12           instance.



13      DW_OP_fbreg (-50)


14           Given a DW.AT.frame.base value of iDW.OP.breg31 64,j this example

15           computes the address of a local variable that is -50 bytes from a *
 *logical

16           frame pointer that is computed by adding 64 to the current stack p*
 *ointer

17           (register 31).



18      DW_OP_bregx (54, 32)

19      DW_OP_deref


20           A call-by-reference parameter whose address is in the location beg*
 *inning 32

21           bytes from where register 54 points.



22      DW_OP_plus_uconst (4)


23           A structure member is four bytes from the start of the structure i*
 *nstance.

24           The base address is assumed to be already on the stack.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 303
                             Appendix D. Examples (Informative)



 1      DW_OP_reg3

 2      DW_OP_piece (4)

 3      DW_OP_reg10

 4      DW_OP_piece (2)


 5           A variable whose orst four bytes reside in register 3 and whose ne*
 *xt two

 6           bytes reside in register 10.



 7      DW_OP_reg0

 8      DW_OP_piece (4)

 9      DW_OP_piece (4)

10      DW_OP_fbreg (-12)

11      DW_OP_piece (4)


12           A twelve byte value whose orst four bytes reside in register zero,*
 * whose

13           middle four bytes are unavailable (perhaps due to optimization), a*
 *nd

14           whose last four bytes are in memory, 12 bytes before the frame bas*
 *e.



15      DW_OP_breg1 (0)

16      DW_OP_breg2 (0)

17      DW_OP_plus

18      DW_OP_stack_value


19           Add the contents of r1 and r2 to compute a value. This value is the

20           icontentsj of an otherwise anonymous location.



21      DW_OP_lit1

22      DW_OP_stack_value

23      DW_OP_piece (4)

24      DW_OP_breg3 (0)

25      DW_OP_breg4 (0)

26      DW_OP_plus

27      DW_OP_stack_value

28      DW_OP_piece (4)


29           The object value is found in an anonymous (virtual) location whose*
 * value

30           consists of two parts, given in memory address order: the 4 byte v*
 *alue 1

31           followed by the four byte value computed from the sum of the conte*
 *nts of

32           r3 and r4.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 304
                             Appendix D. Examples (Informative)



 1      DW_OP_entry_value (2, DW_OP_breg1 0)

 2                        ! The first operand gives the number of bytes in the

 3                        ! second operand (see Section 2.5.1.7 on page 37).


 4           The variable's address is the value that register 1 contained upon*
 * entering

 5           the current subprogram.



 6      DW_OP_entry_value (1, DW_OP_reg1)


 7           Same as the previous example but uses the more compact register lo*
 *cation

 8           description as an operand.



 9      DW_OP_entry_value (2, DW_OP_breg1 0)

10      DW_OP_stack_value


11           The variables's value is the value that register 1 contained upon *
 *entering the

12           current subprogram. This value is the icontentsj of an otherwise

13           anonymous location.



14      DW_OP_entry_value (1, DW_OP_reg1)

15      DW_OP_stack_value


16           Same as the previous example, but uses the more compact register l*
 *ocation

17           description.



18      DW_OP_entry_value (3, DW_OP_breg4 16 DW_OP_deref)

19      DW_OP_stack_value


20           Add 16 to the value register 4 had upon entering the current subpr*
 *ogram to

21           form an address and then push the value of the memory location at *
 *that

22           address. This value is the icontentsj of an otherwise anonymous lo*
 *cation.



23      DW_OP_entry_value (1, DW_OP_reg5)

24      DW_OP_plus_uconst (16)


25           The address of the memory location is calculated by adding 16 to t*
 *he value

26           contained in register 5 upon entering the current subprogram.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 305
                             Appendix D. Examples (Informative)



 1      DW_OP_reg0

 2      DW_OP_bit_piece (1, 31)

 3      DW_OP_bit_piece (7, 0)

 4      DW_OP_reg1

 5      DW_OP_piece (1)


 6           A variable whose orst bit resides in the 31st bit of register 0, w*
 *hose next

 7           seven bits are undeoned and whose second byte resides in register *
 *1.



 8      D.2     Aggregate Examples


 9      The following examples illustrate how to represent some of the more

10      complicated forms of array and record aggregates using DWARF.



11      D.2.1    Fortran Simple Array Example


12      Consider the Fortran array source fragment in Figure D.2 following.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||TYPEarray_ptr
       |||=====================================================================*
 *=====|||REAL::myvar
       |||=====================================================================*
 *=====|||REAL,DIMENSION(:),POINTER::ap
       |||=====================================================================*
 *=====|||ENDTYPEarray_ptr
       |||=====================================================================*
 *=====|||TYPE(array_ptr),ALLOCATABLE,DIMENSION(:)::arrayvar
       |||=====================================================================*
 *=====|||ALLOCATE(arrayvar(20))
       |||=====================================================================*
 *=====|||DOI=1,20
       |||=====================================================================*
 *=====|||ALLOCATE(arrayvar(i)%ap(i+10))
       |||=====================================================================*
 *=====|||ENDDO_|___|


                      Figure D.2: Fortran array example: source fragment



13      For allocatable and pointer arrays, it is essentially required by theFo*
 *rtran array

14      semantics that each array consist of two parts, which we here call 1) t*
 *he

15      descriptor and 2) the raw data. (A descriptor has often been called a d*
 *ope vector

16      in other contexts, although it is often a structure of some kind rather*
 * than a

17      simple vector.) Because there are two parts, and because the lifetime o*
 *f the

18      descriptor is necessarily longer than and includes that of the raw data*
 *, there must

19      be an address somewhere in the descriptor that points to the raw data w*
 *hen, in

20      fact, there is some (that is, when the ivariablej is allocated or assoc*
 *iated).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 306
                             Appendix D. Examples (Informative)



 1      For concreteness, suppose that a descriptor looks something like the C *
 *structure

 2      in Figure D.3. Note, however, that it is a property of the design that *
 *1) a debugger

 3      needs no builtin knowledge of this structure and 2) there does not need*
 * to be an

 4      explicit representation of this structure in the DWARF input to the deb*
 *ugger.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structdesc{
       |||=====================================================================*
 *=====|||longel_len;//Elementlength
       |||=====================================================================*
 *=====|||void*base;//Addressofrawdata
       |||=====================================================================*
 *=====|||intptr_assoc:1;//Pointerisassociatedflag
       |||=====================================================================*
 *=====|||intptr_alloc:1;//Pointerisallocatedflag
       |||=====================================================================*
 *=====|||intnum_dims:6;//Numberofdimensions
       |||=====================================================================*
 *=====|||structdims_str{//Foreachdimension...
       |||=====================================================================*
 *=====|||longlow_bound;
       |||=====================================================================*
 *=====|||longupper_bound;
       |||=====================================================================*
 *=====|||longstride;
       |||=====================================================================*
 *=====|||}dims[63];
       |||=====================================================================*
 *=====|||};_|___|


                  Figure D.3: Fortran array example: descriptor representation



 5      In practice, of course, a irealj descriptor will have dimension substru*
 *ctures only

 6      for as many dimensions as are specioed in the num_dims component. Let u*
 *s use

 7      the notation desc<n> to indicate a specialization of the desc struct in*
 * which n is

 8      the bound for the dims component as well as the contents of the num_dims

 9      component.


10      Because the arrays considered here come in two parts, it is necessary to

11      distinguish the parts carefully. In particular, the iaddress of the var*
 *iablej or

12      equivalently, the ibase address of the objectj always refers to the des*
 *criptor. For

13      arrays that do not come in two parts, an implementation can provide a d*
 *escriptor

14      anyway, thereby giving it two parts. (This may be convenient for genera*
 *l runtime

15      support unrelated to debugging.) In this case the above vocabulary appl*
 *ies as

16      stated. Alternatively, an implementation can do without a descriptor, i*
 *n which

17      case the iaddress of the variable,j or equivalently the ibase address o*
 *f the

18      objectj, refers to the iraw dataj (the real data, the only thing around*
 * that can be

19      the object).


20      If an object has a descriptor, then the DWARF type for that object will*
 * have a

21      DW.AT.data.location attribute. If an object does not have a descriptor,*
 * then

22      usually the DWARF type for the object will not have a DW.AT.data.locati*
 *on

23      attribute. (See the following Ada example for a case where the type for*
 * an object

24      without a descriptor does have a DW.AT.data.location attribute. In that*
 * case

25      the object doubles as its own descriptor.)



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 307
                             Appendix D. Examples (Informative)



 1      The Fortran derived type array_ptr can now be re-described in C-like te*
 *rms that

 2      expose some of the representation as in
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structarray_ptr{
       |||=====================================================================*
 *=====|||floatmyvar;
       |||=====================================================================*
 *=====|||desc<1>ap;
       |||=====================================================================*
 *=====|||};_|___|



 3      Similarly for variable arrayvar:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||desc<1>arrayvar;_|___|



 4       Recall that desc<1> indicates the 1-dimensional version of desc.


 5      Finally, the following notation is useful:


 6      1.  sizeof(type): size in bytes of entities of the given type


 7      2.  ooeset(type, comp): ooeset in bytes of the comp component within an*
 * entity of

 8          the given type


 9      The DWARF description is shown in Figure D.4 on page 310.


10      Suppose the program is stopped immediately following completion of the *
 *do

11      loop. Suppose further that the user enters the following debug command:

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||debug>printarrayvar(5)%ap(2)_|___|



12      Interpretation of this expression proceeds as follows:


13      1.  Lookup name arrayvar. We ond that it is a variable, whose type is g*
 *iven by

14          the unnamed type at 6$. Notice that the type is an array type.


15      2.  Find the 5thelement of that array object. To do array indexing requ*
 *ires

16          several pieces of information:


17          a) the address of the array data


18          b) the lower bounds of the array

19             [To check that 5 is within bounds would require the upper bound *
 *too, but

20             we will skip that for this example. ]


21          c) the stride



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 308
                             Appendix D. Examples (Informative)



 1         For a), check for a DW.AT.data.location attribute. Since there is on*
 *e, go

 2         execute the expression, whose result is the address needed. The obje*
 *ct

 3         address used in this case is the object we are working on, namely th*
 *e variable

 4         named arrayvar, whose address was found in step 1. (Had there been no

 5         DW.AT.data.location attribute, the desired address would be the same*
 * as

 6         the address from step 1.)


 7         For b), for each dimension of the array (only one in this case), go *
 *interpret the

 8         usual lower bound attribute. Again this is an expression, which agai*
 *n begins

 9         with DW.OP.push.object.address. This object is still arrayvar, from *
 *step 1,

10         because we have not begun to actually perform any indexing yet.


11         For c), the default stride applies. Since there is no DW.AT.byte.str*
 *ide

12         attribute, use the size of the array element type, which is the size*
 * of type

13         array_ptr (at 3$).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 309
                     Appendix D. Examples (Informative)


|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_1_of*
 *_2||
|!|Description for type of 'ap'                                                *
 *||
|!|                                                                            *
 *||
|1$: DW_TAG_array_type                                                         |
||       ! No name, default (Fortran) ordering, default stride                 *
 *||
|        DW_AT_type(reference to REAL)                                         |
||       DW_AT_associated(expression=    ! Test 'ptr_assoc' flag               *
 *||
||          DW_OP_push_object_address                                          *
 *||
|           DW_OP_lit<n>               ! where n == offset(ptr_assoc)          |
||          DW_OP_plus                                                         *
 *||
|           DW_OP_deref                                                        |
||          DW_OP_lit1                 ! mask for 'ptr_assoc' flag             *
 *||
||          DW_OP_and)                                                         *
 *||
|        DW_AT_data_location(expression= ! Get raw data address                |
||          DW_OP_push_object_address                                          *
 *||
|           DW_OP_lit<n>               ! where n == offset(base)               |
||          DW_OP_plus                                                         *
 *||
|           DW_OP_deref)               ! Type of index of array 'ap'           |
|2$:|    DW_TAG_subrange_type                                                  *
 *||
||          ! No name, default stride                                          *
 *||
|           DW_AT_type(reference to INTEGER)                                   |
||          DW_AT_lower_bound(expression=                                      *
 *||
|               DW_OP_push_object_address                                      |
||              DW_OP_lit<n>            ! where n ==                           *
 *||
||                                     !   offset(desc, dims) +                *
 *||
|                                      !   offset(dims_str, lower_bound)       |
||              DW_OP_plus                                                     *
 *||
|               DW_OP_deref)                                                   |
||          DW_AT_upper_bound(expression=                                      *
 *||
||              DW_OP_push_object_address                                      *
 *||
|               DW_OP_lit<n>           ! where n ==                            |
||                                    !   offset(desc, dims) +                 *
 *||
|                                     !   offset(dims_str, upper_bound)        |
||              DW_OP_plus                                                     *
 *||
|               DW_OP_deref)                                                   |
||          !  Note: for the m'th dimension, the second operator becomes       *
 *||
||          !  DW_OP_lit<n> where                                              *
 *||
|           !       n == offset(desc, dims)          +                         |
||          !               (m-1)*sizeof(dims_str)  +                          *
 *||
|           !                offset(dims_str, [lower|upper]_bound)             |
||          !  That is, the expression does not get longer for each successive *
 *||
||__________!__dimension_(other_than_to_express_the_larger_offsets_involved)._ *
 *||


            Figure D.4: Fortran array example: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 310
|                    Appendix D. Examples (Informative)                        |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
|3$: DW_TAG_structure_type                                                     |
||       DW_AT_name("array_ptr")                                               *
 *||
|        DW_AT_byte_size(constant sizeof(REAL) + sizeof(desc<1>))              |
|4$:|    DW_TAG_member                                                         *
 *||
||          DW_AT_name("myvar")                                                *
 *||
|           DW_AT_type(reference to REAL)                                      |
||          DW_AT_data_member_location(constant 0)                             *
 *||
|5$:     DW_TAG_member                                                         |
||          DW_AT_name("ap");                                                  *
 *||
||          DW_AT_type(reference to 1$)                                        *
 *||
|           DW_AT_data_member_location(constant sizeof(REAL))                  |
|6$:|DW_TAG_array_type                                                         *
 *||
|        ! No name, default (Fortran) ordering, default stride                 |
||       DW_AT_type(reference to 3$)                                           *
 *||
||       DW_AT_allocated(expression=       ! Test 'ptr_alloc' flag             *
 *||
|           DW_OP_push_object_address                                          |
||          DW_OP_lit<n>                 ! where n == offset(ptr_alloc)        *
 *||
|           DW_OP_plus                                                         |
||          DW_OP_deref                                                        *
 *||
|           DW_OP_lit2                   ! Mask for 'ptr_alloc' flag           |
||          DW_OP_and)                                                         *
 *||
||       DW_AT_data_location(expression=   ! Get raw data address              *
 *||
|           DW_OP_push_object_address                                          |
||          DW_OP_lit<n>                 ! where n == offset(base)             *
 *||
|           DW_OP_plus                                                         |
||          DW_OP_deref)                                                       *
 *||
|7$:|    DW_TAG_subrange_type                                                  *
 *||
|           ! No name, default stride                                          |
||          DW_AT_type(reference to INTEGER)                                   *
 *||
|           DW_AT_lower_bound(expression=                                      |
||              DW_OP_push_object_address                                      *
 *||
||              DW_OP_lit<n>             ! where n == ...                      *
 *||
|               DW_OP_plus                                                     |
||              DW_OP_deref)                                                   *
 *||
|           DW_AT_upper_bound(expression=                                      |
||              DW_OP_push_object_address                                      *
 *||
|               DW_OP_lit<n>             ! where n == ...                      |
||              DW_OP_plus                                                     *
 *||
||              DW_OP_deref)                                                   *
 *||
|8$: DW_TAG_variable                                                           |
||       DW_AT_name("arrayvar")                                                *
 *||
|        DW_AT_type(reference to 6$)                                           |
||       DW_AT_location(expression=                                            *
 *||
||__________...as_appropriate...)_______!_Assume_static_allocation____________ *
 *||


       Figure D.4: Fortran array example: DWARF description (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 311
                             Appendix D. Examples (Informative)



 1         Having acquired all the necessary data, perform the indexing operati*
 *on in the

 2         usual manner~which has nothing to do with any of the attributes invo*
 *lved up

 3         to now. Those just provide the actual values used in the indexing st*
 *ep.


 4         The result is an object within the memory that was dynamically alloc*
 *ated for

 5         arrayvar.


 6      3.  Find the ap component of the object just identioed, whose type is a*
 *rray_ptr.


 7          This is a conventional record component lookup and interpretation. *
 *It

 8          happens that the ap component in this case begins at ooeset 4 from *
 *the

 9          beginning of the containing object. Component ap has the unnamed ar*
 *ray

10          type deoned at 1$ in the symbol table.


11      4.  Find the second element of the array object found in step 3. To do *
 *array

12          indexing requires several pieces of information:


13          a) the address of the array storage


14          b) the lower bounds of the array

15             [To check that 2 is within bounds we would require the upper bou*
 *nd too,

16             but we will skip that for this example ]


17          c) the stride


18      This is just like step 2), so the details are omitted. Recall that beca*
 *use the DWARF

19      type 1$ has a DW.AT.data.location, the address that results from step 4*
 *) is that

20      of a descriptor, and that address is the address pushed by the

21      DW.OP.push.object.address operations in 1$ and 2$.


22      Note: we happen to be accessing a pointer array here instead of an allo*
 *catable

23      array; but because there is a common underlying representation, the mec*
 *hanics

24      are the same. There could be completely dioeerent descriptor arrangemen*
 *ts and

25      the mechanics would still be the same~only the stack machines would be

26      dioeerent.



27      D.2.2    Fortran Coarray Examples


28      D.2.2.1  Fortran Scalar Coarray Example


29      The Fortran scalar coarray example in Figure D.5 on the next page can be

30      described as illustrated in Figure D.6 on the following page.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 312
                            Appendix D. Examples (Informative)


      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||INTEGERx[*]_|___|


                     Figure D.5: Fortran scalar coarray: source fragment

       ________________________________________________________________________*
 *______||
       |10$:  DW_TAG_coarray_type                                              *
 *       |
       ||         DW_AT_type(reference to INTEGER)                             *
 *       ||
       ||         DW_TAG_subrange_type               ! Note omitted upper bound*
 *       ||
       |          DW_AT_lower_bound(constant 1)       ! Can be omitted (default*
 * is 1) |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |11$:  DW_TAG_variable                                                  *
 *       |
       ||         DW_AT_name("x")                                              *
 *       ||
       ||_________DW_AT_type(reference_to_coarray_type_at_10$)_________________*
 *______ ||


                   Figure D.6: Fortran scalar coarray: DWARF description



1      D.2.2.2  Fortran Array Coarray Example


2      The Fortran (simple) array coarray example in Figure D.7 can be describe*
 *d as

3      illustrated in Figure D.8.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||INTEGERx(10)[*]_|___|


                     Figure D.7: Fortran array coarray: source fragment


       ________________________________________________________________________*
 *______||
       |10$:| DW_TAG_array_type                                                *
 *       ||
       ||         DW_AT_ordering(DW_ORD_col_major)                             *
 *       ||
       |          DW_AT_type(reference to INTEGER)                             *
 *       |
       |11$:|     DW_TAG_subrange_type                                         *
 *       ||
       |           ! DW_AT_lower_bound(constant 1)   ! Omitted (default is 1)  *
 *       |
       ||            DW_AT_upper_bound(constant 10)                            *
 *       ||
       |                                                                       *
 *       |
       |12$:| DW_TAG_coarray_type                                              *
 *       ||
       ||         DW_AT_type(reference to array type at 10$)                   *
 *       ||
       |13$:      DW_TAG_subrange_type               ! Note omitted upper & low*
 *er bounds|
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |14$:  DW_TAG_variable                                                  *
 *       |
       ||         DW_AT_name("x")                                              *
 *       ||
       ||_________DW_AT_type(reference_to_coarray_type_at_12$)_________________*
 *______ ||


                    Figure D.8: Fortran array coarray: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 313
                            Appendix D. Examples (Informative)



1      D.2.2.3  Fortran Multidimensional Coarray Example


2      The Fortran multidimensional coarray of a multidimensional array example*
 * in

3      Figure D.9 can be described as illustrated in Figure D.10 following.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||INTEGERx(10[,112,12),3_,*]|___|


                Figure D.9: Fortran multidimensional coarray: source fragment
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||

       |10$:| DW_TAG_array_type               ! Note omitted lower bounds (defa*
 *ult to 1)||
       |          DW_AT_ordering(DW_ORD_col_major)                             *
 *       |
       ||         DW_AT_type(reference to INTEGER)                             *
 *       ||
       |11$:      DW_TAG_subrange_type                                         *
 *       |
       ||            DW_AT_upper_bound(constant 10)                            *
 *       ||
       |12$:      DW_TAG_subrange_type                                         *
 *       |
       ||            DW_AT_upper_bound(constant 11)                            *
 *       ||
       |13$:|     DW_TAG_subrange_type                                         *
 *       ||
       |             DW_AT_upper_bound(constant 12)                            *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |14$:  DW_TAG_coarray_type             ! Note omitted lower bounds (defa*
 *ult to 1)|
       ||         DW_AT_type(reference to array_type at 10$)                   *
 *       ||
       |15$:|     DW_TAG_subrange_type                                         *
 *       ||
       |             DW_AT_upper_bound(constant 2)                             *
 *       |
       |16$:|     DW_TAG_subrange_type                                         *
 *       ||
       |             DW_AT_upper_bound(constant 3)                             *
 *       |
       |17$:|     DW_TAG_subrange_type         ! Note omitted upper (& lower) b*
 *ound   ||
       |                                                                       *
 *       |
       |18$:| DW_TAG_variable                                                  *
 *       ||
       ||         DW_AT_name("x")                                              *
 *       ||
       |          DW_AT_type(reference to coarray type at 14$)                 *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

             Figure D.10: Fortran multidimensional coarray: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 314
                             Appendix D. Examples (Informative)



 1      D.2.3    Fortran 2008 Assumed-rank Array Example


 2      Consider the example in Figure D.11, which shows an assumed-rank array *
 *in

 3      Fortran 2008 with supplement 29113:1

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||SUBROUTINEFoo(x)
       |||=====================================================================*
 *=====|||REAL::x(..)
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||!xhasndimensions
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||ENDSUBROUTINE_|___|


                 Figure D.11: Declaration of a Fortran 2008 assumed-rank array



 4      Let's assume the Fortran compiler used an array descriptor that (in C) *
 *looks like

 5      the one shown in Figure D.12.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structarray_descriptor{
       |||=====================================================================*
 *=====|||void*base_addr;
       |||=====================================================================*
 *=====|||intrank;
       |||=====================================================================*
 *=====|||structdimdims[];
       |||=====================================================================*
 *=====|||}
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||structdim{
       |||=====================================================================*
 *=====|||intlower_bound;
       |||=====================================================================*
 *=====|||intupper_bound;
       |||=====================================================================*
 *=====|||intstride;
       |||=====================================================================*
 *=====|||intflags;
       |||=====================================================================*
 *=====|||}_|___|


               Figure D.12: One of many possible layouts for an array descriptor



 6      The DWARF type for the array x can be described as shown in Figure D.13*
 * on the

 7      following page.


 8      The layout of the array descriptor is not specioed by the Fortran stand*
 *ard unless

 9      the array is explicitly marked as C-interoperable. To get the bounds of*
 * an

10      assumed-rank array, the expressions in the DW.TAG.generic.subrange entry

11      need to be evaluated for each of the DW.AT.rank dimensions as shown by *
 *the

12      pseudocode in Figure D.14 on page 317.



        _______________________________
           1Technical Speciocation ISO/IEC TS 29113:2012 Further Interoperabili*
 *ty of Fortran with C



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 315
                     Appendix D. Examples (Informative)
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|10$:  DW_TAG_array_type                                                       |
||         DW_AT_type(reference to real)                                       *
 *||
|          DW_AT_rank(expression=                                              |
||            DW_OP_push_object_address                                        *
 *||
|             DW_OP_lit<n>                      ! offset of rank in descriptor |
||            DW_OP_plus                                                       *
 *||
||            DW_OP_deref)                                                     *
 *||
|          DW_AT_data_location(expression=                                     |
||            DW_OP_push_object_address                                        *
 *||
|             DW_OP_lit<n>                      ! offset of data in descriptor |
||            DW_OP_plus                                                       *
 *||
||            DW_OP_deref)                                                     *
 *||
|11$:     DW_TAG_generic_subrange                                              |
||            DW_AT_type(reference to integer)                                 *
 *||
|             DW_AT_lower_bound(expression=                                    |
||            !   Looks up the lower bound of dimension i.                     *
 *||
|             !   Operation                      ! Stack effect                |
||            !   (implicit)                     ! i                           *
 *||
||                DW_OP_lit<n>                   ! i sizeof(dim)               *
 *||
|                 DW_OP_mul                      ! dim[i]                      |
||                DW_OP_lit<n>                   ! dim[i] offsetof(dim)        *
 *||
|                 DW_OP_plus                     ! dim[i]+offset               |
||                DW_OP_push_object_address       ! dim[i]+offsetof(dim) objptr*
 *||
||                DW_OP_plus                     ! objptr.dim[i]               *
 *||
|                 DW_OP_lit<n>                   ! objptr.dim[i] offsetof(lb)  |
||                DW_OP_plus                     ! objptr.dim[i].lowerbound    *
 *||
|                 DW_OP_deref)                   ! *objptr.dim[i].lowerbound   |
||            DW_AT_upper_bound(expression=                                    *
 *||
||            !   Looks up the upper bound of dimension i.                     *
 *||
|                 DW_OP_lit<n>                   ! sizeof(dim)                 |
||                DW_OP_mul                                                    *
 *||
|                 DW_OP_lit<n>                   ! offsetof(dim)               |
||                DW_OP_plus                                                   *
 *||
|                 DW_OP_push_object_address                                    |
||                DW_OP_plus                                                   *
 *||
||                DW_OP_lit<n>                   ! offset of upperbound in dim *
 *||
|                 DW_OP_plus                                                   |
||                DW_OP_deref)                                                 *
 *||
|             DW_AT_byte_stride(expression=                                    |
||            !   Looks up the byte stride of dimension i.                     *
 *||
||                ...                                                          *
 *||
|             !   (analogous to DW_AT_upper_bound)                             |
||________________)___________________________________________________________ *
 *||


      Figure D.13: Sample DWARF for the array descriptor in Figure D.12



July 15 2024               ***WORKING DRAFT***                       Page 316
                      Appendix D. Examples (Informative)



______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|typedefstruct{
|||==========================================================================||*
 *|intlower,upper,stride;
|||==========================================================================||*
 *|}dims_t;
|||==========================================================================|||
|||==========================================================================||*
 *|typedefstruct{
|||==========================================================================||*
 *|intrank;
|||==========================================================================||*
 *|structdims_t*dims;
|||==========================================================================||*
 *|}array_t;
|||==========================================================================|||
|||==========================================================================||*
 *|array_tget_dynamic_array_dims(DW_TAG_arraya){
|||==========================================================================||*
 *|array_tresult;
|||==========================================================================|||
|||==========================================================================||*
 *|//EvaluatetheDW_AT_rankexpressiontogetthe
|||==========================================================================||*
 *|//numberofdimensions.
|||==========================================================================||*
 *|dwarf_stack_tstack;
|||==========================================================================||*
 *|dwarf_eval(stack,a.rank_expr);
|||==========================================================================||*
 *|result.rank=dwarf_pop(stack);
|||==========================================================================||*
 *|result.dims=newdims_t[rank];
|||==========================================================================|||
|||==========================================================================||*
 *|//Iterateoveralldimensionsandfindtheirbounds.
|||==========================================================================||*
 *|for(inti=0;i<result.rank;i++){
|||==========================================================================||*
 *|//Evaluatethegenericsubrange'sDW_AT_lower
|||==========================================================================||*
 *|//expressionfordimensioni.
|||==========================================================================||*
 *|dwarf_push(stack,i);
|||==========================================================================||*
 *|assert(stack.size==1);
|||==========================================================================||*
 *|dwarf_eval(stack,a.generic_subrange.lower_expr);
|||==========================================================================||*
 *|result.dims[i].lower=dwarf_pop(stack);
|||==========================================================================||*
 *|assert(stack.size==0);
|||==========================================================================|||
|||==========================================================================||*
 *|dwarf_push(stack,i);
|||==========================================================================||*
 *|dwarf_eval(stack,a.generic_subrange.upper_expr);
|||==========================================================================||*
 *|result.dims[i].upper=dwarf_pop(stack);
|||==========================================================================|||
|||==========================================================================||*
 *|dwarf_push(stack,i);
|||==========================================================================||*
 *|dwarf_eval(stack,a.generic_subrange.byte_stride_expr);
|||==========================================================================||*
 *|result.dims[i].stride=dwarf_pop(stack);
|||==========================================================================||*
 *|}
|||==========================================================================||*
 *|returnresult;
|||==========================================================================||*
 *|}_|___|


           Figure D.14: How to interpret the DWARF from Figure D.13



 July 15 2024               ***WORKING DRAFT***                       Page 317
                            Appendix D. Examples (Informative)



1      D.2.4    Fortran Dynamic Type Example


2      Consider the Fortran 90 example of dynamic properties in Figure D.15. Th*
 *is can

3      be represented in DWARF as illustrated in Figure D.16 on the next page. *
 *Note

4      that unnamed dynamic types are used to avoid replicating the full descri*
 *ption of

5      the underlying type dt that is shared by several variables.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||PROGRAMSample
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||TYPE::dt(l)
      |||======================================================================*
 *====|||INTEGER,LEN::l
      |||======================================================================*
 *====|||INTEGER::arr(l)
      |||======================================================================*
 *====|||ENDTYPE
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||INTEGER::n=4
      |||======================================================================*
 *====|||CONTAINS
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||SUBROUTINES()
      |||======================================================================*
 *====|||TYPE(dt(n))::t1
      |||======================================================================*
 *====|||TYPE(dt(n)),pointer::t2
      |||======================================================================*
 *====|||TYPE(dt(n)),allocatable::t3,t4
      |||======================================================================*
 *====|||ENDSUBROUTINE
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||ENDSample_|___|


                     Figure D.15: Fortran dynamic type example: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 318
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|11$:    DW_TAG_structure_type                                                 |
||          DW_AT_name("dt")                                                   *
 *||
|           DW_TAG_member                                                      |
||              ...                                                            *
 *||
|...                                                                           |
|                                                                              |
|                                                                              |
|13$:|   DW_TAG_dynamic_type            ! plain version                        *
 *||
|           DW_AT_data_location (dwarf expression to locate raw data)          |
||          DW_AT_type (11$)                                                   *
 *||
|                                                                              |
|14$:|   DW_TAG_dynamic_type            ! 'pointer' version                    *
 *||
|           DW_AT_data_location (dwarf expression to locate raw data)          |
||          DW_AT_associated (dwarf expression to test if associated)          *
 *||
||          DW_AT_type (11$)                                                   *
 *||
|                                                                              |
|15$:|   DW_TAG_dynamic_type            ! 'allocatable' version                *
 *||
|           DW_AT_data_location (dwarf expression to locate raw data)          |
||          DW_AT_allocated (dwarf expression to test is allocated)            *
 *||
||          DW_AT_type (11$)                                                   *
 *||
|                                                                              |
|16$:|   DW_TAG_variable                                                       *
 *||
|           DW_AT_name ("t1")                                                  |
||          DW_AT_type (13$)                                                   *
 *||
||          DW_AT_location (dwarf expression to locate descriptor)             *
 *||
|17$:    DW_TAG_variable                                                       |
||          DW_AT_name ("t2")                                                  *
 *||
|           DW_AT_type (14$)                                                   |
||          DW_AT_location (dwarf expression to locate descriptor)             *
 *||
|18$:    DW_TAG_variable                                                       |
||          DW_AT_name ("t3")                                                  *
 *||
||          DW_AT_type (15$)                                                   *
 *||
|           DW_AT_location (dwarf expression to locate descriptor)             |
|19$:|   DW_TAG_variable                                                       *
 *||
|           DW_AT_name ("t4")                                                  |
||          DW_AT_type (15$)                                                   *
 *||
||__________DW_AT_location_(dwarf_expression_to_locate_descriptor)____________ *
 *||


        Figure D.16: Fortran dynamic type example: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 319
                             Appendix D. Examples (Informative)



 1      D.2.5    C/C++ Anonymous Structure Example


 2      An example of a C/C++ structure is shown in Figure D.17. For this sourc*
 *e, the

 3      DWARF description in Figure D.18 is appropriate. In this example, b is

 4      referenced as if it were deoned in the enclosing structure foo.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structfoo{
       |||=====================================================================*
 *=====|||inta;
       |||=====================================================================*
 *=====|||struct{
       |||=====================================================================*
 *=====|||intb;
       |||=====================================================================*
 *=====|||};
       |||=====================================================================*
 *=====|||}x;
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||voidbar(void)
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||structfoot;
       |||=====================================================================*
 *=====|||t.a=1;
       |||=====================================================================*
 *=====|||t.b=2;
       |||=====================================================================*
 *=====|||}_|___|


                 Figure D.17: Anonymous structure example: source fragment


        _______________________________________________________________________*
 *_______||
        |1$:|  DW_TAG_structure_type                                           *
 *        ||
        |          DW_AT_name("foo")                                           *
 *        |
        |2$:|      DW_TAG_member                                               *
 *        ||
        |             DW_AT_name("a")                                          *
 *        |
        |3$:|      DW_TAG_structure_type                                       *
 *        ||
        ||            DW_AT_export_symbols                                     *
 *        ||
        |4$:          DW_TAG_member                                            *
 *        |
        ||________________DW_AT_name("b")______________________________________*
 *_______ ||


                Figure D.18: Anonymous structure example: DWARF description



 5      D.2.6    Ada Example


 6      Figure D.19 on the following page illustrates two kinds of Ada paramete*
 *rized

 7      array, one embedded in a record.


 8      VEC1 illustrates an (unnamed) array type where the upper bound of the o*
 *rst and

 9      only dimension is determined at runtime. Ada semantics require that the*
 * value

10      of an array bound is oxed at the time the array type is elaborated (whe*
 *re

11      elaboration refers to the runtime executable aspects of type processing*
 *). For the

12      purposes of this example, we assume that there are no other assignments*
 * to M so

13      that it safe for the REC1 type description to refer directly to that va*
 *riable (rather

14      than a compiler-generated copy).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 320
                             Appendix D. Examples (Informative)


       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||M:INTEGER:=<exp>;
       |||=====================================================================*
 *=====|||VEC1:array(1..M)ofINTEGER;
       |||=====================================================================*
 *=====|||subtypeTEENYisINTEGERrange1..100;
       |||=====================================================================*
 *=====|||typeARRisarray(INTEGERrange<>)ofINTEGER;
       |||=====================================================================*
 *=====|||typeREC2(N:TEENY:=100)isrecord
       |||=====================================================================*
 *=====|||VEC2:ARR(1..N);
       |||=====================================================================*
 *=====|||endrecord;
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||OBJ2B:REC2;_|___|


                          Figure D.19: Ada example: source fragment



 1      REC2 illustrates another array type (the unnamed type of component VEC2*
 *) where

 2      the upper bound of the orst and only bound is also determined at runtim*
 *e. In

 3      this case, the upper bound is contained in a discriminant of the contai*
 *ning record

 4      type. (A discriminant is a component of a record whose value cannot be *
 *changed

 5      independently of the rest of the record because that value is potential*
 *ly used in

 6      the speciocation of other components of the record.)


 7      The DWARF description is shown in Figure D.20 on the next page.


 8      Interesting aspects about this example are:


 9      1.  The array VEC2 is iimmediatelyj contained within structure REC2 (th*
 *ere is no

10          intermediate descriptor or indirection), which is reAEected in the *
 *absence of a

11          DW.AT.data.location attribute on the array type at 28$.


12      2.  One of the bounds of VEC2 is nonetheless dynamic and part of the sa*
 *me

13          containing record. It is described as a reference to a member, and *
 *the location

14          of the upper bound is determined as for any member. That is, the lo*
 *cation is

15          determined using an address calculation relative to the base of the*
 * containing

16          object.


17          A consumer must notice that the referenced bound is a member of the*
 * same

18          containing object and implicitly push the base address of the conta*
 *ining

19          object just as for accessing a data member generally.


20      3.  The lack of a subtype concept in DWARF means that DWARF types serve*
 * the

21          role of subtypes and must replicate information from the parent typ*
 *e. For this

22          reason, DWARF for the unconstrained array type ARR is not needed fo*
 *r the

23          purposes of this example and therefore is not shown.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 321
|                                                                              |
||                   Appendix D. Examples (Informative)                        *
 *||
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________||
|11$:| DW_TAG_variable                                                         *
 *||
|          DW_AT_name("M")                                                     |
||         DW_AT_type(reference to INTEGER)                                    *
 *||
|12$:  DW_TAG_array_type                                                       |
||         ! No name, default (Ada) order, default stride                      *
 *||
||         DW_AT_type(reference to INTEGER)                                    *
 *||
|13$:      DW_TAG_subrange_type                                                |
||            DW_AT_type(reference to INTEGER)                                 *
 *||
|             DW_AT_lower_bound(constant 1)                                    |
||            DW_AT_upper_bound(reference to variable M at 11$)                *
 *||
|14$:| DW_TAG_variable                                                         *
 *||
|          DW_AT_name("VEC1")                                                  |
||         DW_AT_type(reference to array type at 12$)                          *
 *||
|      . . .                                                                   |
|21$:| DW_TAG_subrange_type                                                    *
 *||
||         DW_AT_name("TEENY")                                                 *
 *||
|          DW_AT_type(reference to INTEGER)                                    |
||         DW_AT_lower_bound(constant 1)                                       *
 *||
|          DW_AT_upper_bound(constant 100)                                     |
||     . . .                                                                   *
 *||
|26$:  DW_TAG_structure_type                                                   |
||         DW_AT_name("REC2")                                                  *
 *||
|27$:|     DW_TAG_member                                                       *
 *||
|             DW_AT_name("N")                                                  |
||            DW_AT_type(reference to subtype TEENY at 21$)                    *
 *||
|             DW_AT_data_member_location(constant 0)                           |
|28$:|     DW_TAG_array_type                                                   *
 *||
||            ! No name, default (Ada) order, default stride                   *
 *||
|             ! Default data location                                          |
||            DW_AT_type(reference to INTEGER)                                 *
 *||
|29$:          DW_TAG_subrange_type                                            |
||                DW_AT_type(reference to subrange TEENY at 21$)               *
 *||
||                DW_AT_lower_bound(constant 1)                                *
 *||
|                 DW_AT_upper_bound(reference to member N at 27$)              |
|30$:|     DW_TAG_member                                                       *
 *||
|             DW_AT_name("VEC2")                                               |
||            DW_AT_type(reference to array "subtype" at 28$)                  *
 *||
|             DW_AT_data_member_location(machine=                              |
||                DW_OP_lit<n>               ! where n == offset(REC2, VEC2)   *
 *||
||                DW_OP_plus)                                                  *
 *||
|      . . .                                                                   |
|41$:| DW_TAG_variable                                                         *
 *||
|          DW_AT_name("OBJ2B")                                                 |
||         DW_AT_type(reference to REC2 at 26$)                                *
 *||
||_________DW_AT_location(...as_appropriate...)_______________________________ *
 *||


                Figure D.20: Ada example: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 322
                            Appendix D. Examples (Informative)



1      D.2.7    Pascal Example


2      The Pascal source in Figure D.21 following is used to illustrate the rep*
 *resentation

3      of packed unaligned bit oelds.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||TYPET:PACKEDRECORD{bitsizeis2}
      |||======================================================================*
 *====|||F5:BOOLEAN;{bitoffsetis0}
      |||======================================================================*
 *====|||F6:BOOLEAN;{bitoffsetis1}
      |||======================================================================*
 *====|||END;
      |||======================================================================*
 *====|||VARV:PACKEDRECORD
      |||======================================================================*
 *====|||F1:BOOLEAN;{bitoffsetis0}
      |||======================================================================*
 *====|||F2:PACKEDRECORD{bitoffsetis1}
      |||======================================================================*
 *====|||F3:INTEGER;{bitoffsetis0inF2,
      |||======================================================================*
 *====|||1inV}
      |||======================================================================*
 *====|||END;
      |||======================================================================*
 *====|||F4:PACKEDARRAY[0..1]OFT;{bitoffsetis33}
      |||======================================================================*
 *====|||F7:T;{bitoffsetis37}
      |||======================================================================*
 *====|||END;_|___|


                    Figure D.21: Packed record example: source fragment



4      The DWARF representation in Figure D.22 is appropriate.

5      DW.TAG.packed.type entries could be added to better represent the source*
 *, but

6      these do not otherwise aoeect the example and are omitted for clarity. N*
 *ote that

7      this same representation applies to both typical big- and little-endian

8      architectures using the conventions described in Section 5.7.6 on page 1*
 *22.


       ______________________________________________________________________pa*
 *rt_1_of_2||
       |10$:| DW_TAG_base_type                                                 *
 *       ||
       ||         DW_AT_name("BOOLEAN")                                        *
 *       ||
       |             ...                                                       *
 *       |
       |11$:| DW_TAG_base_type                                                 *
 *       ||
       |          DW_AT_name("INTEGER")                                        *
 *       |
       ||            ...                                                       *
 *       ||
       |20$:| DW_TAG_structure_type                                            *
 *       ||
       |          DW_AT_name("T")                                              *
 *       |
       ||         DW_AT_bit_size(2)                                            *
 *       ||
       |          DW_TAG_member                                                *
 *       |
       ||            DW_AT_name("F5")                                          *
 *       ||
       ||            DW_AT_type(reference to 10$)                              *
 *       ||
       |             DW_AT_data_bit_offset(0)        ! may be omitted          *
 *       |
       ||____________DW_AT_bit_size(1)_________________________________________*
 *______ ||


                  Figure D.22: Packed record example: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 323
                     Appendix D. Examples (Informative)
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
||         DW_TAG_member                                                       *
 *||
|             DW_AT_name("F6")                                                 |
||            DW_AT_type(reference to 10$)                                     *
 *||
|             DW_AT_data_bit_offset(1)                                         |
||            DW_AT_bit_size(1)                                                *
 *||
|21$:  DW_TAG_structure_type                 ! anonymous type for F2           |
||         DW_TAG_member                                                       *
 *||
||            DW_AT_name("F3")                                                 *
 *||
|             DW_AT_type(reference to 11$)                                     |
|22$:| DW_TAG_array_type                     ! anonymous type for F4           *
 *||
|          DW_AT_type(reference to 20$)                                        |
||         DW_TAG_subrange_type                                                *
 *||
||            DW_AT_type(reference to 11$)                                     *
 *||
|             DW_AT_lower_bound(0)                                             |
||            DW_AT_upper_bound(1)                                             *
 *||
|          DW_AT_bit_stride(2)                                                 |
||         DW_AT_bit_size(4)                                                   *
 *||
|23$:| DW_TAG_structure_type                 ! anonymous type for V            *
 *||
|          DW_AT_bit_size(39)                                                  |
||         DW_TAG_member                                                       *
 *||
|             DW_AT_name("F1")                                                 |
||            DW_AT_type(reference to 10$)                                     *
 *||
||            DW_AT_data_bit_offset(0)        ! may be omitted                 *
 *||
|             DW_AT_bit_size(1) ! may be omitted                               |
||         DW_TAG_member                                                       *
 *||
|             DW_AT_name("F2")                                                 |
||            DW_AT_type(reference to 21$)                                     *
 *||
|             DW_AT_data_bit_offset(1)                                         |
||            DW_AT_bit_size(32) ! may be omitted                              *
 *||
||         DW_TAG_member                                                       *
 *||
|             DW_AT_name("F4")                                                 |
||            DW_AT_type(reference to 22$)                                     *
 *||
|             DW_AT_data_bit_offset(33)                                        |
||            DW_AT_bit_size(4) ! may be omitted                               *
 *||
||         DW_TAG_member                                                       *
 *||
|             DW_AT_name("F7")                                                 |
||            DW_AT_type(reference to 20$)    ! type T                         *
 *||
|             DW_AT_data_bit_offset(37)                                        |
||            DW_AT_bit_size(2)              ! may be omitted                  *
 *||
||      DW_TAG_variable                                                        *
 *||
|          DW_AT_name("V")                                                     |
||         DW_AT_type(reference to 23$)                                        *
 *||
|          DW_AT_location(...)                                                 |
||_________...________________________________________________________________ *
 *||


      Figure D.22: Packed record example: DWARF description (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 324
                             Appendix D. Examples (Informative)



 1      D.2.8    C/C++ Bit-Field Examples


 2      Bit oelds in C and C++ typically require the use of the DW.AT.data.bit.*
 *ooeset and

 3      DW.AT.bit.size attributes.


 4      This Standard uses the following bit numbering and direction convention*
 *s in examples.

 5      These conventions are for illustrative purposes and other conventions m*
 *ay apply on

 6      particular architectures.


 7        #  For big-endian architectures, bit ooesets are counted from high-or*
 *der to low-order

 8           bits within a byte (or larger storage unit); in this case, the bit*
 * ooeset identioes the

 9           high-order bit of the object.


10        #  For little-endian architectures, bit ooesets are counted from low-*
 *order to high-order

11           bits within a byte (or larger storage unit); in this case, the bit*
 * ooeset identioes the

12           low-order bit of the object.


13      In either case, the bit so identioed is deoned as the beginning of the *
 *object.


14      This section illustrates one possible representation of the following C*
 * structure

15      deonition in both big- and little-endian byte orders:
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structS{
       |||=====================================================================*
 *=====|||intj:5;
       |||=====================================================================*
 *=====|||intk:6;
       |||=====================================================================*
 *=====|||intm:5;
       |||=====================================================================*
 *=====|||intn:8;
       |||=====================================================================*
 *=====|||};_|___|



16      Figures D.23 and D.24 on the following page show the structure layout a*
 *nd data

17      bit ooesets for example big- and little-endian architectures, respectiv*
 *ely. Both

18      diagrams show a structure that begins at address A and whose size is fo*
 *ur bytes.

19      Also, high order bits are to the left and low order bits are to the rig*
 *ht.


20      Note that data member bit ooesets in this example are the same for both*
 * big- and

21      little-endian architectures even though the oelds are allocated in dioe*
 *erent

22      directions (high-order to low-order versus low-order to high-order); th*
 *e bit

23      naming conventions for memory and/or registers of the target architectu*
 *re may

24      or may not make this seem natural.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 325
                            Appendix D. Examples (Informative)
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||

       ||   j:0                                                                *
 *       ||
       |    k:5                                                                *
 *       |
       ||   m:11                                                               *
 *       ||
       ||   n:16                                                               *
 *       ||

       |                                                                       *
 *       |
       ||   Addresses increase ->                                              *
 *       ||
       |    |       A       |     A + 1     |    A + 2      |    A + 3      |  *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |    Data bit offsets increase ->                                       *
 *       |
       ||   +---------------+---------------+---------------+---------------+  *
 *       ||
       ||   |0     4|5         10|11      15|16          23|24          31|    *
 *       ||
       |    |   j   |     k      | m        |        n      |       <pad>   |  *
 *       |
       ||   |       |           |          |              |              |     *
 *       ||
       |    +---------------------------------------------------------------+  *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

                           Figure D.23: Big-endian data bit ooesets
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |                                                                       *
 *       |
       |    j:0                                                                *
 *       |
       ||   k:5                                                                *
 *       ||
       |    m:11                                                               *
 *       |
       ||   n:16                                                               *
 *       ||
       ||                                           <- Addresses increase      *
 *       ||
       |    |     A + 3     |     A + 2     |    A + 1      |       A       |  *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |                                     <-  Data bit offsets increase     *
 *       |
       ||   +---------------+---------------+---------------+---------------+  *
 *       ||
       ||   |31          24|23          16|15     11|10       5|4        0|    *
 *       ||
       |    |     <pad>     |        n      |    m    |    k     |     j    |  *
 *       |
       ||   |              |              |         |          |          |    *
 *       ||
       |    +---------------------------------------------------------------+  *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

                          Figure D.24: Little-endian data bit ooesets



1      D.2.9    Ada Biased Bit-Field Example


2      The Ada source in Figure D.25 on the next page demonstrates how a member*
 * of a

3      record, which normally occupies six bits, can be biased to ot into three*
 * bits when

4      the range is known. The encoded values [ 0..7 ] correspond to the source

5      values [ 50..57 ] used by the application.


6      The DWARF description is shown in Figure D.26 on the following page. The*
 * bias

7      chosen, which in this case corresponds to the lower bound, is specioed i*
 *n the

8      base type at 1$.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 326
                            Appendix D. Examples (Informative)


      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||typeSmallRangeTypeisrange50..57;
      |||======================================================================*
 *====|||typeRecordTypeisrecord
      |||======================================================================*
 *====|||A:SmallRangeType;
      |||======================================================================*
 *====|||endrecord;
      |||======================================================================*
 *====|||forRecordTypeuserecord
      |||======================================================================*
 *====|||Aat0range0..2;
      |||======================================================================*
 *====|||endrecord;
      |||======================================================================*
 *====|||LocalRecord:RecordType;_|___|


       |            Figure D.25: Ada biased bit-oeld example: Ada source       *
 *       |

       ________________________________________________________________________*
 *______||||
       |1$: DW_TAG_base_type                                                   *
 *       |
       ||       DW_AT_byte_size(1)                                             *
 *       ||
       ||       DW_AT_encoding(DW_ATE_unsigned)                                *
 *       ||
       |        DW_AT_bias(50)                                                 *
 *       |
       ||       DW_AT_artificial(1)                                            *
 *       ||
       |2$: DW_TAG_subrange_type                                               *
 *       |
       ||       DW_AT_name("SmallRangeType")                                   *
 *       ||
       ||       DW_AT_lower_bound(50)                                          *
 *       ||
       |        DW_AT_upper_bound(57)                                          *
 *       |
       ||       DW_AT_type(reference to 1$)                                    *
 *       ||
       |3$: DW_TAG_structure_type                                              *
 *       |
       ||       DW_AT_name("RecordType")                                       *
 *       ||
       |        DW_AT_byte_size(1)                                             *
 *       |
       |4$:|   DW_TAG_member                                                   *
 *       ||
       ||          DW_AT_name("A")                                             *
 *       ||
       |           DW_AT_type(reference to 2$)                                 *
 *       |
       ||          DW_AT_bit_size(3)                                           *
 *       ||
       |           DW_AT_data_bit_offset(0)                                    *
 *       |
       |5$:|DW_TAG_variable                                                    *
 *       ||
       ||          DW_AT_name("LocalRecord")                                   *
 *       ||
       |           DW_AT_type(reference to 3$)                                 *
 *       |
       ||__________DW_AT_location_...__________________________________________*
 *______ ||


                Figure D.26: Ada biased bit-oeld example: DWARF description



1      Note that other choices of encoding and bias lead to the same result. Fo*
 *r example,

2      the DW.ATE.signed encoding can be used in combination with a bias of 54.


3      If the valid range of values is completely negative (for example, -57..-*
 *50) then

4      only signed encoding is valid, and the bias will also need to be negativ*
 *e (-53).



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 327
                            Appendix D. Examples (Informative)



1      D.2.10    Variant Entry Examples


2      The following examples illustrate some of the diverse ways that the DWARF

3      variant entry constructs are used in various programming languages.



4      D.2.10.1  Pascal Variant Entry Example


5      A Pascal record example without a variant part is shown in D.2.7 on page*
 * 323.

6      Here a Pascal record with a variant part is shown in Figure D.27 followi*
 *ng. The

7      corresponding DWARF representation follows in Figure D.28 on the followi*
 *ng

8      page.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||RPoint=Record
      |||======================================================================*
 *====|||CaseUsePolar:Booleanof
      |||======================================================================*
 *====|||False:(X,Y:Real);
      |||======================================================================*
 *====|||True:(Radius,Theta:Real);
      |||======================================================================*
 *====|||end;
      |||======================================================================*
 *====|||end;_|___|


                     Figure D.27: Pascal variant record example: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 328
       |                    Appendix D. Examples (Informative)                 *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||
       |! Description for type RPoint                                          *
 *       |
       |!|                                                                     *
 *       ||
       |1$: DW_TAG_structure_type                                              *
 *       |
       ||       DW_AT_name("RPoint")                                           *
 *       ||
       ||       DW_TAG_variant_part                                            *
 *       ||
       |           DW_AT_discr (reference to 2$)                               *
 *       |
       |2$:|        DW_TAG_member                                              *
 *       ||
       |               DW_AT_name("UsePolar")                                  *
 *       |
       ||              DW_AT_type(reference to Boolean)                        *
 *       ||
       ||          DW_TAG_variant                                              *
 *       ||
       |               DW_AT_discr_value(constant 0)                           *
 *       |
       ||              DW_TAG_member                                           *
 *       ||
       |                   DW_AT_name("X")                                     *
 *       |
       ||                  DW_AT_type(reference to Real)                       *
 *       ||
       ||                  DW_AT_data_member_location(1)                       *
 *       ||
       |               DW_TAG_member                                           *
 *       |
       ||                  DW_AT_name("Y")                                     *
 *       ||
       |                   DW_AT_type(reference to Real)                       *
 *       |
       ||                  DW_AT_data_member_location(5)                       *
 *       ||
       |           DW_TAG_variant                                              *
 *       |
       ||              DW_AT_discr_value(constant 1)                           *
 *       ||
       ||              DW_TAG_member                                           *
 *       ||
       |                   DW_AT_name("Radius")                                *
 *       |
       ||                  DW_AT_type(reference to Real)                       *
 *       ||
       |                   DW_AT_data_member_location(1)                       *
 *       |
       ||              DW_TAG_member                                           *
 *       ||
       ||                  DW_AT_name("Theta")                                 *
 *       ||
       |                   DW_AT_type(reference to Real)                       *
 *       |
       ||__________________DW_AT_data_member_location(5)_______________________*
 *______ ||


               Figure D.28: Pascal variant record example: DWARF description



1      Notice that the "tag" (member UsePolar in this case) is the orst child o*
 *f the

2      variant part. A "tagless" version of this example would simply delete "U*
 *sePolar :"

3      from the second line of the source (so that the tag has no name, hence i*
 *s not

4      visible). In the DWARF description, the member entry and name for UsePol*
 *ar

5      are then deleted, as is the DW.AT.discr attribute, and the remaining type

6      attribute is made an attribute of the containing variant part entry.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 329
                            Appendix D. Examples (Informative)



1      D.2.10.2  Ada Variant Entry Example


2      An Ada example variant part is illustrated in Figure D.29 following. The

3      corresponding DWARF is shown in Figure D.30 on the next page.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||typeR(D:integer)is
      |||======================================================================*
 *====|||record
      |||======================================================================*
 *====|||A:integer;
      |||======================================================================*
 *====|||caseDis
      |||======================================================================*
 *====|||when0=>
      |||======================================================================*
 *====|||F:float;
      |||======================================================================*
 *====|||when1=>
      |||======================================================================*
 *====|||N:integer;
      |||======================================================================*
 *====|||whenothers=>
      |||======================================================================*
 *====|||null;
      |||======================================================================*
 *====|||endcase;
      |||======================================================================*
 *====|||endrecord;_|___|


                      Figure D.29: Ada variant record example: source



4      For Ada, note that the tag is not "declared" as part of the variant part*
 * construct.

5      Rather the variant part refers to a discriminant of the containing type *
 *which

6      necessarily occurs as an initial member in the sequence of record compon*
 *ents.

7      This reference is implemented as a DW.AT.discr attribute of the

8      DW.TAG.variant.part entry.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 330
       |                    Appendix D. Examples (Informative)                 *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||
       |    DW_TAG_structure_type                                              *
 *       |
       ||       DW_AT_name("r")                                                *
 *       ||
       |1$:     DW_TAG_member                           ! Discriminant         *
 *       |
       ||         DW_AT_type(reference to integer)                             *
 *       ||
       ||         DW_AT_data_member_location(DW_OP_plus_uconst 0)              *
 *       ||
       |          DW_AT_name("d")                                              *
 *       |
       ||      DW_TAG_member                                                   *
 *       ||
       |          DW_AT_type(reference to integer)                             *
 *       |
       ||         DW_AT_data_member_location(DW_OP_plus_uconst 4)              *
 *       ||
       |          DW_AT_name("a")                                              *
 *       |
       ||      DW_TAG_variant_part                                             *
 *       ||
       ||         DW_AT_discr(reference to 1$)                                 *
 *       ||
       |          DW_TAG_variant                                               *
 *       |
       ||             DW_AT_discr_value(0)                                     *
 *       ||
       |              DW_TAG_member                                            *
 *       |
       ||                DW_AT_type(reference to float)                        *
 *       ||
       ||                DW_AT_data_member_location(DW_OP_plus_uconst 8)       *
 *       ||
       |                 DW_AT_name("f")                                       *
 *       |
       ||         DW_TAG_variant                                               *
 *       ||
       |             DW_AT_discr_value(1)                                      *
 *       |
       ||            DW_TAG_member                                             *
 *       ||
       ||                DW_AT_type(reference to integer)                      *
 *       ||
       |                 DW_AT_data_member_location(DW_OP_plus_uconst 8)       *
 *       |
       ||                DW_AT_name("n")                                       *
 *       ||
       |          DW_TAG_variant                                               *
 *       |
       ||____________!_No_members_described_for_the_"others"_variant___________*
 *______ ||

                Figure D.30: Ada variant record example: DWARF description



1      D.2.10.3  Rust Enum Example


2      While Rust does not have a variant record concept similar to that in Pas*
 *cal or

3      Ada, it does use a similar mechanism in the implementation of enums. To

4      illustrate, consider the enumeration in Figure D.31 following. This can *
 *be

5      described in DWARF as shown in Figure D.32 on the following page.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||enumMessage{
      |||======================================================================*
 *====|||F(f64),
      |||======================================================================*
 *====|||U(u32),
      |||======================================================================*
 *====|||N(i32)
      |||======================================================================*
 *====|||}_|___|


                          Figure D.31: Rust enum example: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 331
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|    DW_TAG_structure_type                                                     |
||       DW_AT_name("Message")                                                 *
 *||
|        DW_TAG_variant_part                                                   |
||          DW_AT_discr(reference to $1)                                       *
 *||
|$1:         DW_TAG_member                    ! Artificial discriminant        |
||              DW_AT_type(reference to u32)                                   *
 *||
||              DW_AT_data_member_location(0)                                  *
 *||
|               DW_AT_artificial(1)                                            |
||          DW_TAG_variant                                                     *
 *||
|               DW_AT_discr_value(0)                                           |
||              DW_TAG_member                                                  *
 *||
||                  DW_AT_type(reference to f32)                               *
 *||
|                   DW_AT_name("F")                                            |
||                  DW_AT_data_member_location(4)                              *
 *||
|           DW_TAG_variant                                                     |
||              DW_AT_discr_value(1)                                           *
 *||
|               DW_TAG_member                                                  |
||                  DW_AT_type(reference to u32)                               *
 *||
||                  DW_AT_name("U")                                            *
 *||
|                   DW_AT_data_member_location(4)                              |
||          DW_TAG_variant                                                     *
 *||
|               DW_AT_discr_value(2)                                           |
||              DW_TAG_member                                                  *
 *||
||                  DW_AT_type(reference to i32)                               *
 *||
|                   DW_AT_name("N")                                            |
||__________________DW_AT_data_member_location(4)_____________________________ *
 *||


             Figure D.32: Rust enum example: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 332
                            Appendix D. Examples (Informative)



1      D.3     Namespace Examples


2      The C++ example in Figure D.33 is used to illustrate the representation *
 *of

3      namespaces. The DWARF representation in Figure D.34 on the following pag*
 *e is

4      appropriate.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||namespace{
      |||======================================================================*
 *====|||inti;
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||namespaceA{
      |||======================================================================*
 *====|||namespaceB{
      |||======================================================================*
 *====|||intj;
      |||======================================================================*
 *====|||intmyfunc(inta);
      |||======================================================================*
 *====|||floatmyfunc(floatf){returnf-2.0;}
      |||======================================================================*
 *====|||intmyfunc2(inta){returna+2;}
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||namespaceY{
      |||======================================================================*
 *====|||usingA::B::j;//(1)usingdeclaration
      |||======================================================================*
 *====|||intfoo;
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||usingA::B::j;//(2)usingdeclaration
      |||======================================================================*
 *====|||namespaceFoo=A::B;//(3)namespacealias
      |||======================================================================*
 *====|||usingFoo::myfunc;//(4)usingdeclaration
      |||======================================================================*
 *====|||usingnamespaceFoo;//(5)usingdirective
      |||======================================================================*
 *====|||namespaceA{
      |||======================================================================*
 *====|||namespaceB{
      |||======================================================================*
 *====|||usingnamespaceY;//(6)usingdirective
      |||======================================================================*
 *====|||intk;
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||intFoo::myfunc(inta)
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||i=3;
      |||======================================================================*
 *====|||j=4;
      |||======================================================================*
 *====|||returnmyfunc2(3)+j+i+a+2;
      |||======================================================================*
 *====|||}_|___|


                    Figure D.33: Namespace example #1: source fragment



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 333
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_1_of*
 *_2||
|                                                                              |
|1$:|  DW_TAG_base_type                                                        *
 *||
|          DW_AT_name("int")                                                   |
||         ...                                                                 *
 *||
|2$:   DW_TAG_base_type                                                        |
||         DW_AT_name("float")                                                 *
 *||
||         ...                                                                 *
 *||
|6$:   DW_TAG_namespace                                                        |
||         ! no DW_AT_name attribute                                           *
 *||
|          DW_AT_export_symbols             ! Implied by C++, but can be explic*
 *it|
||         DW_TAG_variable                                                     *
 *||
||            DW_AT_name("i")                                                  *
 *||
|             DW_AT_type(reference to 1$)                                      |
||            DW_AT_location ...                                               *
 *||
|             ...                                                              |
|10$:| DW_TAG_namespace                                                        *
 *||
||         DW_AT_name("A")                                                     *
 *||
|20$:      DW_TAG_namespace                                                    |
||            DW_AT_name("B")                                                  *
 *||
|30$:          DW_TAG_variable                                                 |
||                DW_AT_name("j")                                              *
 *||
|                 DW_AT_type(reference to 1$)                                  |
||                DW_AT_location ...                                           *
 *||
||                ...                                                          *
 *||
|34$:          DW_TAG_subprogram                                               |
||                DW_AT_name("myfunc")                                         *
 *||
|                 DW_AT_type(reference to 1$)                                  |
||                ...                                                          *
 *||
|36$:|         DW_TAG_subprogram                                               *
 *||
|                 DW_AT_name("myfunc")                                         |
||                DW_AT_type(reference to 2$)                                  *
 *||
|                 ...                                                          |
|38$:|         DW_TAG_subprogram                                               *
 *||
||                DW_AT_name("myfunc2")                                        *
 *||
|                 DW_AT_low_pc ...                                             |
||                DW_AT_high_pc ...                                            *
 *||
|                 DW_AT_type(reference to 1$)                                  |
||________________..._________________________________________________________ *
 *||

           Figure D.34: Namespace example #1: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 334
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
|40$:  DW_TAG_namespace                                                        |
||         DW_AT_name("Y")                                                     *
 *||
|          DW_TAG_imported_declaration           ! (1) using-declaration       |
||            DW_AT_import(reference to 30$)                                   *
 *||
||         DW_TAG_variable                                                     *
 *||
|             DW_AT_name("foo")                                                |
||            DW_AT_type(reference to 1$)                                      *
 *||
|             DW_AT_location ...                                               |
||            ...                                                              *
 *||
||     DW_TAG_imported_declaration               ! (2) using declaration       *
 *||
|          DW_AT_import(reference to 30$)                                      |
||     DW_TAG_imported_declaration               ! (3) namespace alias         *
 *||
|          DW_AT_name("Foo")                                                   |
||         DW_AT_import(reference to 20$)                                      *
 *||
||     DW_TAG_imported_declaration               ! (4) using declaration       *
 *||
|          DW_AT_import(reference to 34$)         !     - part 1               |
||     DW_TAG_imported_declaration               ! (4) using declaration       *
 *||
|          DW_AT_import(reference to 36$)         !     - part 2               |
||     DW_TAG_imported_module                    ! (5) using directive         *
 *||
|          DW_AT_import(reference to 20$)                                      |
||     DW_TAG_namespace                                                        *
 *||
||         DW_AT_extension(reference to 10$)                                   *
 *||
|          DW_TAG_namespace                                                    |
||            DW_AT_extension(reference to 20$)                                *
 *||
|             DW_TAG_imported_module            ! (6) using directive          |
||                DW_AT_import(reference to 40$)                               *
 *||
||            DW_TAG_variable                                                  *
 *||
|                 DW_AT_name("k")                                              |
||                DW_AT_type(reference to 1$)                                  *
 *||
|                 DW_AT_location ...                                           |
||                ...                                                          *
 *||
|60$:| DW_TAG_subprogram                                                       *
 *||
|          DW_AT_specification(reference to 34$)                               |
||         DW_AT_low_pc ...                                                    *
 *||
|          DW_AT_high_pc ...                                                   |
||_________...________________________________________________________________ *
 *||


      Figure D.34: Namespace example #1: DWARF description (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 335
                            Appendix D. Examples (Informative)



1      As a further namespace example, consider the inlined namespace shown in

2      Figure D.35. For this source, the DWARF description in Figure D.36 is

3      appropriate. In this example, a may be referenced either as a member of *
 *the fully

4      qualioed namespace A::B, or as if it were deoned in the enclosing namesp*
 *ace, A.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||namespaceA{
      |||======================================================================*
 *====|||inlinenamespaceB{//(1)inlinenamespace
      |||======================================================================*
 *====|||inta;
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||voidfoo(void)
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||usingA::B::a;
      |||======================================================================*
 *====|||a=1;
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||voidbar(void)
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||usingA::a;
      |||======================================================================*
 *====|||a=2;
      |||======================================================================*
 *====|||}_|___|


                    Figure D.35: Namespace example #2: source fragment


       ________________________________________________________________________*
 *______||
       |1$:   DW_TAG_namespace                                                 *
 *       |
       ||         DW_AT_name("A")                                              *
 *       ||
       |2$:       DW_TAG_namespace                                             *
 *       |
       ||            DW_AT_name("B")                                           *
 *       ||
       ||            DW_AT_export_symbols                                      *
 *       ||
       |3$:          DW_TAG_variable                                           *
 *       |
       ||________________DW_AT_name("a")_______________________________________*
 *______ ||


                  Figure D.36: Namespace example #2: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 336
                            Appendix D. Examples (Informative)



1      D.4     Member Function Examples


2      Consider the member function example fragment in Figure D.37. The DWARF

3      representation in Figure D.38 is appropriate.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||classA
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||voidfunc1(intx1);
      |||======================================================================*
 *====|||voidfunc2()const;
      |||======================================================================*
 *====|||staticvoidfunc3(intx3);
      |||======================================================================*
 *====|||};
      |||======================================================================*
 *====|||voidA::func1(intx){}_|___|


                   Figure D.37: Member function example: source fragment

       |                                                                       *
 *       |
       ______________________________________________________________________pa*
 *rt_1_of_2||||
       |                                                                       *
 *       |
       |2$: DW_TAG_base_type                                                   *
 *       |
       ||       DW_AT_name("int")                                              *
 *       ||
       ||       ...                                                            *
 *       ||
       |3$: DW_TAG_class_type                                                  *
 *       |
       ||       DW_AT_name("A")                                                *
 *       ||
       |        ...                                                            *
 *       |
       |4$:|    DW_TAG_pointer_type                                            *
 *       ||
       |           DW_AT_type(reference to 3$)                                 *
 *       |
       ||          ...                                                         *
 *       ||
       |5$:|    DW_TAG_const_type                                              *
 *       ||
       |           DW_AT_type(reference to 3$)                                 *
 *       |
       ||          ...                                                         *
 *       ||
       |6$:     DW_TAG_pointer_type                                            *
 *       |
       ||          DW_AT_type(reference to 5$)                                 *
 *       ||
       ||          ...                                                         *
 *       ||
       |                                                                       *
 *       |
       |7$:|    DW_TAG_subprogram                                              *
 *       ||
       |           DW_AT_declaration                                           *
 *       |
       ||          DW_AT_name("func1")                                         *
 *       ||
       ||          DW_AT_object_pointer(reference to 8$)                       *
 *       ||
       |               ! References a formal parameter in this                 *
 *       |
       ||              ! member function                                       *
 *       ||
       |           ...                                                         *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

                 Figure D.38: Member function example: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 337
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
|                                                                              |
|8$:         DW_TAG_formal_parameter                                           |
||              DW_AT_artificial(true)                                         *
 *||
||              DW_AT_name("this")                                             *
 *||
|               DW_AT_type(reference to 4$)                                    |
||                  ! Makes type of 'this' as 'A*' =>                          *
 *||
|                   ! func1 has not been marked const                          |
||                  ! or volatile                                              *
 *||
||              DW_AT_location ...                                             *
 *||
|               ...                                                            |
|9$:|        DW_TAG_formal_parameter                                           *
 *||
|               DW_AT_name(x1)                                                 |
||              DW_AT_type(reference to 2$)                                    *
 *||
||              ...                                                            *
 *||
|10$:    DW_TAG_subprogram                                                     |
||          DW_AT_declaration                                                  *
 *||
|           DW_AT_name("func2")                                                |
||          DW_AT_object_pointer(reference to 11$)                             *
 *||
||          ! References a formal parameter in this                            *
 *||
|           ! member function                                                  |
||          ...                                                                *
 *||
|11$:        DW_TAG_formal_parameter                                           |
||              DW_AT_artificial(true)                                         *
 *||
|               DW_AT_name("this")                                             |
||              DW_AT_type(reference to 6$)                                    *
 *||
||              ! Makes type of 'this' as 'A const*' =>                        *
 *||
|               !     func2 marked as const                                    |
||              DW_AT_location ...                                             *
 *||
|               ...                                                            |
|12$:|   DW_TAG_subprogram                                                     *
 *||
||          DW_AT_declaration                                                  *
 *||
|           DW_AT_name("func3")                                                |
||          ...                                                                *
 *||
|               ! No object pointer reference formal parameter                 |
||              ! implies func3 is static                                      *
 *||
|13$:|       DW_TAG_formal_parameter                                           *
 *||
|               DW_AT_name(x3)                                                 |
||              DW_AT_type(reference to 2$)                                    *
 *||
|               ...                                                            |
|                                                                              |
|_____________________________________________________________________________ |

    Figure D.38: Member function example: DWARF description (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 338
                            Appendix D. Examples (Informative)



1      As a further example illustrating &- and &&-qualiocation of member funct*
 *ions,

2      consider the member function example fragment in Figure D.39. The DWARF

3      representation in Figure D.40 on the next page is appropriate.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||classA{
      |||======================================================================*
 *====|||public:
      |||======================================================================*
 *====|||voidf()const&&;
      |||======================================================================*
 *====|||};
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||voidg(){
      |||======================================================================*
 *====|||Aa;
      |||======================================================================*
 *====|||//Thetypeofpointeris"void(A::*)()const&&".
      |||======================================================================*
 *====|||autopointer_to_member_function=&A::f;
      |||======================================================================*
 *====|||}_|___|


       Figure  D.39:  Reference-  and  rvalue-reference-qualiocation  example: *
 * source

       fragment



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 339
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||

|100$:|  DW_TAG_class_type                                                     *
 *||
||          DW_AT_name("A")                                                    *
 *||
|           DW_TAG_subprogram                                                  |
||              DW_AT_name("f")                                                *
 *||
|               DW_AT_rvalue_reference(0x01)                                   |
||              DW_TAG_formal_parameter                                        *
 *||
||                  DW_AT_type(ref to 200$)     ! to const A*                  *
 *||
|                   DW_AT_artificial(0x01)                                     |
|                                                                              |
|                                                                              |
|200$:   ! const A*                                                            |
||       DW_TAG_pointer_type                                                   *
 *||
||          DW_AT_type(ref to 300$)            ! to const A                    *
 *||
|                                                                              |
|300$:|  ! const A                                                             *
 *||
|        DW_TAG_const_type                                                     |
||          DW_AT_type(ref to 100$)            ! to class A                    *
 *||
|                                                                              |
|400$:|  ! mfptr                                                               *
 *||
||       DW_TAG_ptr_to_member_type                                             *
 *||
|           DW_AT_type(ref to 500$)            ! to functype                   |
||          DW_AT_containing_type(ref to 100$)  ! to class A                   *
 *||
|                                                                              |
|500$:|  ! functype                                                            *
 *||
||       DW_TAG_subroutine_type                                                *
 *||
|           DW_AT_rvalue_reference(0x01)                                       |
||          DW_TAG_formal_parameter                                            *
 *||
|               DW_AT_type(ref to 200$)         ! to const A*                  |
||              DW_AT_artificial(0x01)                                         *
 *||
|                                                                              |

|600$:|  DW_TAG_subprogram                                                     *
 *||
||          DW_AT_name("g")                                                    *
 *||
|           DW_TAG_variable                                                    |
||              DW_AT_name("a")                                                *
 *||
||              DW_AT_type(ref to 100$)         ! to class A                   *
 *||
|           DW_TAG_variable                                                    |
||              DW_AT_name("pointer_to_member_function")                       *
 *||
|               DW_AT_type(ref to 400$)                                        |
|                                                                              |
|_____________________________________________________________________________ |

Figure D.40:  Reference- and rvalue-reference-qualiocation example:  DWARF

description



July 15 2024               ***WORKING DRAFT***                       Page 340
                            Appendix D. Examples (Informative)



1      D.5     Line Number Examples



2      D.5.1    Line Number Header Example


3      Figure D.41 illustrates a line number header (see Section 6.2.4 on page *
 *159).

4      There|are multiple alternative olename formats, which include the source*
 * and   |
       |                                                                       *
 *       |
5      URL|types.                                                              *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||
       |  Field          Field Name                     Value(s)               *
 *       |
       || Number                                                               *
 *       ||
       |     1    unit_length                  <unit length>                   *
 *       |
       ||    2    version                      6                               *
 *       ||
       |     3    address_size                 4 or 8                          *
 *       |
       ||    4    Reserved                     0                               *
 *       ||
       ||    5    header_length                <header length>                 *
 *       ||
       |     6    minimum_instruction_length    1                              *
 *       |
       ||    7    maximum_operations_per_instruction 1                         *
 *       ||
       |     8    default_is_stmt              1 (true)                        *
 *       |
       ||    9    line_base                    -3                              *
 *       ||
       |    10    line_range                   12                              *
 *       |
       ||   11    opcode_base                  13                              *
 *       ||
       ||   12    standard_opcode_lengths       [0,1,1,1,1,0,0,0,0,0,0,1]      *
 *       ||
       |    13    directory_format_count        1                              *
 *       |
       ||   14    directory_format_table        [DW_LNCT_path, DW_FORM_string],*
 *       ||
       |                                     [0, 0]                            *
 *       |
       ||   15    directories_count            1                               *
 *       ||
       ||   16    directories                  [0, <directory path string>]    *
 *       ||
       |    17    file_name_format_count        3                              *
 *       |
       ||   18    file_name_format_table        [DW_LNCT_source, DW_FORM_strp],*
 *       ||
       |                                     [0, 0]                            *
 *       |
       ||                                    [DW_LNCT_path, DW_FORM_string],   *
 *       ||
       ||                                    [DW_LNCT_directory_index, DW_FORM_*
 *udata],||
       |                                     [DW_LNCT_timestamp, DW_FORM_udata]*
 *,      |
       ||                                    [DW_LNCT_size, DW_FORM_udata],    *
 *       ||
       |                                     [0, 0],                           *
 *       |
       ||                                    [DW_LNCT_URL, DW_FORM_strp],      *
 *       ||
       |                                     [0, 0]                            *
 *       |
       ||   19    file_names_count             4                               *
 *       ||
       ||   20    file_names                   [0, {<source string offset>}],  *
 *       ||
       |                                     [2, {<URL string offset>}],       *
 *       |
       ||                                    [1, {<name string 1>, <directory i*
 *ndex=0>,||
       |                                          <timestamp 1>, <size 1>}],   *
 *       |
       ||                                    [1, {<name string 2>, <directory i*
 *ndex=0>,||
       ||_________________________________________<timestamp_2>,_<size_2>}]____*
 *______ ||


                     Figure D.41: Example line number program header



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 341
                             Appendix D. Examples (Informative)



 1      D.5.2    Line Number Special Opcode Example


 2      Given the example header in Figure D.41 on the preceding page, we can u*
 *se a

 3      special opcode whenever two successive rows in the matrix have source l*
 *ine

 4      numbers dioeering by any value within the range [-3, 8]and (because of *
 *the

 5      limited number of opcodes available) when the dioeerence between addres*
 *ses is

 6      within the range [0, 20]. The resulting opcode mapping is shown in Figu*
 *re D.42.


 7      Note in the bottom row of the ogure that not all line advances are avai*
 *lable for

 8      the maximum operation advance.


                                  Line Advance

            Operation

              Advance     -3  -2  -1    0    1    2    3    4    5    6    7   *
 * 8

            ---------    -----------------------------------------------

                    0     13  14  15  16  17  18  19  20  21  22  23  24

                    1     25  26  27  28  29  30  31  32  33  34  35  36

                    2     37  38  39  40  41  42  43  44  45  46  47  48

                    3     49  50  51  52  53  54  55  56  57  58  59  60

                    4     61  62  63  64  65  66  67  68  69  70  71  72

                    5     73  74  75  76  77  78  79  80  81  82  83  84

                    6     85  86  87  88  89  90  91  92  93  94  95  96

                    7     97  98  99 100 101 102 103 104 105 106 107 108

                    8    109 110 111 112 113 114 115 116 117 118 119 120

                    9    121 122 123 124 125 126 127 128 129 130 131 132

                   10    133 134 135 136 137 138 139 140 141 142 143 144

                   11    145 146 147 148 149 150 151 152 153 154 155 156

                   12    157 158 159 160 161 162 163 164 165 166 167 168

                   13    169 170 171 172 173 174 175 176 177 178 179 180

                   14    181 182 183 184 185 186 187 188 189 190 191 192

                   15    193 194 195 196 197 198 199 200 201 202 203 204

                   16    205 206 207 208 209 210 211 212 213 214 215 216

                   17    217 218 219 220 221 222 223 224 225 226 227 228

                   18    229 230 231 232 233 234 235 236 237 238 239 240

                   19    241 242 243 244 245 246 247 248 249 250 251 252

                   20    253 254 255



                  Figure D.42: Example line number special opcode mapping



 9      There is no requirement that the expression 255 - line_base + 1 be an i*
 *ntegral

10      multiple of line_range.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 342
                            Appendix D. Examples (Informative)



1      D.5.3    Line Number Program Example


2      Consider the simple source ole and the resulting machine code for the In*
 *tel 8086

3      processor in Figure D.43.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||1:int
      |||======================================================================*
 *====|||2:main()
      |||======================================================================*
 *====|||0x239:pushpb
      |||======================================================================*
 *====|||0x23a:movbp,sp
      |||======================================================================*
 *====|||3:{
      |||======================================================================*
 *====|||4:printf("Omitneedlesswords\n");
      |||======================================================================*
 *====|||0x23c:movax,0xaa
      |||======================================================================*
 *====|||0x23f:pushax
      |||======================================================================*
 *====|||0x240:call_printf
      |||======================================================================*
 *====|||0x243:popcx
      |||======================================================================*
 *====|||5:exit(0);
      |||======================================================================*
 *====|||0x244:xorax,ax
      |||======================================================================*
 *====|||0x246:pushax
      |||======================================================================*
 *====|||0x247:call_exit
      |||======================================================================*
 *====|||0x24a:popcx
      |||======================================================================*
 *====|||6:}
      |||======================================================================*
 *====|||0x24b:popbp
      |||======================================================================*
 *====|||0x24c:ret
      |||======================================================================*
 *====|||7:0x24d:_|___|


                 Figure D.43: Line number program example: machine code



4      Suppose the line number program header includes the same values and resu*
 *lting

5      encoding illustrated in the previous Section D.5.2 on the previous page.


6      Table D.2 on the following page shows one encoding of the line number

7      program, which occupies 12 bytes.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 343
                            Appendix D. Examples (Informative)



                   Table  D.2:   Line  number  program  example:   one

                   encoding
               _____________________________________________________________
               _Opcode_________________||_Operand_______||Byte_Stream_______

                DW.LNS.advance.pc    ||   LEB128(0x239) ||0x2, 0xb9, 0x04

                SPECIAL# (2, 0)          ||              ||0x12 (1810)

                SPECIAL# (2, 3)          ||              ||0x36 (5410)

                SPECIAL# (1, 8)          ||              ||0x71 (11310)

                SPECIAL# (1, 7)          ||              ||0x65 (10110)

                DW.LNS.advance.pc    ||   LEB128(2)      ||0x2, 0x2

               _DW.LNE.end.sequence_||___________________||0x0,_0x1,_0x1____

                # The opcode notation SPECIAL(m,n) indicates the special

                opcode  generated for a line advance of m and an operation

                advance of n.



1      Table D.3 shows an alternate encoding of the same program using standard

2      opcodes to advance the program counter; this encoding occupies 22 bytes.



                   Table D.3:  Line number program example:  alternate

                   encoding
               _____________________________________________________________
               _Opcode_____________________||_Operand_||Byte_Stream_________

                DW.LNS.oxed.advance.pc ||     0x239     ||0x9, 0x39, 0x2

                SPECIAL# (2, 0)             ||         ||0x12 (1810)

                DW.LNS.oxed.advance.pc ||     0x3       ||0x9, 0x3, 0x0

                SPECIAL# (2, 0)             ||         ||0x12 (1810)

                DW.LNS.oxed.advance.pc ||     0x8       ||0x9, 0x8, 0x0

                SPECIAL# (1, 0)             ||         ||0x11 (1710)

                DW.LNS.oxed.advance.pc ||     0x7       ||0x9, 0x7, 0x0

                SPECIAL# (1, 0)             ||         ||0x11 (1710)

                DW.LNS.oxed.advance.pc ||     0x2       ||0x9, 0x2, 0x0

               _DW.LNE.end.sequence_____||_____________||0x0,_0x1,_0x1______

                # SPECIAL is deoned the same as in the preceding Table D.2.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 344
                             Appendix D. Examples (Informative)



 1      D.6     Call Frame Information Example


 2      The following example uses a hypothetical RISC machine in the style of *
 *the

 3      Motorola 88000.


 4        #  Memory is byte addressed.


 5        #  Instructions are all 4 bytes each and word aligned.


 6        #  Instruction operands are typically of the form:


 7                <destination.reg>, <source.reg>, <constant>


 8        #  The address for the load and store instructions is computed by add*
 *ing the

 9           contents of the source register with the constant.


10        #  There are eight 4-byte registers:


                   R0 always 0

                   R1 holds return address on call

                   R2-R3 temp registers (not preserved on call)

                   R4-R6 preserved on call

                   R7 stack pointer


11        #  The stack grows in the negative direction.


12        #  The architectural ABI committee specioes that the stack pointer (R*
 *7) is the

13           same as the CFA


14      Figure D.44 following shows two code fragments from a subroutine called*
 * foo

15      that uses a frame pointer (in addition to the stack pointer). The orst *
 *column

16      values are byte addresses. !fs? denotes the stack frame size in bytes, *
 *namely 12.


17      An abstract table (see Section 6.4.1 on page 179) for the foo subroutin*
 *e is shown

18      in Table D.4 following. Corresponding fragments from the .debug_frame s*
 *ection

19      are shown in Table D.5 on page 347.


20      The following notations apply in Table D.4 on the following page:


              1. R8 is the return address

              2. s = same.value rule

              3. u = undeoned rule

              4. rN = register(N) rule

              5. cN = ooeset(N) rule

              6. a = architectural rule



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 345
                      Appendix D. Examples (Informative)


______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|;;startprologue
|||==========================================================================||*
 *|foosubR7,R7,<fs>;Allocateframe
|||==========================================================================||*
 *|foo+4storeR1,R7,(<fs>-4);Savethereturnaddress
|||==========================================================================||*
 *|foo+8storeR6,R7,(<fs>-8);SaveR6
|||==========================================================================||*
 *|foo+12addR6,R7,0;R6isnowtheFrameptr
|||==========================================================================||*
 *|foo+16storeR4,R6,(<fs>;-12)Saveapreservedreg
|||==========================================================================||*
 *|;;ThissubroutinedoesnotchangeR5
|||==========================================================================||*
 *|...
|||==========================================================================||*
 *|;;Startepilogue(R7isreturnedtoentryvalue)
|||==========================================================================||*
 *|foo+64loadR4,R6,(<fs>;-12)RestoreR4
|||==========================================================================||*
 *|foo+68loadR6,R7,(<fs>-8);RestoreR6
|||==========================================================================||*
 *|foo+72loadR1,R7,(<fs>-4);Restorereturnaddress
|||==========================================================================||*
 *|foo+76addR7,R7,<fs>;Deallocateframe
|||==========================================================================||*
 *|foo+80jumpR1;Return
|||==========================================================================||*
 *|foo+84_|___|


      Figure D.44: Call frame information example: machine code fragments



             Table D.4: Call frame information example: conceptual

             matrix
  _____________________________________________________________________________
  _Location_____________||CFA_____R0___R1___R2__R3___R4____R5___R6__R7___R8____

   foo                   ||[R7]+0 s    u    u   u    s     s    s   a    r1

   foo+4                ||[R7]+fs s    u    u   u    s     s    s   a    r1

   foo+8                ||[R7]+fs s    u    u   u    s     s    s   a    c-4

   foo+12               ||[R7]+fs s    u    u   u    s     s    c-8 a    c-4

   foo+16               ||[R6]+fs s    u    u   u    s     s    c-8 a    c-4

   foo+20               ||[R6]+fs s    u    u   u    c-12  s    c-8 a    c-4

   ...                    ||

   foo+64               ||[R6]+fs s    u    u   u    c-12  s    c-8 a    c-4

   foo+68               ||[R6]+fs s    u    u   u    s     s    c-8 a    c-4

   foo+72               ||[R7]+fs s    u    u   u    s     s    s   a    c-4

   foo+76               ||[R7]+fs s    u    u   u    s     s    s   a    r1

  _foo+80_______________||[R7]+0__s____u____u___u____s_____s____s___a____r1____



 July 15 2024               ***WORKING DRAFT***                       Page 346
                     Appendix D. Examples (Informative)



              Table D.5: Call frame information example: common

              information entry encoding
_______________________________________________________________________________*
 *__
_Address______________||Value_____________________Comment______________________*
 *__

 cie                   ||36                       length

 cie+4                 ||0xffffffff               CIE.id

 cie+8                 ||4                        version

 cie+9                 ||0                        augmentation

 cie+10                ||4                        address size

 cie+11                ||0                        Reserved

 cie+12                ||4                        code.alignment.factor, !caf ?

 cie+13                ||-4                       data.alignment.factor, !daf ?

 cie+14                ||8                        R8 is the return addr.

 cie+15                ||DW.CFA.def.cfa (7, 0)    CFA = [R7]+0

 cie+18                ||DW.CFA.same.value (0)    R0 not modioed (=0)

 cie+20                ||DW.CFA.undeoned (1)      R1 scratch

 cie+22                ||DW.CFA.undeoned (2)      R2 scratch

 cie+24                ||DW.CFA.undeoned (3)      R3 scratch

 cie+26                ||DW.CFA.same.value (4)    R4 preserve

 cie+28                ||DW.CFA.same.value (5)    R5 preserve

 cie+30                ||DW.CFA.same.value (6)    R6 preserve

 cie+32                ||DW.CFA.same.value (7)    R7 preserve

 cie+34                ||DW.CFA.register (8, 1)   R8 is in R1

 cie+37                ||DW.CFA.nop               padding

 cie+38                ||DW.CFA.nop               padding

 cie+39                ||DW.CFA.nop               padding

_cie+40________________||______________________________________________________*
 *__



July 15 2024               ***WORKING DRAFT***                       Page 347
                            Appendix D. Examples (Informative)



                     Table D.6: Call frame information example: frame de-

                     scription entry encoding
       ________________________________________________________________________*
 *_________
       _Address______________||Value________________________Comment#___________*
 *_________

        fde                   ||40                          length

        fde+4                ||cie                          CIE.ptr

        fde+8                ||foo                          initial.location

        fde+12               ||84                           address.range

        fde+16               ||DW.CFA.advance.loc(1)        instructions

        fde+17               ||DW.CFA.def.cfa.ooeset(12)    !fs?

        fde+19               ||DW.CFA.advance.loc(1)        4/!caf?

        fde+20               ||DW.CFA.ooeset(8,1)           -4/!daf?(2nd parame*
 *ter)

        fde+22               ||DW.CFA.advance.loc(1)

        fde+23               ||DW.CFA.ooeset(6,2)           -8/!daf?(2nd parame*
 *ter)

        fde+25               ||DW.CFA.advance.loc(1)

        fde+26               ||DW.CFA.def.cfa.register(6)

        fde+28               ||DW.CFA.advance.loc(1)

        fde+29               ||DW.CFA.ooeset(4,3)           -12/!daf?(2nd param*
 *eter)

        fde+31               ||DW.CFA.advance.loc(12)       44/!caf?

        fde+32               ||DW.CFA.restore(4)

        fde+33               ||DW.CFA.advance.loc(1)

        fde+34               ||DW.CFA.restore(6)

        fde+35               ||DW.CFA.def.cfa.register(7)

        fde+37               ||DW.CFA.advance.loc(1)

        fde+38               ||DW.CFA.restore(8)

        fde+39               ||DW.CFA.advance.loc(1)

        fde+40               ||DW.CFA.def.cfa.ooeset(0)

        fde+42               ||DW.CFA.nop                   padding

        fde+43               ||DW.CFA.nop                   padding

       _fde+44_______________||________________________________________________*
 *_________



1      #The following notations apply: <fs> = frame size, <caf> = code alignment

2      factor, and <daf> = data alignment factor.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 348
                             Appendix D. Examples (Informative)



 1      D.7     Inlining Examples


 2      The pseudo-source in Figure D.45 following is used to illustrate the us*
 *e of

 3      DWARF to describe inlined subroutine calls. This example involves a nes*
 *ted

 4      subprogram INNER that makes uplevel references to the formal parameter *
 *and

 5      local variable of the containing subprogram OUTER.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||inlineprocedureOUTER(OUTER_FORMAL:integer)=
       |||=====================================================================*
 *=====|||begin
       |||=====================================================================*
 *=====|||OUTER_LOCAL:integer;
       |||=====================================================================*
 *=====|||procedureINNER(INNER_FORMAL:integer)=
       |||=====================================================================*
 *=====|||begin
       |||=====================================================================*
 *=====|||INNER_LOCAL:integer;
       |||=====================================================================*
 *=====|||print(INNER_FORMAL+OUTER_LOCAL);
       |||=====================================================================*
 *=====|||end;
       |||=====================================================================*
 *=====|||INNER(OUTER_LOCAL);
       |||=====================================================================*
 *=====|||...
       |||=====================================================================*
 *=====|||INNER(31);
       |||=====================================================================*
 *=====|||end;
       |||=====================================================================*
 *=====|||!CallOUTER
       |||=====================================================================*
 *=====|||!
       |||=====================================================================*
 *=====|||OUTER(7);_|___|


                   Figure D.45: Inlining examples: pseudo-source fragmment



 6      There are several approaches that a compiler might take to inlining for*
 * this sort

 7      of example. This presentation considers three such approaches, all of w*
 *hich

 8      involve inline expansion of subprogram OUTER. (If OUTER is not inlined,*
 * the

 9      inlining reduces to a simpler single level subset of the two level appr*
 *oaches

10      considered here.)


11      The approaches are:


12      1.  Inline both OUTER and INNER in all cases


13      2.  Inline OUTER, multiple INNERs

14          Treat INNER as a non-inlinable part of OUTER, compile and call a di*
 *stinct

15          normal version of INNER deoned within each inlining of OUTER.


16      3.  Inline OUTER, one INNER

17          Compile INNER as a single normal subprogram which is called from ev*
 *ery

18          inlining of OUTER.


19      This discussion does not consider why a compiler might choose one of th*
 *ese

20      approaches; it considers only how to describe the result.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 349
                             Appendix D. Examples (Informative)



 1      In the examples that follow in this section, the debugging information *
 *entries are

 2      given mnemonic labels of the following form


 3          <io>.<ac>.<n>.<s>


 4      where


 5      !io? is either INNER or OUTER to indicate to which subprogram the debug*
 *ging

 6           information entry applies,


 7      !ac? is either AI or CI to indicate iabstract instancej or iconcrete in*
 *stancej

 8           respectively,


 9      !n?  is the number of the alternative being considered, and


10      !s? is a sequence number that distinguishes the individual entries.


11      There is no implication that symbolic labels, nor any particular naming

12      convention, are required in actual use.


13      For conciseness, declaration coordinates and call coordinates are omitt*
 *ed.



14      D.7.1    Alternative #1: inline both OUTER and INNER


15      A suitable abstract instance for an alternative where both OUTER and IN*
 *NER are

16      always inlined is shown in Figure D.46 on the next page.


17      Notice in Figure D.46 that the debugging information entry for INNER (l*
 *abelled

18      INNER.AI.1.1$) is nested in (is a child of) that for OUTER (labelled

19      OUTER.AI.1.1$). Nonetheless, the abstract instance tree for INNER is co*
 *nsidered

20      to be separate and distinct from that for OUTER.


21      The call of OUTER shown in Figure D.45 on the preceding page might be d*
 *escribed

22      as shown in Figure D.47 on page 352.



23      D.7.2    Alternative #2: Inline OUTER, multiple INNERs


24      In the second alternative we assume that subprogram INNER is not inlina*
 *ble for

25      some reason, but subprogram OUTER is inlinable. Each concrete inlined i*
 *nstance

26      of OUTER has its own normal instance of INNER. The abstract instance fo*
 *r OUTER,

27      which includes INNER, is shown in Figure D.48 on page 354.


28      Note that the debugging information in Figure D.48 dioeers from that in*
 * Figure

29      D.46 on the next page in that INNER lacks a DW.AT.inline attribute and *
 *therefore

30      is not a distinct abstract instance. INNER is merely an out-of-line rou*
 *tine that is

31      part of OUTER's abstract instance. This is reAEected in the Figure by t*
 *he fact that the

32      labels for INNER use the substring OUTER instead of INNER.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 350
                     Appendix D. Examples (Informative)


|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |

______________________________________________________________________________|*
 *|||
|    ! Abstract instance for OUTER                                             |
||   !                                                                         *
 *||
|OUTER.AI.1.1$:                                                                |
||   DW_TAG_subprogram                                                         *
 *||
||       DW_AT_name("OUTER")                                                   *
 *||
|        DW_AT_inline(DW_INL_declared_inlined)                                 |
||       ! No low/high PCs                                                     *
 *||
|OUTER.AI.1.2$:                                                                |
||       DW_TAG_formal_parameter                                               *
 *||
||          DW_AT_name("OUTER_FORMAL")                                         *
 *||
|           DW_AT_type(reference to integer)                                   |
||          ! No location                                                      *
 *||
|OUTER.AI.1.3$:                                                                |
||       DW_TAG_variable                                                       *
 *||
||          DW_AT_name("OUTER_LOCAL")                                          *
 *||
|           DW_AT_type(reference to integer)                                   |
||          ! No location                                                      *
 *||
|        !                                                                     |
||       ! Abstract instance for INNER                                         *
 *||
||       !                                                                     *
 *||
|INNER.AI.1.1$:                                                                |
||       DW_TAG_subprogram                                                     *
 *||
|           DW_AT_name("INNER")                                                |
||          DW_AT_inline(DW_INL_declared_inlined)                              *
 *||
|           ! No low/high PCs                                                  |
|INNER.AI.1.2$:|                                                               *
 *||
||          DW_TAG_formal_parameter                                            *
 *||
|               DW_AT_name("INNER_FORMAL")                                     |
||              DW_AT_type(reference to integer)                               *
 *||
|               ! No location                                                  |
|INNER.AI.1.3$:|                                                               *
 *||
||          DW_TAG_variable                                                    *
 *||
|               DW_AT_name("INNER_LOCAL")                                      |
||              DW_AT_type(reference to integer)                               *
 *||
|               ! No location                                                  |
||          ...                                                                *
 *||
||          0                                                                  *
 *||
|        ! No DW_TAG_inlined_subroutine (concrete instance)                    |
||       ! for INNER corresponding to calls of INNER                           *
 *||
|        ...                                                                   |
||_______0____________________________________________________________________ *
 *||

               Figure D.46: Inlining example #1: abstract instance



July 15 2024               ***WORKING DRAFT***                       Page 351
|                                                                              |
||                   Appendix D. Examples (Informative)                        *
 *||
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|! Concrete instance for call "OUTER(7)"                                       |
|!|                                                                            *
 *||
|OUTER.CI.1.1$:|                                                               *
 *||
|    DW_TAG_inlined_subroutine                                                 |
||       ! No name                                                             *
 *||
|        DW_AT_abstract_origin(reference to OUTER.AI.1.1$)                     |
||       DW_AT_low_pc(...)                                                     *
 *||
|        DW_AT_high_pc(...)                                                    |
|OUTER.CI.1.2$:|                                                               *
 *||
||       DW_TAG_formal_parameter                                               *
 *||
|           ! No name                                                          |
||          DW_AT_abstract_origin(reference to OUTER.AI.1.2$)                  *
 *||
|           DW_AT_const_value(7)                                               |
|OUTER.CI.1.3$:|                                                               *
 *||
||       DW_TAG_variable                                                       *
 *||
|           ! No name                                                          |
||          DW_AT_abstract_origin(reference to OUTER.AI.1.3$)                  *
 *||
|           DW_AT_location(...)                                                |
||       !                                                                     *
 *||
||       ! No DW_TAG_subprogram (abstract instance) for INNER                  *
 *||
|        !                                                                     |
||       ! Concrete instance for call INNER(OUTER_LOCAL)                       *
 *||
|        !                                                                     |
|INNER.CI.1.1$:|                                                               *
 *||
||       DW_TAG_inlined_subroutine                                             *
 *||
|           ! No name                                                          |
||          DW_AT_abstract_origin(reference to INNER.AI.1.1$)                  *
 *||
|           DW_AT_low_pc(...)                                                  |
||          DW_AT_high_pc(...)                                                 *
 *||
|           DW_AT_static_link(...)                                             |
|INNER.CI.1.2$:|                                                               *
 *||
||          DW_TAG_formal_parameter                                            *
 *||
|               ! No name                                                      |
||              DW_AT_abstract_origin(reference to INNER.AI.1.2$)              *
 *||
|               DW_AT_location(...)                                            |
|INNER.CI.1.3$:|                                                               *
 *||
||          DW_TAG_variable                                                    *
 *||
|               ! No name                                                      |
||              DW_AT_abstract_origin(reference to INNER.AI.1.3$)              *
 *||
|               DW_AT_location(...)                                            |
||          ...                                                                *
 *||
||          0                                                                  *
 *||
|        ! Another concrete instance of INNER within OUTER                     |
||       ! for the call "INNER(31)"                                            *
 *||
|        ...                                                                   |
||_______0____________________________________________________________________ *
 *||

              Figure D.47: Inlining example #1: concrete instance



July 15 2024               ***WORKING DRAFT***                       Page 352
                             Appendix D. Examples (Informative)



 1      A resulting concrete inlined instance of OUTER is shown in Figure D.49 *
 *on

 2      page 356.


 3      Notice in Figure D.49 that OUTER is expanded as a concrete inlined inst*
 *ance, and

 4      that INNER is nested within it as a concrete out-of-line subprogram. Be*
 *cause

 5      INNER is cloned for each inline expansion of OUTER, only the invariant *
 *attributes

 6      of INNER (for example, DW.AT.name) are specioed in the abstract instanc*
 *e of

 7      OUTER, and the low-level, instance-specioc attributes of INNER (for exa*
 *mple,

 8      DW.AT.low.pc) are specioed in each concrete instance of OUTER.


 9      The several calls of INNER within OUTER are compiled as normal calls to*
 * the

10      instance of INNER that is specioc to the same instance of OUTER that co*
 *ntains the

11      calls.



12      D.7.3    Alternative #3: inline OUTER, one normal INNER


13      In the third approach, one normal subprogram for INNER is compiled whic*
 *h is

14      called from all concrete inlined instances of OUTER. The abstract insta*
 *nce for

15      OUTER is shown in Figure D.50 on page 357.


16      The most distinctive aspect of that Figure is that subprogram INNER exi*
 *sts only

17      within the abstract instance of OUTER, and not in OUTER's concrete inst*
 *ance. In the

18      abstract instance of OUTER, the description of INNER has the full compl*
 *ement of

19      attributes that would be expected for a normal subprogram. While attrib*
 *utes

20      such as DW.AT.low.pc, DW.AT.high.pc, DW.AT.location, and so on,

21      typically are omitted from an abstract instance because they are not in*
 *variant

22      across instances of the containing abstract instance, in this case thos*
 *e same

23      attributes are included precisely because they are invariant ~ there is*
 * only one

24      subprogram INNER to be described and every description is the same.


25      A concrete inlined instance of OUTER is illustrated in Figure D.51 on p*
 *age 358.


26      Notice in Figure D.51 that there is no DWARF representation for INNER a*
 *t all; the

27      representation of INNER does not vary across instances of OUTER and the*
 * abstract

28      instance of OUTER includes the complete description of INNER, so that t*
 *he

29      description of INNER may be (and for reasons of space eOEciency, should*
 * be)

30      omitted from each concrete instance of OUTER.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 353
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |                    Appendix D. Examples (Informative)                 *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |    ! Abstract instance for OUTER                                      *
 *       |
       ||   ! abstract instance                                                *
 *       ||
       |OUTER.AI.2.1$:|                                                        *
 *       ||
       |    DW_TAG_subprogram                                                  *
 *       |
       ||       DW_AT_name("OUTER")                                            *
 *       ||
       |        DW_AT_inline(DW_INL_declared_inlined)                          *
 *       |
       ||       ! No low/high PCs                                              *
 *       ||
       |OUTER.AI.2.2$:|                                                        *
 *       ||
       |        DW_TAG_formal_parameter                                        *
 *       |
       ||          DW_AT_name("OUTER_FORMAL")                                  *
 *       ||
       |           DW_AT_type(reference to integer)                            *
 *       |
       ||          ! No location                                               *
 *       ||
       |OUTER.AI.2.3$:|                                                        *
 *       ||
       |        DW_TAG_variable                                                *
 *       |
       ||          DW_AT_name("OUTER_LOCAL")                                   *
 *       ||
       |           DW_AT_type(reference to integer)                            *
 *       |
       ||          ! No location                                               *
 *       ||
       ||       !                                                              *
 *       ||
       |        ! Nested out-of-line INNER subprogram                          *
 *       |
       ||       !                                                              *
 *       ||
       |OUTER.AI.2.4$:                                                         *
 *       |
       ||       DW_TAG_subprogram                                              *
 *       ||
       |           DW_AT_name("INNER")                                         *
 *       |
       ||          ! No DW_AT_inline                                           *
 *       ||
       ||          ! No low/high PCs, frame_base, etc.                         *
 *       ||
       |OUTER.AI.2.5$:                                                         *
 *       |
       ||          DW_TAG_formal_parameter                                     *
 *       ||
       |               DW_AT_name("INNER_FORMAL")                              *
 *       |
       ||              DW_AT_type(reference to integer)                        *
 *       ||
       ||              ! No location                                           *
 *       ||
       |OUTER.AI.2.6$:                                                         *
 *       |
       ||          DW_TAG_variable                                             *
 *       ||
       |               DW_AT_name("INNER_LOCAL")                               *
 *       |
       ||              DW_AT_type(reference to integer)                        *
 *       ||
       ||              ! No location                                           *
 *       ||
       |           ...                                                         *
 *       |
       ||          0                                                           *
 *       ||
       |        ...                                                            *
 *       |
       ||_______0______________________________________________________________*
 *______ ||

                      Figure D.48: Inlining example #2: abstract instance



1      There is one aspect of this approach that is problematical from the DWARF

2      perspective. The single compiled instance of INNER is assumed to access *
 *up-level

3      variables of OUTER; however, those variables may well occur at varying p*
 *ositions

4      within the frames that contain the concrete inlined instances. A compile*
 *r might

5      implement this in several ways, including the use of additional



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 354
                             Appendix D. Examples (Informative)



 1      compiler-generated parameters that provide reference parameters for the

 2      up-level variables, or a compiler-generated static link like parameter *
 *that points

 3      to the group of up-level entities, among other possibilities. In either*
 * of these

 4      cases, the DWARF description for the location attribute of each uplevel*
 * variable

 5      needs to be dioeerent if accessed from within INNER compared to when ac*
 *cessed

 6      from within the instances of OUTER. An implementation is likely to requ*
 *ire

 7      producer-specioc DWARF attributes and/or debugging information entries *
 *to

 8      describe such cases.


 9      Note that in C++, a member function of a class deoned within a function

10      deonition does not require any producer-specioc extensions because the *
 *C++

11      language disallows access to entities that would give rise to this prob*
 *lem.

12      (Neither extern variables nor static members require any form of static*
 * link for

13      accessing purposes.)



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 355
|                    Appendix D. Examples (Informative)                        |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |

______________________________________________________________________________|*
 *|||

||   ! Concrete instance for call "OUTER(7)"                                   *
 *||
||   !                                                                         *
 *||
|OUTER.CI.2.1$:                                                                |
||   DW_TAG_inlined_subroutine                                                 *
 *||
|        ! No name                                                             |
||       DW_AT_abstract_origin(reference to OUTER.AI.2.1$)                     *
 *||
||       DW_AT_low_pc(...)                                                     *
 *||
|        DW_AT_high_pc(...)                                                    |
|OUTER.CI.2.2$:|                                                               *
 *||
|        DW_TAG_formal_parameter                                               |
||          ! No name                                                          *
 *||
||          DW_AT_abstract_origin(reference to OUTER.AI.2.2$)                  *
 *||
|           DW_AT_location(...)                                                |
|OUTER.CI.2.3$:|                                                               *
 *||
|        DW_TAG_variable                                                       |
||          ! No name                                                          *
 *||
||          DW_AT_abstract_origin(reference to OUTER.AI.2.3$)                  *
 *||
|           DW_AT_location(...)                                                |
||       !                                                                     *
 *||
|        ! Nested out-of-line INNER subprogram                                 |
||       !                                                                     *
 *||
|OUTER.CI.2.4$:|                                                               *
 *||
|        DW_TAG_subprogram                                                     |
||          ! No name                                                          *
 *||
|           DW_AT_abstract_origin(reference to OUTER.AI.2.4$)                  |
||          DW_AT_low_pc(...)                                                  *
 *||
|           DW_AT_high_pc(...)                                                 |
||          DW_AT_frame_base(...)                                              *
 *||
||          DW_AT_static_link(...)                                             *
 *||
|OUTER.CI.2.5$:                                                                |
||          DW_TAG_formal_parameter                                            *
 *||
|               ! No name                                                      |
||              DW_AT_abstract_origin(reference to OUTER.AI.2.5$)              *
 *||
||              DW_AT_location(...)                                            *
 *||
|OUTER.CI.2.6$:                                                                |
||          DW_TAG_variable                                                    *
 *||
|               ! No name                                                      |
||              DW_AT_abstract_origin(reference to OUTER.AT.2.6$)              *
 *||
||              DW_AT_location(...)                                            *
 *||
|           ...                                                                |
||          0                                                                  *
 *||
|        ...                                                                   |
||_______0____________________________________________________________________ *
 *||

              Figure D.49: Inlining example #2: concrete instance



July 15 2024               ***WORKING DRAFT***                       Page 356
                     Appendix D. Examples (Informative)


|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |

______________________________________________________________________________|*
 *|||
|    ! Abstract instance for OUTER                                             |
||   !                                                                         *
 *||
|OUTER.AI.3.1$:                                                                |
||   DW_TAG_subprogram                                                         *
 *||
||       DW_AT_name("OUTER")                                                   *
 *||
|        DW_AT_inline(DW_INL_declared_inlined)                                 |
||       ! No low/high PCs                                                     *
 *||
|OUTER.AI.3.2$:                                                                |
||       DW_TAG_formal_parameter                                               *
 *||
||          DW_AT_name("OUTER_FORMAL")                                         *
 *||
|           DW_AT_type(reference to integer)                                   |
||          ! No location                                                      *
 *||
|OUTER.AI.3.3$:                                                                |
||       DW_TAG_variable                                                       *
 *||
||          DW_AT_name("OUTER_LOCAL")                                          *
 *||
|           DW_AT_type(reference to integer)                                   |
||          ! No location                                                      *
 *||
|        !                                                                     |
||       ! Normal INNER                                                        *
 *||
||       !                                                                     *
 *||
|OUTER.AI.3.4$:                                                                |
||       DW_TAG_subprogram                                                     *
 *||
|           DW_AT_name("INNER")                                                |
||          DW_AT_low_pc(...)                                                  *
 *||
|           DW_AT_high_pc(...)                                                 |
||          DW_AT_frame_base(...)                                              *
 *||
||          DW_AT_static_link(...)                                             *
 *||
|OUTER.AI.3.5$:                                                                |
||          DW_TAG_formal_parameter                                            *
 *||
|               DW_AT_name("INNER_FORMAL")                                     |
||              DW_AT_type(reference to integer)                               *
 *||
||              DW_AT_location(...)                                            *
 *||
|OUTER.AI.3.6$:                                                                |
||          DW_TAG_variable                                                    *
 *||
|               DW_AT_name("INNER_LOCAL")                                      |
||              DW_AT_type(reference to integer)                               *
 *||
||              DW_AT_location(...)                                            *
 *||
|           ...                                                                |
||          0                                                                  *
 *||
|        ...                                                                   |
||_______0____________________________________________________________________ *
 *||

               Figure D.50: Inlining example #3: abstract instance



July 15 2024               ***WORKING DRAFT***                       Page 357
       |                    Appendix D. Examples (Informative)                 *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||
       |    ! Concrete instance for call "OUTER(7)"                            *
 *       |
       ||   !                                                                  *
 *       ||
       |OUTER.CI.3.1$:|                                                        *
 *       ||
       |    DW_TAG_inlined_subroutine                                          *
 *       |
       ||       ! No name                                                      *
 *       ||
       |        DW_AT_abstract_origin(reference to OUTER.AI.3.1$)              *
 *       |
       ||       DW_AT_low_pc(...)                                              *
 *       ||
       |        DW_AT_high_pc(...)                                             *
 *       |
       ||       DW_AT_frame_base(...)                                          *
 *       ||
       |OUTER.CI.3.2$:|                                                        *
 *       ||
       |        DW_TAG_formal_parameter                                        *
 *       |
       ||          ! No name                                                   *
 *       ||
       |           DW_AT_abstract_origin(reference to OUTER.AI.3.2$)           *
 *       |
       ||          ! No type                                                   *
 *       ||
       ||          DW_AT_location(...)                                         *
 *       ||
       |OUTER.CI.3.3$:                                                         *
 *       |
       ||       DW_TAG_variable                                                *
 *       ||
       |           ! No name                                                   *
 *       |
       ||          DW_AT_abstract_origin(reference to OUTER.AI.3.3$)           *
 *       ||
       ||          ! No type                                                   *
 *       ||
       |           DW_AT_location(...)                                         *
 *       |
       ||       ! No DW_TAG_subprogram for "INNER"                             *
 *       ||
       |        ...                                                            *
 *       |
       ||_______0______________________________________________________________*
 *______ ||

                     Figure D.51: Inlining example #3: concrete instance



1      D.8     Constant Expression Example


2      C++ generalizes the notion of constant expressions to include constant e*
 *xpression

3      user-deoned literals and functions. The constant declarations in Figure *
 *D.52 can

4      be represented as illustrated in Figure D.53 on the following page.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||constexprdoublemass=9.8;
      |||======================================================================*
 *====|||constexprintsquare(intx){returnx*x;}
      |||======================================================================*
 *====|||floatarr[square(9)];//square()calledandinlined_|___|


                       Figure D.52: Constant expressions: C++ source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 358
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________||
||       ! For variable mass                                                   *
 *||
|        !                                                                     |
|1$:|    DW_TAG_const_type                                                     *
 *||
|           DW_AT_type(reference to "double")                                  |
|2$:|    DW_TAG_variable                                                       *
 *||
||          DW_AT_name("mass")                                                 *
 *||
|           DW_AT_type(reference to 1$)                                        |
||          DW_AT_const_expr(true)                                             *
 *||
|           DW_AT_const_value(9.8)                                             |
||       ! Abstract instance for square                                        *
 *||
||       !                                                                     *
 *||
|10$:    DW_TAG_subprogram                                                     |
||          DW_AT_name("square")                                               *
 *||
|           DW_AT_type(reference to "int")                                     |
||          DW_AT_inline(DW_INL_inlined)                                       *
 *||
|11$:        DW_TAG_formal_parameter                                           |
||              DW_AT_name("x")                                                *
 *||
||              DW_AT_type(reference to "int")                                 *
 *||
|        ! Concrete instance for square(9)                                     |
||       !                                                                     *
 *||
|20$:    DW_TAG_inlined_subroutine                                             |
||          DW_AT_abstract_origin(reference to 10$)                            *
 *||
||          DW_AT_const_expr(present)                                          *
 *||
|           DW_AT_const_value(81)                                              |
||          DW_TAG_formal_parameter                                            *
 *||
|               DW_AT_abstract_origin(reference to 11$)                        |
||              DW_AT_const_value(9)                                           *
 *||
||       ! Anonymous array type for arr                                        *
 *||
|        !                                                                     |
|30$:|   DW_TAG_array_type                                                     *
 *||
|           DW_AT_type(reference to "float")                                   |
||          DW_AT_byte_size(324) ! 81*4                                        *
 *||
|           DW_TAG_subrange_type                                               |
||              DW_AT_type(reference to "int")                                 *
 *||
||              DW_AT_upper_bound(reference to 20$)                            *
 *||
|        ! Variable arr                                                        |
||       !                                                                     *
 *||
|40$:    DW_TAG_variable                                                       |
||          DW_AT_name("arr")                                                  *
 *||
||__________DW_AT_type(reference_to_30$)______________________________________ *
 *||


            Figure D.53: Constant expressions: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 359
                            Appendix D. Examples (Informative)



1      D.9     Unicode Character Example


2      The Unicode character encodings in Figure D.54 can be described in DWARF*
 * as

3      illustrated in Figure D.55.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||//C++source
      |||======================================================================*
 *====|||//
      |||======================================================================*
 *====|||char16_tchr_a=u'h';
      |||======================================================================*
 *====|||char32_tchr_b=U'h';_|___|


                       Figure D.54: Unicode character example: source
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||||

       |!|DWARF description                                                    *
 *       ||
       |!                                                                      *
 *       |
       |1$:|DW_TAG_base_type                                                   *
 *       ||
       ||       DW_AT_name("char16_t")                                         *
 *       ||
       |        DW_AT_encoding(DW_ATE_UTF)                                     *
 *       |
       ||       DW_AT_byte_size(2)                                             *
 *       ||
       |2$: DW_TAG_base_type                                                   *
 *       |
       ||       DW_AT_name("char32_t")                                         *
 *       ||
       |        DW_AT_encoding(DW_ATE_UTF)                                     *
 *       |
       ||       DW_AT_byte_size(4)                                             *
 *       ||
       |3$:|DW_TAG_variable                                                    *
 *       ||
       |        DW_AT_name("chr_a")                                            *
 *       |
       ||       DW_AT_type(reference to 1$)                                    *
 *       ||
       |4$: DW_TAG_variable                                                    *
 *       |
       ||       DW_AT_name("chr_b")                                            *
 *       ||
       ||_______DW_AT_type(reference_to_2$)____________________________________*
 *______ ||


                Figure D.55: Unicode character example: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 360
                            Appendix D. Examples (Informative)



1      D.10      Type-Safe Enumeration Example


2      The C++ type-safe enumerations in Figure D.56 can be described in DWARF *
 *as

3      illustrated in Figure D.57.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||//C++source
      |||======================================================================*
 *====|||//
      |||======================================================================*
 *====|||enumclassE{E1,E2=100};
      |||======================================================================*
 *====|||Ee1;_|___|


                     Figure D.56: Type-safe enumeration example: source


       ________________________________________________________________________*
 *______||||
       |! DWARF description                                                    *
 *       |
       |!|                                                                     *
 *       ||
       |11$:| DW_TAG_enumeration_type                                          *
 *       ||
       |          DW_AT_name("E")                                              *
 *       |
       ||         DW_AT_type(reference to "int")                               *
 *       ||
       |          DW_AT_enum_class(present)                                    *
 *       |
       |12$:|     DW_TAG_enumerator                                            *
 *       ||
       |             DW_AT_name("E1")                                          *
 *       |
       ||            DW_AT_const_value(0)                                      *
 *       ||
       |13$:|     DW_TAG_enumerator                                            *
 *       ||
       |             DW_AT_name("E2")                                          *
 *       |
       ||            DW_AT_const_value(100)                                    *
 *       ||
       |14$:  DW_TAG_variable                                                  *
 *       |
       ||         DW_AT_name("e1")                                             *
 *       ||
       ||_________DW_AT_type(reference_to_11$)_________________________________*
 *______ ||


              Figure D.57: Type-safe enumeration example: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 361
                            Appendix D. Examples (Informative)



1      D.11      Template Examples


2      The C++ template example in Figure D.58 can be described in DWARF as

3      illustrated in Figure D.59.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||//C++source
      |||======================================================================*
 *====|||//
      |||======================================================================*
 *====|||template<classT>
      |||======================================================================*
 *====|||structwrapper{
      |||======================================================================*
 *====|||Tcomp;
      |||======================================================================*
 *====|||};
      |||======================================================================*
 *====|||wrapper<int>obj;_|___|


                        Figure D.58: C++ template example #1: source

       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |!|DWARF description                                                    *
 *       ||
       |!                                                                      *
 *       |
       |11$:| DW_TAG_structure_type                                            *
 *       ||
       |          DW_AT_name("wrapper")                                        *
 *       |
       |12$:|     DW_TAG_template_type_parameter                               *
 *       ||
       |             DW_AT_name("T")                                           *
 *       |
       ||            DW_AT_type(reference to "int")                            *
 *       ||
       |13$:|     DW_TAG_member                                                *
 *       ||
       |             DW_AT_name("comp")                                        *
 *       |
       ||            DW_AT_type(reference to 12$)                              *
 *       ||
       |14$:  DW_TAG_variable                                                  *
 *       |
       ||         DW_AT_name("obj")                                            *
 *       ||
       ||_________DW_AT_type(reference_to_11$)_________________________________*
 *______ ||


                 Figure D.59: C++ template example #1: DWARF description



4      The actual type of the component comp is int, but in the DWARF the type

5      references the DW.TAG.template.type.parameter for T, which in turn

6      references int. This implies that in the original template comp was of t*
 *ype T and

7      that was replaced with int in the instance.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 362
                            Appendix D. Examples (Informative)



1      There exist situations where it is not possible for the DWARF to imply a*
 *nything

2      about the nature of the original template. Consider the C++ template sou*
 *rce in

3      Figure D.60 and the DWARF that can describe it in Figure D.61.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||//C++source
      |||======================================================================*
 *====|||//
      |||======================================================================*
 *====|||template<classT>
      |||======================================================================*
 *====|||structwrapper{
      |||======================================================================*
 *====|||Tcomp;
      |||======================================================================*
 *====|||};
      |||======================================================================*
 *====|||template<classU>
      |||======================================================================*
 *====|||voidconsume(wrapper<U>formal)
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||...
      |||======================================================================*
 *====|||}
      |||======================================================================*
 *====|||wrapper<int>obj;
      |||======================================================================*
 *====|||consume(obj);_|___|


                        Figure D.60: C++ template example #2: source
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |!|DWARF description                                                    *
 *       ||
       |!                                                                      *
 *       |
       |11$:| DW_TAG_structure_type                                            *
 *       ||
       ||         DW_AT_name("wrapper")                                        *
 *       ||
       |12$:      DW_TAG_template_type_parameter                               *
 *       |
       ||            DW_AT_name("T")                                           *
 *       ||
       |             DW_AT_type(reference to "int")                            *
 *       |
       |13$:|     DW_TAG_member                                                *
 *       ||
       ||            DW_AT_name("comp")                                        *
 *       ||
       |             DW_AT_type(reference to 12$)                              *
 *       |
       |14$:| DW_TAG_variable                                                  *
 *       ||
       |          DW_AT_name("obj")                                            *
 *       |
       ||         DW_AT_type(reference to 11$)                                 *
 *       ||
       |21$:  DW_TAG_subprogram                                                *
 *       |
       ||         DW_AT_name("consume")                                        *
 *       ||
       |22$:|     DW_TAG_template_type_parameter                               *
 *       ||
       |             DW_AT_name("U")                                           *
 *       |
       ||            DW_AT_type(reference to "int")                            *
 *       ||
       |23$:      DW_TAG_formal_parameter                                      *
 *       |
       ||            DW_AT_name("formal")                                      *
 *       ||
       ||____________DW_AT_type(reference_to_11$)______________________________*
 *______ ||


                 Figure D.61: C++ template example #2: DWARF description



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 363
                             Appendix D. Examples (Informative)



 1      In the DW.TAG.subprogram entry for the instance of consume, U is descri*
 *bed as

 2      int. The type of formal is wrapper<U> in the source. DWARF only represe*
 *nts

 3      instantiations of templates; there is no entry which represents wrapper*
 *<U> which

 4      is neither a template parameter nor a template instantiation. The type *
 *of formal is

 5      described as wrapper<int>, the instantiation of wrapper<U>, in the DW.A*
 *T.type

 6      attribute at 23$. There is no description of the relationship between t*
 *emplate type

 7      parameter T at 12$ and U at 22$ which was used to instantiate wrapper<U*
 *>.


 8      A consequence of this is that the DWARF information would not distingui*
 *sh

 9      between the existing example and one where the formal parameter of cons*
 *ume

10      were declared in the source to be wrapper<int>.



11      D.12      Template Alias Examples


12      The C++ template alias shown in Figure D.62 can be described in DWARF as

13      illustrated in Figure D.63 on the following page.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||//C++source,templatealiasexample1
       |||=====================================================================*
 *=====|||//
       |||=====================================================================*
 *=====|||template<typenameT,typenameU>
       |||=====================================================================*
 *=====|||structAlpha{
       |||=====================================================================*
 *=====|||Ttango;
       |||=====================================================================*
 *=====|||Uuniform;
       |||=====================================================================*
 *=====|||};
       |||=====================================================================*
 *=====|||template<typenameV>usingBeta=Alpha<V,V>;
       |||=====================================================================*
 *=====|||Beta<long>b;_|___|


                      Figure D.62: C++ template alias example #1: source



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 364
       |                    Appendix D. Examples (Informative)                 *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |! DWARF representation for variable 'b'                                *
 *       |
       |!|                                                                     *
 *       ||
       |20$:| DW_TAG_structure_type                                            *
 *       ||
       |          DW_AT_name("Alpha")                                          *
 *       |
       |21$:|     DW_TAG_template_type_parameter                               *
 *       ||
       |             DW_AT_name("T")                                           *
 *       |
       ||            DW_AT_type(reference to "long")                           *
 *       ||
       |22$:|     DW_TAG_template_type_parameter                               *
 *       ||
       |             DW_AT_name("U")                                           *
 *       |
       ||            DW_AT_type(reference to "long")                           *
 *       ||
       |23$:      DW_TAG_member                                                *
 *       |
       ||            DW_AT_name("tango")                                       *
 *       ||
       ||            DW_AT_type(reference to 21$)                              *
 *       ||
       |24$:      DW_TAG_member                                                *
 *       |
       ||            DW_AT_name("uniform")                                     *
 *       ||
       |             DW_AT_type(reference to 22$)                              *
 *       |
       |25$:| DW_TAG_template_alias                                            *
 *       ||
       |          DW_AT_name("Beta")                                           *
 *       |
       ||         DW_AT_type(reference to 20$)                                 *
 *       ||
       |26$:|     DW_TAG_template_type_parameter                               *
 *       ||
       |             DW_AT_name("V")                                           *
 *       |
       ||            DW_AT_type(reference to "long")                           *
 *       ||
       |27$:  DW_TAG_variable                                                  *
 *       |
       ||         DW_AT_name("b")                                              *
 *       ||
       ||_________DW_AT_type(reference_to_25$)_________________________________*
 *______ ||


               Figure D.63: C++ template alias example #1: DWARF description



1      Similarly, the C++ template alias shown in Figure D.64 can be described *
 *in

2      DWARF as illustrated in Figure D.65 on the following page.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||//C++source,templatealiasexample2
      |||======================================================================*
 *====|||//
      |||======================================================================*
 *====|||template<classTX>structX{};
      |||======================================================================*
 *====|||template<classTY>structY{};
      |||======================================================================*
 *====|||template<classT>usingZ=Y<T>;
      |||======================================================================*
 *====|||X<Y<int>>y;
      |||======================================================================*
 *====|||X<Z<int>>z;_|___|


                     Figure D.64: C++ template alias example #2: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 365
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________||
|!|DWARF representation for X<Y<int>>                                          *
 *||
|!                                                                             |
|30$:| DW_TAG_structure_type                                                   *
 *||
|          DW_AT_name("Y")                                                     |
|31$:|     DW_TAG_template_type_parameter                                      *
 *||
||            DW_AT_name("TY")                                                 *
 *||
|             DW_AT_type(reference to "int")                                   |
|32$:| DW_TAG_structure_type                                                   *
 *||
|          DW_AT_name("X")                                                     |
|33$:|     DW_TAG_template_type_parameter                                      *
 *||
|             DW_AT_name("TX")                                                 |
||            DW_AT_type(reference to 30$)                                     *
 *||
|!|                                                                            *
 *||
|! DWARF representation for X<Z<int>>                                          |
|!|                                                                            *
 *||
|40$:  DW_TAG_template_alias                                                   |
||         DW_AT_name("Z")                                                     *
 *||
||         DW_AT_type(reference to 30$)                                        *
 *||
|41$:      DW_TAG_template_type_parameter                                      |
||            DW_AT_name("T")                                                  *
 *||
|             DW_AT_type(reference to "int")                                   |
|42$:| DW_TAG_structure_type                                                   *
 *||
||         DW_AT_name("X")                                                     *
 *||
|43$:      DW_TAG_template_type_parameter                                      |
||            DW_AT_name("TX")                                                 *
 *||
|             DW_AT_type(reference to 40$)                                     |
|!|                                                                            *
 *||
|! Note that 32$ and 42$ are actually the same type                            |
|!|                                                                            *
 *||
|50$:| DW_TAG_variable                                                         *
 *||
|          DW_AT_name("y")                                                     |
||         DW_AT_type(reference to $32)                                        *
 *||
|51$:  DW_TAG_variable                                                         |
||         DW_AT_name("z")                                                     *
 *||
||_________DW_AT_type(reference_to_$42)_______________________________________ *
 *||


        Figure D.65: C++ template alias example #2: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 366
                             Appendix D. Examples (Informative)



 1      D.13      Implicit Pointer Examples


 2      If the compiler determines that the value of an object is constant (eit*
 *her

 3      throughout the program, or within a specioc range), the compiler may ch*
 *oose to

 4      materialize that constant only when used, rather than store it in memor*
 *y or in a

 5      register. The DW.OP.implicit.value operation can be used to describe su*
 *ch a

 6      value. Sometimes, the value may not be constant, but still can be easily

 7      rematerialized when needed. A DWARF expression terminating in

 8      DW.OP.stack.value can be used for this case. The compiler may also elim*
 *inate

 9      a pointer value where the target of the pointer resides in memory, and *
 *the

10      DW.OP.stack.value operator may be used to rematerialize that pointer va*
 *lue.

11      In other cases, the compiler will eliminate a pointer to an object that*
 * itself needs

12      to be materialized. Since the location of such an object cannot be repr*
 *esented as a

13      memory address, a DWARF expression cannot give either the location or t*
 *he

14      actual value or a pointer variable that would refer to that object. The

15      DW.OP.implicit.pointer operation can be used to describe the pointer, a*
 *nd the

16      debugging information entry to which its orst operand refers describes *
 *the value

17      of the dereferenced object. A DWARF consumer will not be able to show t*
 *he

18      location or the value of the pointer variable, but it will be able to s*
 *how the value

19      of the dereferenced pointer.


20      Consider the C source shown in Figure D.66. Assume that the function fo*
 *o is not

21      inlined, that the argument x is passed in register 5, and that the func*
 *tion foo is

22      optimized by the compiler into just an increment of the volatile variab*
 *le v. Given

23      these assumptions a possible DWARF description is shown in Figure D.67 *
 *on the

24      following page.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||structS{shorta;charb,c;};
       |||=====================================================================*
 *=====|||volatileintv;
       |||=====================================================================*
 *=====|||voidfoo(intx)
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||structSs={x,x+2,x+3};
       |||=====================================================================*
 *=====|||char*p=&s.b;
       |||=====================================================================*
 *=====|||s.a++;
       |||=====================================================================*
 *=====|||v++;
       |||=====================================================================*
 *=====|||}
       |||=====================================================================*
 *=====|||intmain()
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||foo(v+1);
       |||=====================================================================*
 *=====|||return0;
       |||=====================================================================*
 *=====|||}_|___|


                       Figure D.66: C implicit pointer example #1: source



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 367
       |                                                                       *
 *       |
       ||                   Appendix D. Examples (Informative)                 *
 *       ||

       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |1$:|  DW_TAG_structure_type                                            *
 *       ||
       |          DW_AT_name("S")                                              *
 *       |
       ||         DW_AT_byte_size(4)                                           *
 *       ||
       |10$:|     DW_TAG_member                                                *
 *       ||
       |             DW_AT_name("a")                                           *
 *       |
       ||            DW_AT_type(reference to "short int")                      *
 *       ||
       |             DW_AT_data_member_location(constant 0)                    *
 *       |
       |11$:|     DW_TAG_member                                                *
 *       ||
       |             DW_AT_name("b")                                           *
 *       |
       ||            DW_AT_type(reference to "char")                           *
 *       ||
       ||            DW_AT_data_member_location(constant 2)                    *
 *       ||
       |12$:      DW_TAG_member                                                *
 *       |
       ||            DW_AT_name("c")                                           *
 *       ||
       |             DW_AT_type(reference to "char")                           *
 *       |
       ||            DW_AT_data_member_location(constant 3)                    *
 *       ||
       |2$:|  DW_TAG_subprogram                                                *
 *       ||
       |          DW_AT_name("foo")                                            *
 *       |
       |20$:|     DW_TAG_formal_parameter                                      *
 *       ||
       |             DW_AT_name("x")                                           *
 *       |
       ||            DW_AT_type(reference to "int")                            *
 *       ||
       ||            DW_AT_location(DW_OP_reg5)                                *
 *       ||
       |21$:      DW_TAG_variable                                              *
 *       |
       ||            DW_AT_name("s")                                           *
 *       ||
       |             DW_AT_type(reference to S at 1$)                          *
 *       |
       ||            DW_AT_location(expression=                                *
 *       ||
       |                 DW_OP_breg5(1) DW_OP_stack_value DW_OP_piece(2)       *
 *       |
       ||                DW_OP_breg5(2) DW_OP_stack_value DW_OP_piece(1)       *
 *       ||
       ||                DW_OP_breg5(3) DW_OP_stack_value DW_OP_piece(1))      *
 *       ||
       |22$:      DW_TAG_variable                                              *
 *       |
       ||            DW_AT_name("p")                                           *
 *       ||
       |             DW_AT_type(reference to "char *")                         *
 *       |
       ||            DW_AT_location(expression=                                *
 *       ||
       ||________________DW_OP_implicit_pointer(reference_to_21$,_2))__________*
 *______ ||


               Figure D.67: C implicit pointer example #1: DWARF description



1      In Figure D.67, even though variables s and p are both optimized away

2      completely, this DWARF description still allows a debugger to print the *
 *value of

3      the variable s, namely (2, 3, 4). Similarly, because the variable s does*
 * not live

4      in memory, there is nothing to print for the value of p, but the debugge*
 *r should

5      still be able to show that p[0] is 3, p[1] is 4, p[-1] is 0 and p[-2] is*
 * 2.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 368
                             Appendix D. Examples (Informative)



 1      As a further example, consider the C source shown in Figure D.68. Make *
 *the

 2      following assumptions about how the code is compiled:


 3        #  The function foo is inlined into function main


 4        #  The body of the main function is optimized to just three blocks of

 5           instructions which each increment the volatile variable v, followe*
 *d by a

 6           block of instructions to return 0 from the function


 7        #  Label label0 is at the start of the main function, label1 follows *
 *the orst v++

 8           block, label2 follows the second v++ block and label3 is at the en*
 *d of the

 9           main function


10        #  Variable b is optimized away completely, as it isn't used


11        #  The string literal "opq" is optimized away as well


12      Given these assumptions a possible DWARF description is shown in Figure*
 * D.69

13      on|the|next page.                                                      *
 *        ||

        _______________________________________________________________________*
 *_______||||

        |static|const char *b = "opq";                                         *
 *        ||
        |volatile|int v;                                                       *
 *        ||
        |static inline void foo (int *p)                                       *
 *        |
        |{|                                                                    *
 *        ||
        |    (*p)++;                                                           *
 *        |
        ||   v++;                                                              *
 *        ||
        |    p++;                                                              *
 *        |
        ||   (*p)++;                                                           *
 *        ||
        ||   v++;                                                              *
 *        ||
        |}                                                                     *
 *        |
        |                                                                      *
 *        |
        |                                                                      *
 *        |
        |int main ()                                                           *
 *        |
        |{|                                                                    *
 *        ||
        |label0:|                                                              *
 *        ||
        |    int a[2] =  1, 2 ;                                                *
 *        |
        ||   v++;                                                              *
 *        ||
        |label1:                                                               *
 *        |
        ||   foo (a);                                                          *
 *        ||
        |label2:|                                                              *
 *        ||
        |    return a[0] + a[1] - 5;                                           *
 *        |
        |label3:|                                                              *
 *        ||
        |}                                                                     *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |

                       Figure D.68: C implicit pointer example #2: source



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 369
                     Appendix D. Examples (Informative)

|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________||
|1$:|  DW_TAG_variable                                                         *
 *||
|          DW_AT_name("b")                                                     |
||         DW_AT_type(reference to "const char *")                             *
 *||
|          DW_AT_location(expression=                                          |
||            DW_OP_implicit_pointer(reference to 2$, 0))                      *
 *||
|2$:|  DW_TAG_dwarf_procedure                                                  *
 *||
|          DW_AT_location(expression=                                          |
||            DW_OP_implicit_value(4, {'o', 'p', 'q', '\0'}))                  *
 *||
|3$:   DW_TAG_subprogram                                                       |
||         DW_AT_name("foo")                                                   *
 *||
|          DW_AT_inline(DW_INL_declared_inlined)                               |
|30$:|     DW_TAG_formal_parameter                                             *
 *||
||            DW_AT_name("p")                                                  *
 *||
|             DW_AT_type(reference to "int *")                                 |
|4$:|  DW_TAG_subprogram                                                       *
 *||
|          DW_AT_name("main")                                                  |
|40$:|     DW_TAG_variable                                                     *
 *||
||            DW_AT_name("a")                                                  *
 *||
|             DW_AT_type(reference to "int[2]")                                |
||            DW_AT_location(location list 98$)                                *
 *||
|41$:      DW_TAG_inlined_subroutine                                           |
||            DW_AT_abstract_origin(reference to 3$)                           *
 *||
|42$:|         DW_TAG_formal_parameter                                         *
 *||
|                 DW_AT_abstract_origin(reference to 30$)                      |
||                DW_AT_location(location list 99$)                            *
 *||
|                                                                              |
|!|.debug_loclists section                                                     *
 *||
|98$:| DW_LLE_start_end[<label0 in main> .. <label1 in main>)                  *
 *||
|          DW_OP_lit1 DW_OP_stack_value DW_OP_piece(4)                         |
||         DW_OP_lit2 DW_OP_stack_value DW_OP_piece(4)                         *
 *||
|      DW_LLE_start_end[<label1 in main> .. <label2 in main>)                  |
||         DW_OP_lit2 DW_OP_stack_value DW_OP_piece(4)                         *
 *||
|          DW_OP_lit2 DW_OP_stack_value DW_OP_piece(4)                         |
||     DW_LLE_start_end[<label2 in main> .. <label3 in main>)                  *
 *||
||         DW_OP_lit2 DW_OP_stack_value DW_OP_piece(4)                         *
 *||
|          DW_OP_lit3 DW_OP_stack_value DW_OP_piece(4)                         |
||     DW_LLE_end_of_list                                                      *
 *||
|99$:  DW_LLE_start_end[<label1 in main> .. <label2 in main>)                  |
||         DW_OP_implicit_pointer(reference to 40$, 0)                         *
 *||
||     DW_LLE_start_end[<label2 in main> .. <label3 in main>)                  *
 *||
|          DW_OP_implicit_pointer(reference to 40$, 4)                         |
||_____DW_LLE_end_of_list_____________________________________________________ *
 *||


        Figure D.69: C implicit pointer example #2: DWARF description



July 15 2024               ***WORKING DRAFT***                       Page 370
                            Appendix D. Examples (Informative)



1      D.14      String Type Examples


2      Consider the Fortran 2003 string type example source in Figure D.70 foll*
 *owing.

3      The DWARF representation in Figure D.71 on the following page is appropr*
 *iate.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||programcharacter_kind
      |||======================================================================*
 *====|||useiso_fortran_env
      |||======================================================================*
 *====|||implicitnone
      |||======================================================================*
 *====|||integer,parameter::ascii=
      |||======================================================================*
 *====|||selected_char_kind("ascii")
      |||======================================================================*
 *====|||integer,parameter::ucs4=
      |||======================================================================*
 *====|||selected_char_kind('ISO_10646')
      |||======================================================================*
 *====|||character(kind=ascii,len=26)::alphabet
      |||======================================================================*
 *====|||character(kind=ucs4,len=30)::hello_world
      |||======================================================================*
 *====|||character(len=*),parameter::all_digits="0123456789"
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||alphabet=ascii_"abcdefghijklmnopqrstuvwxyz"
      |||======================================================================*
 *====|||hello_world=ucs4_'HelloWorldandNiHao--'&
      |||======================================================================*
 *====|||//char(int(z'4F60'),ucs4)&
      |||======================================================================*
 *====|||//char(int(z'597D'),ucs4)
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||write(*a,*)lphabet
      |||======================================================================*
 *====|||write(*a,*)ll_digits
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||open(output_unit,encoding='UTF-8')
      |||======================================================================*
 *====|||write(*t,*)rim(hello_world)
      |||======================================================================*
 *====|||endprogramcharacter_kind_|___|


                          Figure D.70: String type example: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 371
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||

|1$:|DW_TAG_base_type                                                          *
 *||
||       DW_AT_encoding (DW_ATE_ASCII)                                         *
 *||
|                                                                              |
|2$:|DW_TAG_base_type                                                          *
 *||
|        DW_AT_encoding (DW_ATE_UCS)                                           |
||       DW_AT_byte_size (4)                                                   *
 *||
|                                                                              |
|3$:|DW_TAG_string_type                                                        *
 *||
||       DW_AT_byte_size (10)                                                  *
 *||
|                                                                              |
|4$:|DW_TAG_const_type                                                         *
 *||
||       DW_AT_type (reference to 3$)                                          *
 *||

|                                                                              |
|5$:|DW_TAG_string_type                                                        *
 *||
|        DW_AT_type (1$)                                                       |
||       DW_AT_string_length ( ... )                                           *
 *||
|        DW_AT_string_length_byte_size ( ... )                                 |
||       DW_AT_data_location ( ... )                                           *
 *||
|                                                                              |
|6$:|DW_TAG_string_type                                                        *
 *||
||       DW_AT_type (2$)                                                       *
 *||
|        DW_AT_string_length ( ... )                                           |
||       DW_AT_string_length_byte_size ( ... )                                 *
 *||
||       DW_AT_data_location ( ... )                                           *
 *||

|                                                                              |
|7$:|DW_TAG_variable                                                           *
 *||
|        DW_AT_name (alphabet)                                                 |
||       DW_AT_type (5$)                                                       *
 *||
||       DW_AT_location ( ... )                                                *
 *||

|                                                                              |
|8$:|DW_TAG_constant                                                           *
 *||
|        DW_AT_name (all_digits)                                               |
||       DW_AT_type (4$)                                                       *
 *||
|        DW_AT_const_value ( ... )                                             |
|                                                                              |
|                                                                              |
|9$:|DW_TAG_variable                                                           *
 *||
|        DW_AT_name (hello_world)                                              |
||       DW_AT_type (6$)                                                       *
 *||
|        DW_AT_location ( ... )                                                |
|                                                                              |
|_____________________________________________________________________________ |

           Figure D.71: String type example: DWARF representation



July 15 2024               ***WORKING DRAFT***                       Page 372
                             Appendix D. Examples (Informative)



 1      D.15      Call Site Examples


 2      The following examples use a hypothetical machine which:


 3        #  Passes the orst argument in register 0, the second in register 1, *
 *and the third

 4           in register 2.


 5        #  Keeps the stack pointer is register 3.


 6        #  Has one call preserved register 4.


 7        #  Returns a function value in register 0.



 8      D.15.1    Call Site Example #1 (C)


 9      Consider the C source in Figure D.72 following.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||externvoidfn1(longint,longint,longint);
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||longint
       |||=====================================================================*
 *=====|||fn2(longinta,longintb,longintc)
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||longintq=2*a;
       |||=====================================================================*
 *=====|||fn1(5,6,7);
       |||=====================================================================*
 *=====|||return0;
       |||=====================================================================*
 *=====|||}
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||longint
       |||=====================================================================*
 *=====|||fn3(longintx,longint(*fn4)(longint*))
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||longintv,w,w2,z;
       |||=====================================================================*
 *=====|||w=(*fn4)(&w2);
       |||=====================================================================*
 *=====|||v=(*fn4)(&w2);
       |||=====================================================================*
 *=====|||z=fn2(1,v+1,w);
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||intv1=v+4;
       |||=====================================================================*
 *=====|||z+=fn2(w,v*2,x);
       |||=====================================================================*
 *=====|||}
       |||=====================================================================*
 *=====|||returnz;
       |||=====================================================================*
 *=====|||}_|___|


                           Figure D.72: Call Site Example #1: Source



10      Possible generated code for this source is shown using a suggestive pse*
 *udo-

11      assembly notation in Figure D.73 on the next page.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 373
                      Appendix D. Examples (Informative)



______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|fn2:
|||==========================================================================||*
 *|L1:
|||==========================================================================||*
 *|%reg2=7!Loadthe3rdargumenttofn1
|||==========================================================================||*
 *|%reg1=6!Loadthe2ndargumenttofn1
|||==========================================================================||*
 *|%reg0=5!Loadthe1stargumenttofn1
|||==========================================================================||*
 *|L2:
|||==========================================================================||*
 *|callfn1
|||==========================================================================||*
 *|%reg0=0!Loadthereturnvaluefromthefunction
|||==========================================================================||*
 *|return
|||==========================================================================||*
 *|L3:
|||==========================================================================||*
 *|fn3:
|||==========================================================================||*
 *|!Decreasestackpointertoreservelocalstackframe
|||==========================================================================||*
 *|%reg3=%reg3-32
|||==========================================================================||*
 *|[%reg3]=%reg4!Savethecallpreservedregisterto
|||==========================================================================||*
 *|!stack
|||==========================================================================||*
 *|[%reg3+8]=%reg0!Preservethexargumentvalue
|||==========================================================================||*
 *|[%reg3+16]=%reg1!Preservethefn4argumentvalue
|||==========================================================================||*
 *|%reg0=%reg3+24!Loadaddressofw2asargument
|||==========================================================================||*
 *|call%reg1!Callfn4(indirectcall)
|||==========================================================================||*
 *|L6:
|||==========================================================================||*
 *|%reg2=[%reg3+16]!Loadthefn4argumentvalue
|||==========================================================================||*
 *|[%reg3+16]=%reg0!Savetheresultofthefirstcall(w)
|||==========================================================================||*
 *|%reg0=%reg3+24!Loadaddressofw2asargument
|||==========================================================================||*
 *|call%reg2!Callfn4(indirectcall)
|||==========================================================================||*
 *|L7:
|||==========================================================================||*
 *|%reg4=%reg0!Savetheresultofthesecondcall(v)
|||==========================================================================||*
 *|!intoregister.
|||==========================================================================||*
 *|%reg2=[%reg3+16]!Load3rdargumenttofn2(w)
|||==========================================================================||*
 *|%reg1=%reg4+1!Compute2ndargumenttofn2(v+1)
|||==========================================================================||*
 *|%reg0=1!Load1stargumenttofn2
|||==========================================================================||*
 *|callfn2
|||==========================================================================||*
 *|L4:
|||==========================================================================||*
 *|%reg2=[%reg3+8]!Loadthe3rdargumenttofn2(x)
|||==========================================================================||*
 *|[%reg3+8]=%reg0!Savetheresultofthe3rdcall(z)
|||==========================================================================||*
 *|%reg0=[%reg3+16]!Loadthe1stargumenttofn2(w)
|||==========================================================================||*
 *|%reg1=%reg4+%reg4!Computethe2ndargumenttofn2(v*2)
|||==========================================================================||*
 *|callfn2
|||==========================================================================||*
 *|L5:
|||==========================================================================||*
 *|%reg2=[%reg3+8]!Loadthevalueofzfromthestack
|||==========================================================================||*
 *|%reg0=%reg0+%reg2!Addresultfromthe4thcalltoit
|||==========================================================================||*
 *|L8:
|||==========================================================================||*
 *|%reg4=[%reg3]!Restoreoriginalvalueofcallpreserved
|||==========================================================================||*
 *|!register
|||==========================================================================||*
 *|%reg3=%reg3+32!Leavestackframe
|||==========================================================================||*
 *|return_|___|


                     Figure D.73: Call Site Example #1: Code



 July 15 2024               ***WORKING DRAFT***                       Page 374
                             Appendix D. Examples (Informative)



 1      The location list for variable a in function fn2 might look like the fo*
 *llowing

 2      (where the notation iRange [m ..  n)j specioes the range of addresses f*
 *rom m

 3      through but not including n over which the following location descripti*
 *on

 4      applies):
        _______________________________________________________________________*
 *_______||||

        |   ! Before the assignment to register 0, the argument a is live in re*
 *gister 0|
        ||  !                                                                  *
 *        ||
        ||  Range [L1 .. L2)                                                   *
 *        ||
        |       DW_OP_reg0                                                     *
 *        |
        |                                                                      *
 *        |
        |                                                                      *
 *        |
        |   ! Afterwards, it is not. The value can perhaps be looked up in the *
 *caller  |
        ||  !                                                                  *
 *        ||
        ||  Range [L2 .. L3)                                                   *
 *        ||
        |       DW_OP_entry_value (1, DW_OP_reg0)                              *
 *        |
        ||      DW_OP_stack_value                                              *
 *        ||
        |   End-of-list                                                        *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |



 5      Similarly,|the|variable q in fn2 then might have this location list:   *
 *        ||
        _______________________________________________________________________*
 *_______||
        |                                                                      *
 *        |
        |   ! Before the assignment to register 0, the value of q can be comput*
 *ed as   |
        ||  ! two times the contents of register 0                             *
 *        ||
        |   !                                                                  *
 *        |
        ||  Range [L1 .. L2)                                                   *
 *        ||
        ||      DW_OP_lit2                                                     *
 *        ||
        |       DW_OP_breg0 0                                                  *
 *        |
        ||      DW_OP_mul                                                      *
 *        ||
        ||      DW_OP_stack_value                                              *
 *        ||

        |                                                                      *
 *        |
        ||  ! Afterwards. it is not. It can be computed from the original value*
 * of     ||
        |   ! the first parameter, multiplied by two                           *
 *        |
        ||  !                                                                  *
 *        ||
        |   Range [L2 .. L3)                                                   *
 *        |
        ||      DW_OP_lit2                                                     *
 *        ||
        ||      DW_OP_entry_value (1, DW_OP_reg0)                              *
 *        ||
        |       DW_OP_mul                                                      *
 *        |
        ||      DW_OP_stack_value                                              *
 *        ||
        |   End-of-list                                                        *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |



 6      Variables b and c each have a location list similar to that for variabl*
 *e a, except for

 7      a dioeerent label between the two ranges and they use DW.OP.reg1 and

 8      DW.OP.reg2, respectively, instead of DW.OP.reg0.


 9      The call sites for all the calls in function fn3 are children of the

10      DW.TAG.subprogram entry for fn3 (or of its DW.TAG.lexical.block entry if



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 375
                            Appendix D. Examples (Informative)


       |                                                                       *
 *       |
1      there|is|any for the whole function). This is shown in Figure D.74.     *
 *       ||
       |                                                                       *
 *       |
       ______________________________________________________________________pa*
 *rt_1_of_2||||
       |    DW_TAG_call_site                                                   *
 *       |
       ||       DW_AT_call_return_pc(L6) ! First indirect call to (*fn4) in fn3*
 *.      ||
       ||       ! The address of the call is preserved across the call in memor*
 *y at   ||
       |        ! stack pointer + 16 bytes.                                    *
 *       |
       ||       DW_AT_call_target(DW_OP_breg3 16 DW_OP_deref)                  *
 *       ||
       |        DW_TAG_call_site_parameter                                     *
 *       |
       ||          DW_AT_location(DW_OP_reg0)                                  *
 *       ||
       ||          ! Value of the first parameter is equal to stack pointer + 2*
 *4 bytes.||
       |           DW_AT_call_value(DW_OP_breg3 24)                            *
 *       |
       ||   DW_TAG_call_site                                                   *
 *       ||
       |        DW_AT_call_return_pc(L7) ! Second indirect call to (*fn4) in fn*
 *3.     |
       ||       ! The address of the call is not preserved across the call anyw*
 *here, but||
       |        ! could be perhaps looked up in fn3's caller.                  *
 *       |
       ||       DW_AT_call_target(DW_OP_entry_value (1, DW_OP_reg1))           *
 *       ||
       ||       DW_TAG_call_site_parameter                                     *
 *       ||
       |           DW_AT_location(DW_OP_reg0)                                  *
 *       |
       ||          DW_AT_call_value(DW_OP_breg3 24)                            *
 *       ||
       |    DW_TAG_call_site                                                   *
 *       |
       ||       DW_AT_call_return_pc(L4) ! 3rd call in fn3, direct call to fn2 *
 *       ||
       ||       DW_AT_call_origin(reference to fn2 DW_TAG_subprogram)          *
 *       ||
       |        DW_TAG_call_site_parameter                                     *
 *       |
       ||          DW_AT_call_parameter(reference to formal parameter a in subp*
 *rogram fn2)||
       |           DW_AT_location(DW_OP_reg0)                                  *
 *       |
       ||          ! First parameter to fn2 is constant 1                      *
 *       ||
       ||          DW_AT_call_value(DW_OP_lit1)                                *
 *       ||
       |        DW_TAG_call_site_parameter                                     *
 *       |
       ||          DW_AT_call_parameter(reference to formal parameter b in subp*
 *rogram fn2)||
       |           DW_AT_location(DW_OP_reg1)                                  *
 *       |
       ||          ! Second parameter to fn2 can be computed as the value of th*
 *e call ||
       |           !   preserved register 4 in the fn3 function plus one       *
 *       |
       ||          DW_AT_call_value(DW_OP_breg4 1)                             *
 *       ||
       ||       DW_TAG_call_site_parameter                                     *
 *       ||
       |           DW_AT_call_parameter(reference to formal parameter c in subp*
 *rogram fn2)|
       ||          DW_AT_location(DW_OP_reg2)                                  *
 *       ||
       |           ! Third parameter's value is preserved in memory at fn3's st*
 *ack pointer|
       ||          !   plus 16 bytes                                           *
 *       ||
       ||__________DW_AT_call_value(DW_OP_breg3_16_DW_OP_deref)________________*
 *______ ||


                     Figure D.74: Call site example #1: DWARF encoding



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 376
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||
|DW_TAG_lexical_block|                                                         *
 *||
||   DW_AT_low_pc(L4)                                                          *
 *||
|    DW_AT_high_pc(L8)                                                         |
||   DW_TAG_variable                                                           *
 *||
|        DW_AT_name("v1")                                                      |
||       DW_AT_type(reference to int)                                          *
 *||
||       ! Value of the v1 variable can be computed as value of register 4 plus*
 *|4|
|        DW_AT_location(DW_OP_breg4 4 DW_OP_stack_value)                       |
||   DW_TAG_call_site                                                          *
 *||
|        DW_AT_call_return_pc(L5) ! 4th call in fn3, direct call to fn2        |
||       DW_AT_call_target(reference to subprogram fn2)                        *
 *||
||       DW_TAG_call_site_parameter                                            *
 *||
|           DW_AT_call_parameter(reference to formal parameter a in subprogram *
 *fn2)|
||          DW_AT_location(DW_OP_reg0)                                         *
 *||
|           ! Value of the 1st argument is preserved in memory at fn3's stack  |
||          !   pointer + 16 bytes.                                            *
 *||
||          DW_AT_call_value(DW_OP_breg3 16 DW_OP_deref)                       *
 *||
|        DW_TAG_call_site_parameter                                            |
||          DW_AT_call_parameter(reference to formal parameter b in subprogram *
 *fn2)||
|           DW_AT_location(DW_OP_reg1)                                         |
||          ! Value of the 2nd argument can be computed using the preserved    *
 *||
|           !   register 4 multiplied by 2                                     |
||          DW_AT_call_value(DW_OP_lit2 DW_OP_reg4 0 DW_OP_mul)                *
 *||
||       DW_TAG_call_site_parameter                                            *
 *||
|           DW_AT_call_parameter(reference to formal parameter c in subprogram *
 *fn2)|
||          DW_AT_location(DW_OP_reg2)                                         *
 *||
|           ! Value of the 3rd argument is not preserved, but could be perhaps |
||          ! computed from the value passed fn3's caller.                     *
 *||
||__________DW_AT_call_value(DW_OP_entry_value_(1,_DW_OP_reg0))_______________ *
 *||


         Figure D.74 Call site example #1: DWARF encoding (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 377
                            Appendix D. Examples (Informative)



1      D.15.2    Call Site Example #2 (Fortran)


2      Consider the Fortran source in Figure D.75 which is used to illustrate h*
 *ow

3      Fortran's ipass by referencej parameters can be handled.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||subroutinefn4(n)
      |||======================================================================*
 *====|||integer::n,x
      |||======================================================================*
 *====|||x=n
      |||======================================================================*
 *====|||n=n/2
      |||======================================================================*
 *====|||callfn6
      |||======================================================================*
 *====|||endsubroutine
      |||======================================================================*
 *====|||subroutinefn5(n)
      |||======================================================================*
 *====|||interfacefn4
      |||======================================================================*
 *====|||subroutinefn4(n)
      |||======================================================================*
 *====|||integer::n
      |||======================================================================*
 *====|||endsubroutine
      |||======================================================================*
 *====|||endinterfacefn4
      |||======================================================================*
 *====|||integer::n,x
      |||======================================================================*
 *====|||callfn4(n)
      |||======================================================================*
 *====|||x=5
      |||======================================================================*
 *====|||callfn4(x)
      |||======================================================================*
 *====|||endsubroutinefn5_|___|


                          Figure D.75: Call site example #2: source



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 378
                            Appendix D. Examples (Informative)



1      Possible generated code for this source is shown using a suggestive pseu*
 *do-

2      assembly notation in Figure D.76.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||fn4:
      |||======================================================================*
 *====|||%reg2=[%reg0]!Loadvalueofn(passedbyreference)
      |||======================================================================*
 *====|||%reg2=%reg2/2!Divideby2
      |||======================================================================*
 *====|||[%reg0]=%reg2!Updatevalueofn
      |||======================================================================*
 *====|||callfn6!Callsomeotherfunction
      |||======================================================================*
 *====|||return
      |||======================================================================*
 *====|||
      |||======================================================================*
 *====|||fn5:
      |||======================================================================*
 *====|||%reg3=%reg3-8!Decreasestackpointertocreatestackframe
      |||======================================================================*
 *====|||callfn4!Callfn4withthesameargumentbyreference
      |||======================================================================*
 *====|||!asfn5hasbeencalledwith
      |||======================================================================*
 *====|||L9:
      |||======================================================================*
 *====|||[%reg3]=5!Passvalueof5byreferencetofn4
      |||======================================================================*
 *====|||%reg0=%reg3!Putaddressofthevalue5onthestack
      |||======================================================================*
 *====|||!into1stargumentregister
      |||======================================================================*
 *====|||callfn4
      |||======================================================================*
 *====|||L10:
      |||======================================================================*
 *====|||%reg3=%reg3+8!Leavestackframe
      |||======================================================================*
 *====|||return_|___|


                           Figure D.76: Call site example #2: code



3      The location description for variable x in function fn4 might be:

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||DW_OP_entry_value4DW_OP_breg00DW_OP_deref_size4
      |||======================================================================*
 *====|||DW_OP_stack_value_|___|



4      The call sites in (just) function fn5 might be as shown in Figure D.77 o*
 *n the next

5      page.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 379
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||

|DW_TAG_call_site|                                                             *
 *||
||   DW_AT_call_return_pc(L9)                      ! First call to fn4         *
 *||
|    DW_AT_call_origin(reference to subprogram fn4)                            |
||   DW_TAG_call_site_parameter                                                *
 *||
|        DW_AT_call_parameter(reference to formal parameter n in subprogram fn4*
 *)|
||       DW_AT_location(DW_OP_reg0)                                            *
 *||
||       ! The value of register 0 at the time of the call can be perhaps      *
 *||
|        !   looked up in fn5's caller                                         |
||       DW_AT_call_value(DW_OP_entry_value (1, DW_OP_reg0))                   *
 *||
|        ! DW_AT_call_data_location(DW_OP_push_object_address) ! left out, impl*
 *icit|
||       ! And the actual value of the parameter can be also perhaps looked up *
 *in||
|        ! fn5's caller                                                        |
||       DW_AT_call_data_value(                                                *
 *||
||          DW_OP_entry_value (4, DW_OP_breg0 0 DW_OP_deref_size 4))           *
 *||
|                                                                              |
|DW_TAG_call_site|                                                             *
 *||
|    DW_AT_call_return_pc(L10)                     ! Second call to fn4        |
||   DW_AT_call_origin(reference to subprogram fn4)                            *
 *||
||   DW_TAG_call_site_parameter                                                *
 *||
|        DW_AT_call_parameter(reference to formal parameter n in subprogram fn4*
 *)|
||       DW_AT_location(DW_OP_reg0)                                            *
 *||
|        ! The value of register 0 at the time of the call is equal to the stac*
 *k|
||       ! pointer value in fn5                                                *
 *||
||       DW_AT_call_value(DW_OP_breg3 0)                                       *
 *||
|        ! DW_AT_call_data_location(DW_OP_push_object_address) ! left out, impl*
 *icit|
||       ! And the value passed by reference is constant 5                     *
 *||
|        DW_AT_call_data_value(DW_OP_lit5)                                     |
|                                                                              |
|_____________________________________________________________________________ |

              Figure D.77: Call site example #2: DWARF encoding



July 15 2024               ***WORKING DRAFT***                       Page 380
                             Appendix D. Examples (Informative)



 1      D.16      Macro Example


 2      Consider the C source in Figure D.78 following which is used to illustr*
 *ate the

 3      DWARF encoding of macro information (see Section 6.3 on page 171).


        File a.c
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||#include"a.h"
       |||=====================================================================*
 *=====|||#defineFUNCTION_LIKE_MACRO(x)4+x
       |||=====================================================================*
 *=====|||#include"b.h"_|___|



        File a.h
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||#defineLONGER_MACRO1
       |||=====================================================================*
 *=====|||#defineB2
       |||=====================================================================*
 *=====|||#include"b.h"
       |||=====================================================================*
 *=====|||#defineB3_|___|



        File b.h
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||#undefB
       |||=====================================================================*
 *=====|||#defineD3
       |||=====================================================================*
 *=====|||#defineFUNCTION_LIKE_MACRO(x)4+x_|___|


                             Figure D.78: Macro example: source



 4      Two possible encodings are shown. The orst, in Figure D.79 on the next *
 *page, is

 5      perhaps the simplest possible encoding. It includes all macro informati*
 *on from

 6      the main source ole (a.c) as well as its two included oles (a.h and b.h*
 *) in a single

 7      macro unit. Further, all strings are included as immediate operands of *
 *the macro

 8      operators (that is, there is no string pooling). The size of the macro *
 *unit is 160

 9      bytes.


10      The second encoding, in Figure D.80 on page 383, saves space in two way*
 *s:


11      1.  Longer strings are pooled by storing them in the .debug_str section*
 * where

12          they can be referenced more than once.


13      2.  Macro information entries contained in included oles are represente*
 *d as

14          separate macro units which are then imported for each #include dire*
 *ctive.


15      The combined size of the three macro units and their referenced strings*
 * is 129

16      bytes.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 381
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||

|! *** Section .debug_macro contents                                           |
|!|Macro unit for "a.c"                                                        *
 *||
|0$h:|   Version:        5                                                     *
 *||
|        Flags:          2                                                     |
||          offset_size_flag: 0          ! 4-byte offsets                      *
 *||
|           debug_line_offset_flag: 1     ! Line number offset present         |
||          opcode_operands_table_flag: 0 ! No extensions                      *
 *||
||       Offset in .debug_line section: 0  ! Line number offset                *
 *||
|0$m:    DW_MACRO_start_file, 0, 0     ! Implicit Line: 0, File: 0 "a.c"       |
||       DW_MACRO_start_file, 1, 1     ! #include Line: 1, File: 1 "a.h"       *
 *||
|        DW_MACRO_define, 1, "LONGER_MACRO 1"                                  |
||                                  ! #define Line: 1, String: "LONGER_MACRO 1"*
 *||
||       DW_MACRO_define, 2, "B 2"     ! #define Line: 2, String: "B 2"        *
 *||
|        DW_MACRO_start_file, 3, 2     ! #include Line: 3, File: 2 "b.h"       |
||       DW_MACRO_undef, 1, "B"        ! #undef Line: 1, String: "b"           *
 *||
|        DW_MACRO_define 2, "D 3"      ! #define Line: 2, String: "D 3"        |
||       DW_MACRO_define, 3, "FUNCTION_LIKE_MACRO(x) 4+x"                      *
 *||
|                                   ! #define Line: 3,                         |
||                                  !   String: "FUNCTION_LIKE_MACRO(x) 4+x"   *
 *||
||       DW_MACRO_end_file            ! End "b.h" -> back to "a.h"             *
 *||
|        DW_MACRO_define, 4, "B 3"     ! #define Line: 4, String: "B 3"        |
||       DW_MACRO_end_file            ! End "a.h" -> back to "a.c"             *
 *||
|        DW_MACRO_define, 2, "FUNCTION_LIKE_MACRO(x) 4+x"                      |
||                                  ! #define Line: 2,                         *
 *||
||                                  !   String: "FUNCTION_LIKE_MACRO(x) 4+x"   *
 *||
|        DW_MACRO_start_file, 3, 2     ! #include Line: 3, File: 2 "b.h"       |
||       DW_MACRO_undef, 1, "B"        ! #undef Line: 1, String: "b"           *
 *||
|        DW_MACRO_define, 2, "D 3"     ! #define Line: 2, String: "D 3"        |
||       DW_MACRO_define, 3, "FUNCTION_LIKE_MACRO(x) 4+x"                      *
 *||
||                                  ! #define Line: 3,                         *
 *||
|                                   !   String: "FUNCTION_LIKE_MACRO(x) 4+x"   |
||       DW_MACRO_end_file            ! End "b.h" -> back to "a.c"             *
 *||
|        DW_MACRO_end_file            ! End "a.c" -> back to ""                |
||_______0___________________________!_End_macro_unit_________________________ *
 *||

            Figure D.79: Macro example: simple DWARF encoding



July 15 2024               ***WORKING DRAFT***                       Page 382
|                                                                              |
||                   Appendix D. Examples (Informative)                        *
 *||
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|! *** Section .debug_macro contents                                           |
|!|Macro unit for "a.c"                                                        *
 *||
|0$h:    Version:        5                                                     |
||       Flags:          2                                                     *
 *||
|           offset_size_flag: 0          ! 4-byte offsets                      |
||          debug_line_offset_flag: 1     ! Line number offset present         *
 *||
||          opcode_operands_table_flag: 0 ! No extensions                      *
 *||
|        Offset in .debug_line section: 0  ! Line number offset                |
|0$m:|   DW_MACRO_start_file, 0, 0     ! Implicit Line: 0, File: 0 "a.c"       *
 *||
|        DW_MACRO_start_file, 1, 1     ! #include Line: 1, File: 1 "a.h"       |
||       DW_MACRO_import, i$1h         ! Import unit at i$1h (lines 1-2)       *
 *||
||       DW_MACRO_start_file, 3, 2     ! #include Line: 3, File: 2 "b.h"       *
 *||
|        DW_MACRO_import, i$2h         ! Import unit i$2h (lines all)          |
||       DW_MACRO_end_file            ! End "b.h" -> back to "a.h"             *
 *||
|        DW_MACRO_define, 4, "B 3"     ! #define Line: 4, String: "B 3"        |
||       DW_MACRO_end_file            ! End "a.h" -> back to "a.c"             *
 *||
||       DW_MACRO_define, 2, s$1       ! #define Line: 3,                      *
 *||
|                                   !   String: "FUNCTION_LIKE_MACRO(x) 4+x"   |
||       DW_MACRO_start_file, 3, 2     ! #include Line: 3, File: 2 "b.h"       *
 *||
|        DW_MACRO_import, i$2h         ! Import unit i$2h (lines all)          |
||       DW_MACRO_end_file            ! End "b.h" -> back to "a.c"             *
 *||
|        DW_MACRO_end_file            ! End "a.c" -> back to ""                |
||       0                           ! End macro unit                          *
 *||
|!|Macro unit for "a.h" lines 1-2                                              *
 *||
|i$1h:   Version:        5                                                     |
||       Flags:          0                                                     *
 *||
|           offset_size_flag: 0          ! 4-byte offsets                      |
||          debug_line_offset_flag: 0     ! No line number offset              *
 *||
||          opcode_operands_table_flag: 0 ! No extensions                      *
 *||
|i$1m:   DW_MACRO_define_strp, 1, s$2  ! #define Line: 1, String: "LONGER_MACRO*
 *|1"
||       DW_MACRO_define, 2, "B 2"     ! #define Line: 2, String: "B 2"        *
 *||
|        0                           ! End macro unit                          |
|!|Macro unit for "b.h"                                                        *
 *||
|i$2h:|  Version:        5                                                     *
 *||
|        Flags:          0                                                     |
||          offset_size_flag: 0          ! 4-byte offsets                      *
 *||
|           debug_line_offset_flag: 0     ! No line number offset              |
||          opcode_operands_table_flag: 0 ! No extensions                      *
 *||
|i$2m:   DW_MACRO_undef, 1, "B"        ! #undef Line: 1, String: "B"           |
||       DW_MACRO_define, 2, "D 3"     ! #define Line: 2, String: "D 3"        *
 *||
||       DW_MACRO_define_strp, 3, s$1  ! #define Line: 3,                      *
 *||
|                                   !   String: "FUNCTION_LIKE_MACRO(x) 4+x"   |
||       0                           ! End macro unit                          *
 *||
|! *** Section .debug_str contents                                             |
|s$1:|   String: "FUNCTION_LIKE_MACRO(x) 4+x"                                  *
 *||
|s$2:|___String:_"LONGER_MACRO_1"_____________________________________________ *
 *||


            Figure D.80: Macro example: sharable DWARF encoding



July 15 2024               ***WORKING DRAFT***                       Page 383
                             Appendix D. Examples (Informative)



 1      A number of observations are worth mentioning:


 2        #  Strings that are the same size as a reference or less are better r*
 *epresented as

 3           immediate operands. Strings longer than twice the size of a refere*
 *nce are

 4           better stored in the string table if there are at least two refere*
 *nces.


 5        #  There is a trade-ooe between the size of the macro information of *
 *a ole and

 6           the number of times it is included when evaluating whether to crea*
 *te a

 7           separate macro unit. However, the amount of overhead (the size of *
 *a macro

 8           header) needed to represent a unit as well as the size of the oper*
 *ation to

 9           import a macro unit are both small.


10        #  A macro unit need not describe all of the macro information in a o*
 *le. For

11           example, in Figure D.80 the second macro unit (beginning at i$1h) *
 *includes

12           macros from just the orst two lines of ole a.h.


13        #  An implementation may be able to share macro units across object o*
 *les (not

14           shown in this example). To support this, it may be advantageous to*
 * create

15           macro units in cases where they do not ooeer an advantage in a sin*
 *gle

16           compilation of itself.


17        #  The header of a macro unit that contains a DW.MACRO.start.ole

18           operation must include a reference to the compilation line number *
 *header

19           to allow interpretation of the ole number operands in those comman*
 *ds.

20           However, the presence of those ooesets complicates or may preclude*
 * sharing

21           across compilations.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 384
                             Appendix D. Examples (Informative)



 1      D.17      Parameter Default Value Examples


 2      The default expressions for parameters x and y in the C++ function decl*
 *aration in

 3      Figure D.81 can be described in DWARF as illustrated in Figure D.82.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||voidg(intx=13;
       |||=====================================================================*
 *=====|||inty=f());_|___|


                      Figure D.81: Default value example #1: C++ source


        _______________________________________________________________________*
 *_______||||

        ||   DW_TAG_subprogram                                                 *
 *        ||
        ||       DW_AT_name ("g")                                              *
 *        ||

        |                                                                      *
 *        |
        ||       DW_TAG_formal_parameter                                       *
 *        ||
        |          DW_AT_name ("x")                                            *
 *        |
        ||         DW_AT_type (reference to type "int")                        *
 *        ||
        |          DW_AT_default_value@DW_FORM_sdata (13)                      *
 *        |
        |                                                                      *
 *        |
        |                                                                      *
 *        |
        ||       DW_TAG_formal_parameter                                       *
 *        ||
        |          DW_AT_name ("y")                                            *
 *        |
        ||         DW_AT_type (reference to type "int")                        *
 *        ||
        |          DW_AT_default_value@DW_FORM_string ("f()")                  *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |

                   Figure D.82: Default value example #1: DWARF encoding



 4      In Figure D.82, note the following:


 5        1. This ogure explicitly shows the form used by certain attributes (i*
 *ndicated

 6           by a trailing @DW.FORM.xxx) when it is critical, while the form is*
 * left

 7           implicit in most other examples.


 8        2. The string value for y is three characters in length and does not *
 *include any

 9           quotes. (The quotes are an artifact of the presumed dumper tool th*
 *at

10           created this interpretation.)


11        3. The default value for x could also be encoded as

12           DW_AT_default_value@DW_FORM_string("13"); however, this is general*
 *ly a

13           less convenient form and less eOEcient for consumers to process. a*
 * less

14           convenient form and less eOEcient for consumers to process.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 385
                            Appendix D. Examples (Informative)



1      A string form in DW.AT.default.value always represents a source code

2      fragment, even in languages that have a native string type. For example,*
 * the

3      default string parameter of the Ada function in Figure D.83 is encoded in

4      DWARF as a string containing the Ada string literal, including the source

5      quotation marks, as shown in Figure D.84.

      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||procedures(x:string:="abc";
      |||======================================================================*
 *====|||y:string:="abcd"+10)is
      |||======================================================================*
 *====|||begin
      |||======================================================================*
 *====|||ends;_|___|


                     Figure D.83: Default value example #2: Ada source


       ________________________________________________________________________*
 *______||||

       ||   DW_TAG_subprogram                                                  *
 *       ||
       ||      DW_AT_name ("s")                                                *
 *       ||

       |                                                                       *
 *       |
       ||      DW_TAG_formal_parameter                                         *
 *       ||
       |          DW_AT_name ("x")                                             *
 *       |
       ||         DW_AT_type (reference to type "string")                      *
 *       ||
       |          DW_AT_default_value@DW_FORM_data4 (0x61626364)    ! Big-endia*
 *n      |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ||      DW_TAG_formal_parameter                                         *
 *       ||
       |          DW_AT_name ("y")                                             *
 *       |
       ||         DW_AT_type (reference to type "string")                      *
 *       ||
       |          DW_AT_default_value@DW_FORM_string (""abcd"+10 ")            *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

                  Figure D.84: Default value example #2: DWARF encoding



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 386
                             Appendix D. Examples (Informative)



 1      D.18      SIMD Lane Example


 2      The following example uses a hypothetical machine with 64-bit scalar re*
 *gisters

 3      r0, r1, ..., and 256-bit vector registers v0, v1, ... that supports SIM*
 *D instructions

 4      with dioeerent SIMD widths. Scalar arguments are passed in scalar regis*
 *ters

 5      starting with r0 for the orst argument.


 6      Consider the source code in Figure D.85, which is implicitly widened by*
 * a

 7      vectorization factor of 8 to match the 256-bit vector registers of the *
 *target

 8      machine, resulting in the pseudo-code in Figure D.86 on the next page.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||voidvec_add(intdst[],intsrc[],intlen){
       |||=====================================================================*
 *=====|||#pragmaompsimd
       |||=====================================================================*
 *=====|||for(inti=0;i<len;++i)
       |||=====================================================================*
 *=====|||dst[i]+=src[i];
       |||=====================================================================*
 *=====|||}_|___|


                     Figure D.85: SIMD Lane Example: C OpenMP Source



 9      The machine code contains two instances of the source loop: one instanc*
 *e with

10      SIMD width 8 beginning at .l1, and one scalar instance beginning at .l2*
 * to handle

11      any remaining elements.


12      This function may be described in DWARF as shown in Figure D.87 on page*
 * 389.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 387
                      Appendix D. Examples (Informative)



______________________________________________________________________________|*
 *___|
|||==========================================================================|||
|||==========================================================================||*
 *|.l0:
|||==========================================================================||*
 *|move.64br3,0;i=0
|||==========================================================================||*
 *|.l1:;implicitly8-widevectorizedloopbody
|||==========================================================================||*
 *|add.64br4,r3,8;inext=i+8
|||==========================================================================||*
 *|cmp.64br4,r2;compareinexttolen
|||==========================================================================||*
 *|jmp.ge.l2;jumpto.l2ifinext>=len
|||==========================================================================||*
 *|load.256bv0,[r0+4*r3];v0[n]=dst[i+n]for
|||==========================================================================||*
 *|;nin[0..7]
|||==========================================================================||*
 *|.l1.1:
|||==========================================================================||*
 *|load.256bv1,[r1+4*r3];v1[n]=src[i+n]for
|||==========================================================================||*
 *|;nin[0..7]
|||==========================================================================||*
 *|.l1.2:;add8elements
|||==========================================================================||*
 *|add.simd-8v0,v0,v1;v0[n]=v0[n]+v1[n]for
|||==========================================================================||*
 *|;nin[0..7]
|||==========================================================================||*
 *|store.256b[r0+4*r3],v0;dst[i+n]=v0[n]for
|||==========================================================================||*
 *|;nin[0..7]
|||==========================================================================||*
 *|.l1.3:
|||==========================================================================||*
 *|mov.64br3,r4;i=inext
|||==========================================================================||*
 *|jmp.l1;loopbackformore
|||==========================================================================||*
 *|.l2:;scalarloopbody
|||==========================================================================||*
 *|add.64br4,r3,1;inext=i+1
|||==========================================================================||*
 *|cmp.64br4,r2;compareinexttolen
|||==========================================================================||*
 *|jmp.ge.l3;jumpto.l3ifinext>=len
|||==========================================================================||*
 *|load.32br5,[r0+4*r3];r5=dst[i]
|||==========================================================================||*
 *|.l2.1:
|||==========================================================================||*
 *|load.32br6,[r1+4*r3];r6=src[i]
|||==========================================================================||*
 *|.l2.2:;addasingleelement
|||==========================================================================||*
 *|add.32br5,r5,r6;r5=r5+r6
|||==========================================================================||*
 *|store.32b[r0+4*r3],r5;dst[i]=r5
|||==========================================================================||*
 *|.l2.3:
|||==========================================================================||*
 *|mov.64br3,r4;i=inext
|||==========================================================================||*
 *|jmp.l2;loopbackformore
|||==========================================================================||*
 *|.l3:
|||==========================================================================||*
 *|return_|___|


            Figure D.86: SIMD Lane Example: Pseudo-Assembly Code



 July 15 2024               ***WORKING DRAFT***                       Page 388
                     Appendix D. Examples (Informative)



|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|                                                                              |
|                                                                              |
||   DW_TAG_subprogram                                                         *
 *||
|        DW_AT_name ("vec_add")                                                |
||       DW_AT_num_lanes .vallist.0                                            *
 *||
|        ...                                                                   |
||       DW_TAG_variable                                                       *
 *||
||          DW_AT_name ("i")                                                   *
 *||
|           DW_AT_type (reference to type int)                                 |
||          DW_AT_location .loclist.1                                          *
 *||
|           ...                                                                |
|                                                                              |
|                                                                              |
|.vallist.0:                                                                   |
||   range [.l1, .l2)                                                          *
 *||
||      DW_OP_lit8                                                             *
 *||
|    end-of-list                                                               |
|                                                                              |
|                                                                              |
|.loclist.1:                                                                   |
||   range [.l0, .l1)                                                          *
 *||
||       DW_OP_regx r3                                                         *
 *||
|    range [.l1, .l2)                                                          |
||       DW_OP_bregx r3, 0                                                     *
 *||
|        DW_OP_push_lane                                                       |
||       DW_OP_plus                                                            *
 *||
||       DW_OP_stack_value                                                     *
 *||
|    range [.l2, .l4)                                                          |
||       DW_OP_regx r3                                                         *
 *||
|    end-of-list                                                               |
|                                                                              |
|_____________________________________________________________________________ |

             Figure D.87: SIMD Lane Example: DWARF Encoding



July 15 2024               ***WORKING DRAFT***                       Page 389




 1      Appendix E



 2      DWARF Compression and Duplicate



 3      Elimination (Informative)



 4      DWARF can use a lot of disk space.


 5      This is especially true for C++, where the depth and complexity of head*
 *ers can

 6      mean that many, many (possibly thousands of) declarations are repeated *
 *in every

 7      compilation unit. C++ templates can also mean that some functions and t*
 *heir

 8      DWARF descriptions get duplicated.


 9      This Appendix describes techniques for using the DWARF representation in

10      combination with features and characteristics of some common object ole

11      representations to reduce redundancy without losing information. It is *
 *worth

12      emphasizing that none of these techniques are necessary to provide a co*
 *mplete

13      and accurate DWARF description; they are solely concerned with reducing*
 * the

14      size of DWARF information.


15      The techniques described here depend more directly and more obviously on

16      object ole concepts and linker mechanisms than most other parts of DWAR*
 *F.

17      While the presentation tends to use the vocabulary of specioc systems, *
 *this is

18      primarily to aid in describing the techniques by appealing to well-known

19      terminology. These techniques can be employed on any system that suppor*
 *ts

20      certain general functional capabilities (described below).



21      E.1    Using Compilation Units



22      E.1.1   Overview


23      The general approach is to break up the debug information of a compilat*
 *ion into

24      separate normal and partial compilation units, each consisting of one o*
 *r more



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 390
                           Appendix E. Compression (Informative)



 1      sections. By arranging that a suOEciently similar partitioning occurs i*
 *n other

 2      compilations, a suitable system linker can delete redundant groups of s*
 *ections

 3      when combining object oles.


 4      The following uses some traditional section naming here but aside from *
 *the DWARF

 5      sections, the names are just meant to suggest traditional contents as a*
 * way of explaining

 6      the approach, not to be limiting.


 7      A traditional relocatable object output ole from a single compilation m*
 *ight

 8      contain sections named:


 9          .data

10          .text

11          .debug_info

12          .debug_abbrev

13          .debug_line

14          .debug_aranges


15      A relocatable object ole from a compilation system attempting duplicate*
 * DWARF

16      elimination might contain sections as in:


17          .data

18          .text

19          .debug_info

20          .debug_abbrev

21          .debug_line

22          .debug_aranges


23      followed (or preceded, the order is not signiocant) by a series of sect*
 *ion groups:


24      ==== Section group 1

25          .debug_info

26          .debug_abbrev

27          .debug_line

28      ==== ...

29      ==== Section group N

30          .debug_info

31          .debug_abbrev

32          .debug_line


33      where each section group might or might not contain executable code (.t*
 *ext

34      sections) or data (.data sections).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 391
                           Appendix E. Compression (Informative)



 1      A section group is a named set of section contributions within an objec*
 *t ole with

 2      the property that the entire set of section contributions must be retai*
 *ned or

 3      discarded as a whole; no partial elimination is allowed. Section groups*
 * can

 4      generally be handled by a linker in two ways:


 5      1.  Given multiple identical (duplicate) section groups, one of them is*
 * chosen to

 6          be kept and used, while the rest are discarded.


 7      2.  Given a section group that is not referenced from any section outsi*
 *de of the

 8          section group, the section group is discarded.


 9      Which handling applies may be indicated by the section group itself and*
 */or

10      selection of certain linker options.


11      For example, if a linker determines that section group 1 from A.o and s*
 *ection

12      group 3 from B.o are identical, it could discard one group and arrange *
 *that all

13      references in A.o and B.o apply to the remaining one of the two identic*
 *al section

14      groups. This saves space.


15      An important part of making it possible to iredirectj references to the*
 * surviving

16      section group is the use of consistently chosen linker global symbols f*
 *or referring

17      to locations within each section group. It follows that references are *
 *simply to

18      external names and the linker already knows how to match up references *
 *and

19      deonitions.


20      What is minimally needed from the object ole format and system linker (*
 *outside

21      of DWARF itself, and normal object/linker facilities such as simple rel*
 *ocations)

22      are:


23      1.  A means to reference the .debug_info information of one compilation*
 * unit

24          from the .debug_info section of another compilation unit

25          (DW.FORM.ref.addr provides this).


26      2.  A means to combine multiple contributions to specioc sections (for *
 *example,

27          .debug_info) into a single object ole.


28      3.  A means to identify a section group (giving it a name).


29      4.  A means to indicate which sections go together to make up a section*
 * group,

30          so that the group can be treated as a unit (kept or discarded).


31      5.  A means to indicate how each section group should be processed by t*
 *he

32          linker.


33      The notion of section and section contribution used here corresponds cl*
 *osely to the

34      similarly named concepts in the ELF object ole representation. The noti*
 *on of section

35      group is an abstraction of common extensions of the ELF representation *
 *widely known as



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 392
                           Appendix E. Compression (Informative)



 1      iCOMDATsj or iCOMDAT sections.j (Other object ole representations provi*
 *de

 2      COMDAT-style mechanisms as well.) There are several variations in the C*
 *OMDAT

 3      schemes in common use, any of which should be suOEcient for the purpose*
 *s of the

 4      DWARF duplicate elimination techniques described here.



 5      E.1.2   Naming and Usage Considerations


 6      A precise description of the means of deriving names usable by the link*
 *er to

 7      access DWARF entities is not part of this speciocation. Nonetheless, an*
 * outline of

 8      a usable approach is given here to make this more understandable and to*
 * guide

 9      implementors.


10      Implementations should clearly document their naming conventions.


11      In the following, it will be helpful to refer to the examples in Figure*
 * E.1 through

12      Figure E.8 of Section E.1.3 on page 396.


13      Section Group Names


14      Section groups must have a section group name. For the subsequent C++

15      example, a name like


16           <producer-prefix>.<file-designator>.<gid-number>


17      will suOEce, where


18      !producer-preox?   is some string specioc to the producer, which has a

19           language-designation embedded in the name when appropriate.

20           (Alternatively, the language name could be embedded in the

21           !gid-number?).


22      !ole-designator? names the ole, such as wa.h in the example.


23      !gid-number?   is a string generated to identify the specioc wa.h heade*
 *r ole in

24           such a way that


25             #  a 'matching' output from another compile generates the same

26                !gid-number?, and


27             #  a non-matching output (say because of #defines) generates a d*
 *ioeerent

28                !gid-number?.


29      It may be useful to think of a !gid-number?as a kind of idigital signat*
 *urej that allows a

30      fast test for the equality of two section groups.


31      So, for example, the section group corresponding to ole wa.h above is g*
 *iven the

32      name my.compiler.company.cpp.wa.h.123456.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 393
                           Appendix E. Compression (Informative)



 1      Debugging Information Entry Names


 2      Global labels for debugging information entries (the need for which is *
 *explained

 3      below) within a section group can be given names of the form


 4          <prefix>.<file-designator>.<gid-number>.<die-number>


 5      such as


 6          my.compiler.company.wa.h.123456.987


 7      where


 8      !preox?  distinguishes this as a DWARF debug info name, and should iden*
 *tify

 9           the producer and, when appropriate, the language.


10      !ole-designator? and <gid-number> are as above.


11      !die-number?  could be a number sequentially assigned to entities (toke*
 *ns,

12           perhaps) found during compilation.


13      In general, every point in the section group .debug_info that could be *
 *referenced

14      from outside by any compilation unit must normally have an external name

15      generated for it in the linker symbol table, whether the current compil*
 *ation

16      references all those points or not.


17      The completeness of the set of names generated is a quality-of-implemen*
 *tation issue.


18      It is up to the producer to ensure that if !die-numbers? in separate co*
 *mpilations

19      would not match properly then a distinct !gid-number? is generated.


20      Note that only section groups that are designated as duplicate-removal-*
 *applies

21      actually require the


22          <prefix>.<file-designator>.<gid-number>.<die-number>


23      external labels for debugging information entries as all other section *
 *group

24      sections can use 'local' labels (section-relative relocations).


25      (This is a consequence of separate compilation, not a rule imposed by t*
 *his

26      document.)


27      Local labels use references with form DW.FORM.ref4 or DW.FORM.ref8. (Th*
 *ese are

28      aoeected by relocations so DW.FORM.ref.udata, DW.FORM.ref1 and

29      DW.FORM.ref2 are normally not usable and DW.FORM.ref.addr is not necess*
 *ary for

30      a local label.)



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 394
                           Appendix E. Compression (Informative)



 1      E.1.2.1 Use of DW.TAG.compile.unit versus DW.TAG.partial.unit


 2      A section group compilation unit that uses DW.TAG.compile.unit is like *
 *any

 3      other compilation unit, in that its contents are evaluated by consumers*
 * as though

 4      it were an ordinary compilation unit.


 5      An #include directive appearing outside any other declarations is a good

 6      candidate to be represented using DW.TAG.compile.unit. However, an

 7      #include appearing inside a C++ namespace declaration or a function, for

 8      example, is not a good candidate because the entities included are not *
 *necessarily

 9      ole level entities.


10      This also applies to Fortran INCLUDE lines when declarations are includ*
 *ed into

11      a subprogram or module context.


12      Consequently a compiler must use DW.TAG.partial.unit (instead of

13      DW.TAG.compile.unit) in a section group whenever the section group cont*
 *ents

14      are not necessarily globally visible. This directs consumers to ignore *
 *that

15      compilation unit when scanning top level declarations and deonitions.


16      The DW.TAG.partial.unit compilation unit will be referenced from elsewh*
 *ere

17      and the referencing locations give the appropriate context for interpre*
 *ting the

18      partial compilation unit.


19      A DW.TAG.partial.unit entry may have, as appropriate, any of the attrib*
 *utes

20      assigned to a DW.TAG.compile.unit.



21      E.1.2.2 Use of DW.TAG.imported.unit


22      A DW.TAG.imported.unit debugging information entry has an

23      DW.AT.import attribute referencing a DW.TAG.compile.unit or

24      DW.TAG.partial.unit debugging information entry.


25      A DW.TAG.imported.unit debugging information entry refers to a

26      DW.TAG.compile.unit or DW.TAG.partial.unit debugging information entry

27      to specify that the DW.TAG.compile.unit or DW.TAG.partial.unit contents

28      logically appear at the point of the DW.TAG.imported.unit entry.



29      E.1.2.3 Use of DW.FORM.ref.addr


30      Use DW.FORM.ref.addr to reference from one compilation unit's debugging

31      information entries to those of another compilation unit.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 395
                           Appendix E. Compression (Informative)



 1      When referencing into a removable section group .debug_info from another

 2      .debug_info (from anywhere), the


 3          <prefix>.<file-designator>.<gid-number>.<die-number>


 4      name should be used for an external symbol and a relocation generated b*
 *ased on

 5      that name.


 6      When referencing into a non-section group .debug_info, from another .de*
 *bug_info

 7      (from anywhere) DW.FORM.ref.addr is still the form to be used, but a se*
 *ction-relative

 8      relocation generated by use of a non-exported name (often called an iin*
 *ternal namej)

 9      may be used for references within the same object ole.



10      E.1.3   Examples


11      This section provides several examples in order to have a concrete basi*
 *s for

12      discussion.


13      In these examples, the focus is on the arrangement of DWARF information*
 * into

14      sections (speciocally the .debug_info section) and the naming conventio*
 *ns used

15      to achieve references into section groups. In practice, all of the exam*
 *ples that

16      follow involve DWARF sections other than just .debug_info (for example,

17      .debug_line, .debug_aranges, or others); however, only the .debug_info *
 *section

18      is shown to keep the examples compact and easier to read.


19      The grouping of sections into a named set is shown, but the means for a*
 *chieving

20      this in terms of the underlying object language is not (and varies from*
 * system to

21      system).



22      E.1.3.1 C++ Example


23      The C++ source in Figure E.1 on the following page is used to illustrat*
 *e the

24      DWARF representation intended to allow duplicate elimination.


25      Figure E.2 on the next page shows the section group corresponding to the

26      included ole wa.h.


27      Figure E.3 on page 398 shows the inormalj DWARF sections, which are not*
 * part

28      of any section group, and how they make use of the information in the s*
 *ection

29      group shown above.


30      This example uses DW.TAG.compile.unit for the section group, implying t*
 *hat

31      the contents of the compilation unit are globally visible (in accordanc*
 *e with C++

32      language rules). DW.TAG.partial.unit is not needed for the same reason.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 396
                          Appendix E. Compression (Informative)



       File wa.h
      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||structA{
      |||======================================================================*
 *====|||inti;
      |||======================================================================*
 *====|||};_|___|

       File wa.c
      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||#include"wa.h";
      |||======================================================================*
 *====|||int
      |||======================================================================*
 *====|||f(A&a)
      |||======================================================================*
 *====|||{
      |||======================================================================*
 *====|||returna.i+2;
      |||======================================================================*
 *====|||}_|___|


       |          Figure E.1: Duplicate elimination example #1: C++ Source     *
 *       |
       |                                                                       *
 *       |
       ________________________________________________________________________*
 *______||
       |====|Section group name:                                               *
 *       ||
       |    my.compiler.company.cpp.wa.h.123456                                *
 *       |
       |==|section .debug_info                                                 *
 *       ||
       |DW.cpp.wa.h.123456.1:     ! linker global symbol                       *
 *       |
       ||   DW_TAG_compile_unit                                                *
 *       ||
       |        DW_AT_language_name(DW_LNAME_C_plus_plus)                      *
 *       |
       ||       ...  ! other unit attributes                                   *
 *       ||
       |DW.cpp.wa.h.123456.2:|    ! linker global symbol                       *
 *       ||
       |    DW_TAG_base_type                                                   *
 *       |
       ||       DW_AT_name("int")                                              *
 *       ||
       |DW.cpp.wa.h.123456.3:     ! linker global symbol                       *
 *       |
       ||   DW_TAG_structure_type                                              *
 *       ||
       ||       DW_AT_name("A")                                                *
 *       ||
       |DW.cpp.wa.h.123456.4:     ! linker global symbol                       *
 *       |
       ||       DW_TAG_member                                                  *
 *       ||
       |        DW_AT_name("i")                                                *
 *       |
       ||       DW_AT_type(DW_FORM_ref<n> to DW.cpp.wa.h.123456.2)             *
 *       ||
       ||          ! (This is a local reference, so the more                   *
 *       ||
       |           ! compact form DW_FORM_ref<n>                               *
 *       |
       ||__________!_for_n_=_1,2,4,_or_8_can_be_used)__________________________*
 *______ ||


             Figure E.2: Duplicate elimination example #1: DWARF section group



1      E.1.3.2 C Example


2      The C++ example in this Section might appear to be equally valid as a C

3      example. However, for C it is prudent to include a DW.TAG.imported.unit *
 *in

4      the primary unit (see Figure E.3 on the next page) as well as an DW.AT.i*
 *mport

5      attribute that refers to the proper unit in the section group.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 397
                          Appendix E. Compression (Informative)


       ________________________________________________________________________*
 *______||||
       |== section .text                                                       *
 *       |
       ||   [generated code for function f]                                    *
 *       ||
       |== section .debug_info                                                 *
 *       |
       ||   DW_TAG_compile_unit                                                *
 *       ||
       |.L1:|                        ! local (non-linker) symbol               *
 *       ||
       |        DW_TAG_reference_type                                          *
 *       |
       ||          DW_AT_type(reference to DW.cpp.wa.h.123456.3)               *
 *       ||
       |        DW_TAG_subprogram                                              *
 *       |
       ||          DW_AT_name("f")                                             *
 *       ||
       ||          DW_AT_type(reference to DW.cpp.wa.h.123456.2)               *
 *       ||
       |           DW_TAG_variable                                             *
 *       |
       ||              DW_AT_name("a")                                         *
 *       ||
       |               DW_AT_type(reference to .L1)                            *
 *       |
       ||_______...____________________________________________________________*
 *______ ||

            Figure E.3: Duplicate elimination example #1: primary compilation u*
 *nit



1      The C rules for consistency of global (ole scope) symbols across compila*
 *tions are less

2      strict than for C++; inclusion of the import unit attribute assures that*
 * the declarations of

3      the proper section group are considered before declarations from other c*
 *ompilations.



4      E.1.3.3 Fortran Example


5      For a Fortran example, consider Figure E.4.


       File CommonStuoe.fh
      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||IMPLICITINTEGER(A-Z)
      |||======================================================================*
 *====|||COMMON/Common1/C(100)
      |||======================================================================*
 *====|||PARAMETER(SEVEN=7)_|___|

       File Func.f
      _________________________________________________________________________*
 *_____|___|
      |||======================================================================*
 *====|||FUNCTIONFOO(N)
      |||======================================================================*
 *====|||INCLUDE'CommonStuff.fh'
      |||======================================================================*
 *====|||FOO=C(N+SEVEN)
      |||======================================================================*
 *====|||RETURN
      |||======================================================================*
 *====|||END_|___|


                 Figure E.4: Duplicate elimination example #2: Fortran source



6      Figure E.5 on the next page shows the section group corresponding to the

7      included ole CommonStuoe.fh.


8      Figure E.6 on page 400 shows the sections for the primary compilation un*
 *it.


9      A companion main program is shown in Figure E.7 on page 400



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 398
                   Appendix E. Compression (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________|*
 *|||
|==== Section group name:                                                      |
|                                                                              |

||   my.f90.company.f90.CommonStuff.fh.654321                                  *
 *||
|                                                                              |
|                                                                              |
|== section .debug_info                                                        |
|                                                                              |
|                                                                              |
|DW.myf90.CommonStuff.fh.654321.1:    ! linker global symbol                   |
||   DW_TAG_partial_unit                                                       *
 *||
||       ! ...compilation unit attributes, including...                        *
 *||
|        DW_AT_language_name(DW_LNAME_Fortran)                                 |
||       DW_AT_identifier_case(DW_ID_case_insensitive)                         *
 *||
|                                                                              |
|DW.myf90.CommonStuff.fh.654321.2:|   ! linker global symbol                   *
 *||
|3$:|DW_TAG_array_type                                                         *
 *||
|        ! unnamed                                                             |
||       DW_AT_type(reference to DW.f90.F90$main.f.2)                          *
 *||
|           ! base type INTEGER                                                |
||       DW_TAG_subrange_type                                                  *
 *||
||          DW_AT_type(reference to DW.f90.F90$main.f.2)                       *
 *||
|               ! base type INTEGER)                                           |
||          DW_AT_lower_bound(constant 1)                                      *
 *||
|           DW_AT_upper_bound(constant 100)                                    |
|                                                                              |
|                                                                              |
|DW.myf90.CommonStuff.fh.654321.3:|   ! linker global symbol                   *
 *||
|    DW_TAG_common_block                                                       |
||       DW_AT_name("Common1")                                                 *
 *||
|        DW_AT_location(Address of common block Common1)                       |
||       DW_TAG_variable                                                       *
 *||
|           DW_AT_name("C")                                                    |
||          DW_AT_type(reference to 3$)                                        *
 *||
||          DW_AT_location(address of C)                                       *
 *||
|                                                                              |
|DW.myf90.CommonStuff.fh.654321.4:|   ! linker global symbol                   *
 *||
|    DW_TAG_constant                                                           |
||       DW_AT_name("SEVEN")                                                   *
 *||
||       DW_AT_type(reference to DW.f90.F90$main.f.2)                          *
 *||
|           ! base type INTEGER                                                |
||_______DW_AT_const_value(constant_7)________________________________________ *
 *||


      Figure E.5: Duplicate elimination example #2: DWARF section group



July 15 2024               ***WORKING DRAFT***                       Page 399
                           Appendix E. Compression (Informative)
        |                                                                      *
 *        |
        _______________________________________________________________________*
 *_______||||
        |== section .text                                                      *
 *        |
        ||   [code for function Foo]                                           *
 *        ||
        |                                                                      *
 *        |
        |==|section .debug_info                                                *
 *        ||
        |    DW_TAG_compile_unit                                               *
 *        |
        ||       DW_TAG_subprogram                                             *
 *        ||
        ||          DW_AT_name("Foo")                                          *
 *        ||
        |           DW_AT_type(reference to DW.f90.F90$main.f.2)               *
 *        |
        ||              ! base type INTEGER                                    *
 *        ||
        |           DW_TAG_imported_unit                                       *
 *        |
        ||              DW_AT_import(reference to                              *
 *        ||
        |                   DW.myf90.CommonStuff.fh.654321.1)                  *
 *        |
        ||          DW_TAG_common_inclusion ! For Common1                      *
 *        ||
        ||              DW_AT_common_reference(reference to                    *
 *        ||
        |                   DW.myf90.CommonStuff.fh.654321.3)                  *
 *        |
        ||          DW_TAG_variable ! For function result                      *
 *        ||
        |               DW_AT_name("Foo")                                      *
 *        |
        ||                  DW_AT_type(reference to DW.f90.F90$main.f.2)       *
 *        ||
        ||_____________________!_base_type_INTEGER_____________________________*
 *_______ ||


                   Figure E.6: Duplicate elimination example #2: primary unit


        File Main.f
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||INCLUDE'CommonStuff.fh'
       |||=====================================================================*
 *=====|||C(50)=8
       |||=====================================================================*
 *=====|||PRINT*,'Result=',FOO(50-SEVEN)
       |||=====================================================================*
 *=====|||END_|___|


                Figure E.7: Duplicate elimination example #2: companion source



 1      That main program results in an object ole that contained a duplicate o*
 *f the

 2      section group named my.f90.company.f90.CommonStuff.fh.654321

 3      corresponding to the included ole as well as the remainder of the main

 4      subprogram as shown in Figure E.8 on the following page.


 5      This example uses DW.TAG.partial.unit for the section group because the

 6      included declarations are not independently visible as global entities.



 7      E.2    Using Type Units


 8      A large portion of debug information is type information, and in a typi*
 *cal

 9      compilation environment, many types are duplicated many times. One meth*
 *od

10      of controlling the amount of duplication is separating each type into a*
 * separate

11      COMDAT .debug_info section and arranging for the linker to recognize and



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 400
        |                  Appendix E. Compression (Informative)               *
 *        |
        |                                                                      *
 *        |
        _______________________________________________________________________*
 *_______||
        |==|section .debug_info                                                *
 *        ||
        |    DW_TAG_compile_unit                                               *
 *        |
        ||       DW_AT_name(F90$main)                                          *
 *        ||
        |        DW_TAG_base_type                                              *
 *        |
        ||          DW_AT_name("INTEGER")                                      *
 *        ||
        ||          DW_AT_encoding(DW_ATE_signed)                              *
 *        ||
        |           DW_AT_byte_size(...)                                       *
 *        |
        |                                                                      *
 *        |
        |                                                                      *
 *        |
        |        DW_TAG_base_type                                              *
 *        |
        ||          ...                                                        *
 *        ||
        ||       ...  ! other base types                                       *
 *        ||
        |        DW_TAG_subprogram                                             *
 *        |
        ||          DW_AT_name("F90$main")                                     *
 *        ||
        |           DW_TAG_imported_unit                                       *
 *        |
        ||              DW_AT_import(reference to                              *
 *        ||
        ||                  DW.myf90.CommonStuff.fh.654321.1)                  *
 *        ||
        |           DW_TAG_common_inclusion ! for Common1                      *
 *        |
        ||              DW_AT_common_reference(reference to                    *
 *        ||
        |                   DW.myf90.CommonStuff.fh.654321.3)                  *
 *        |
        ||__________...________________________________________________________*
 *_______ ||

               Figure E.8: Duplicate elimination example #2: companion DWARF



 1      eliminate duplicates at the individual type level.


 2      Using this technique, each substantial type deonition is placed in its *
 *own

 3      individual section, while the remainder of the DWARF information (non-t*
 *ype

 4      information, incomplete type declarations, and deonitions of trivial ty*
 *pes) is

 5      placed in the usual debug information section. In a typical implementat*
 *ion, the

 6      relocatable object ole may contain one of each of these debug sections:


 7      .debug_abbrev

 8      .debug_info

 9      .debug_line


10      and any number of additional COMDAT .debug_info sections containing type

11      units.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 401
                           Appendix E. Compression (Informative)



 1      As discussed in the previous section (Section E.1 on page 390), many li*
 *nkers

 2      today support the concept of a COMDAT group or linkonce section. The ge*
 *neral

 3      idea is that a ikeyj can be attached to a section or a group of section*
 *s, and the

 4      linker will include only one copy of a section group (or individual sec*
 *tion) for

 5      any given key. For COMDAT .debug_info sections, the key is the type sig*
 *nature

 6      formed from the algorithm given in Section 7.32 on page 257.



 7      E.2.1   Signature Computation Example


 8      As an example, consider a C++ header ole containing the type deonitions*
 * shown

 9      in Figure E.9.

       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||namespaceN{
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||structB;
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||structC{
       |||=====================================================================*
 *=====|||intx;
       |||=====================================================================*
 *=====|||inty;
       |||=====================================================================*
 *=====|||};
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||classA{
       |||=====================================================================*
 *=====|||public:
       |||=====================================================================*
 *=====|||A(intv);
       |||=====================================================================*
 *=====|||intv();
       |||=====================================================================*
 *=====|||private:
       |||=====================================================================*
 *=====|||intv_;
       |||=====================================================================*
 *=====|||structA*next;
       |||=====================================================================*
 *=====|||structB*bp;
       |||=====================================================================*
 *=====|||structCc;
       |||=====================================================================*
 *=====|||};
       |||=====================================================================*
 *=====|||}_|___|


                       Figure E.9: Type signature examples: C++ source



10      Next, consider one possible representation of the DWARF information that

11      describes the type istruct Cj as shown in E.10 on the following page.


12      In computing a signature for the type N::C, AEatten the type descriptio*
 *n into a

13      byte stream according to the procedure outlined in Section 7.32 on page*
 * 257. The

14      result is shown in Figure E.11 on page 404.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 402
        |                  Appendix E. Compression (Informative)               *
 *        |
        |                                                                      *
 *        |
        |                                                                      *
 *        |
        _______________________________________________________________________*
 *_______||
        |  DW_TAG_type_unit                                                    *
 *        |
        ||     DW_AT_language_name : DW_LNAME_C_plus_plus (4)                  *
 *        ||
        ||   DW_TAG_namespace                                                  *
 *        ||
        |        DW_AT_name : "N"                                              *
 *        |
        |L1:|                                                                  *
 *        ||
        |      DW_TAG_structure_type                                           *
 *        |
        ||         DW_AT_name : "C"                                            *
 *        ||
        ||         DW_AT_byte_size : 8                                         *
 *        ||
        |          DW_AT_decl_file : 1                                         *
 *        |
        ||         DW_AT_decl_line : 5                                         *
 *        ||
        |        DW_TAG_member                                                 *
 *        |
        ||          DW_AT_name : "x"                                           *
 *        ||
        ||          DW_AT_decl_file : 1                                        *
 *        ||
        |           DW_AT_decl_line : 6                                        *
 *        |
        ||          DW_AT_type : reference to L2                               *
 *        ||
        |           DW_AT_data_member_location : 0                             *
 *        |
        ||       DW_TAG_member                                                 *
 *        ||
        |           DW_AT_name : "y"                                           *
 *        |
        ||          DW_AT_decl_file : 1                                        *
 *        ||
        ||          DW_AT_decl_line : 7                                        *
 *        ||
        |           DW_AT_type : reference to L2                               *
 *        |
        ||          DW_AT_data_member_location : 4                             *
 *        ||
        |L2:                                                                   *
 *        |
        ||    DW_TAG_base_type                                                 *
 *        ||
        ||        DW_AT_byte_size : 4                                          *
 *        ||
        |         DW_AT_encoding : DW_ATE_signed                               *
 *        |
        ||________DW_AT_name_:_"int"___________________________________________*
 *_______ ||


              Figure E.10: Type signature computation #1: DWARF representation



 1      Running an MD5 hash over this byte stream, and taking the low-order 64 *
 *bits,

 2      yields the onal signature: 0xd28081e8 dcf5070a.


 3      Next, consider a representation of the DWARF information that describes*
 * the

 4      type iclass Aj as shown in Figure E.12 on page 405.


 5      In this example, the structure types N::A and N::C have each been place*
 *d in

 6      separate type units. For N::A, the actual deonition of the type begins *
 *at label L1.

 7      The deonition involves references to the int base type and to two point*
 *er types.

 8      The information for each of these referenced types is also included in *
 *this type

 9      unit, since base types and pointer types are trivial types that are not*
 * worth the

10      overhead of a separate type unit. The last pointer type contains a refe*
 *rence to an

11      incomplete type N::B, which is also included here as a declaration, sin*
 *ce the

12      complete type is unknown and its signature is therefore unavailable. Th*
 *ere is

13      also a reference to N::C, using DW.FORM.ref.sig8 to refer to the type s*
 *ignature

14      for that type.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 403
                   Appendix E. Compression (Informative)

|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________________||
|//|Step 2: 'C' DW_TAG_namespace "N"                                           *
 *||
|0x43 0x39 0x4e 0x00                                                           |
|//|Step 3: 'D' DW_TAG_structure_type                                          *
 *||
|0x44 0x13                                                                     |
|//|Step 4: 'A' DW_AT_name DW_FORM_string "C"                                  *
 *||
|0x41|0x03 0x08 0x43 0x00                                                      *
 *||
|// Step 4: 'A' DW_AT_byte_size DW_FORM_sdata 8                                |
|0x41|0x0b 0x0d 0x08                                                           *
 *||
|// Step 7: First child ("x")                                                  |
||   // Step 3: 'D' DW_TAG_member                                              *
 *||
||   0x44 0x0d                                                                 *
 *||
|    // Step 4: 'A' DW_AT_name DW_FORM_string "x"                              |
||   0x41 0x03 0x08 0x78 0x00                                                  *
 *||
|    // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 0                 |
||   0x41 0x38 0x0d 0x00                                                       *
 *||
||   // Step 6: 'T' DW_AT_type (type #2)                                       *
 *||
|    0x54 0x49                                                                 |
||       // Step 3: 'D' DW_TAG_base_type                                       *
 *||
|        0x44 0x24                                                             |
||       // Step 4: 'A' DW_AT_name DW_FORM_string "int"                        *
 *||
||       0x41 0x03 0x08 0x69 0x6e 0x74 0x00                                    *
 *||
|        // Step 4: 'A' DW_AT_byte_size DW_FORM_sdata 4                        |
||       0x41 0x0b 0x0d 0x04                                                   *
 *||
|        // Step 4: 'A' DW_AT_encoding DW_FORM_sdata DW_ATE_signed             |
||       0x41 0x3e 0x0d 0x05                                                   *
 *||
|        // Step 7: End of DW_TAG_base_type "int"                              |
||       0x00                                                                  *
 *||
||   // Step 7: End of DW_TAG_member "x"                                       *
 *||
|    0x00                                                                      |
|//|Step 7: Second child ("y")                                                 *
 *||
|    // Step 3: 'D' DW_TAG_member                                              |
||   0x44 0x0d                                                                 *
 *||
||   // Step 4: 'A' DW_AT_name DW_FORM_string "y"                              *
 *||
|    0x41 0x03 0x08 0x79 0x00                                                  |
||   // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 4                 *
 *||
|    0x41 0x38 0x0d 0x04                                                       |
||   // Step 6: 'R' DW_AT_type (type #2)                                       *
 *||
||   0x52 0x49 0x02                                                            *
 *||
|    // Step 7: End of DW_TAG_member "y"                                       |
||   0x00                                                                      *
 *||
|// Step 7: End of DW_TAG_structure_type "C"                                   |
|0x00|________________________________________________________________________ *
 *||

       Figure E.11: Type signature computation #1: AEattened byte stream



July 15 2024               ***WORKING DRAFT***                       Page 404
                   Appendix E. Compression (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_1_of*
 *_2||||
|| DW_TAG_type_unit                                                            *
 *||
|      DW_AT_language_name : DW_LNAME_C_plus_plus (4)                          |
||   DW_TAG_namespace                                                          *
 *||
||       DW_AT_name : "N"                                                      *
 *||
|L1:                                                                           |
||       DW_TAG_class_type                                                     *
 *||
|            DW_AT_name : "A"                                                  |
||           DW_AT_byte_size : 20                                              *
 *||
||           DW_AT_decl_file : 1                                               *
 *||
|            DW_AT_decl_line : 10                                              |
||         DW_TAG_member                                                       *
 *||
|               DW_AT_name : "v_"                                              |
||              DW_AT_decl_file : 1                                            *
 *||
|               DW_AT_decl_line : 15                                           |
||              DW_AT_type : reference to L2                                   *
 *||
||              DW_AT_data_member_location : 0                                 *
 *||
|               DW_AT_accessibility : DW_ACCESS_private                        |
||         DW_TAG_member                                                       *
 *||
|              DW_AT_name : "next"                                             |
||             DW_AT_decl_file : 1                                             *
 *||
||             DW_AT_decl_line : 16                                            *
 *||
|              DW_AT_type : reference to L3                                    |
||             DW_AT_data_member_location : 4                                  *
 *||
|              DW_AT_accessibility : DW_ACCESS_private                         |
||         DW_TAG_member                                                       *
 *||
||             DW_AT_name : "bp"                                               *
 *||
|              DW_AT_decl_file : 1                                             |
||             DW_AT_decl_line : 17                                            *
 *||
|              DW_AT_type : reference to L4                                    |
||             DW_AT_data_member_location : 8                                  *
 *||
|              DW_AT_accessibility : DW_ACCESS_private                         |
||         DW_TAG_member                                                       *
 *||
||             DW_AT_name : "c"                                                *
 *||
|              DW_AT_decl_file : 1                                             |
||             DW_AT_decl_line : 18                                            *
 *||
|              DW_AT_type : 0xd28081e8 dcf5070a (signature for struct C)       |
||             DW_AT_data_member_location : 12                                 *
 *||
||_____________DW_AT_accessibility_:_DW_ACCESS_private________________________ *
 *||


      Figure E.12: Type signature computation #2: DWARF representation



July 15 2024               ***WORKING DRAFT***                       Page 405
                   Appendix E. Compression (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||
||     DW_TAG_subprogram                                                       *
 *||
||         DW_AT_external : 1                                                  *
 *||
|          DW_AT_name : "A"                                                    |
||         DW_AT_decl_file : 1                                                 *
 *||
|          DW_AT_decl_line : 12                                                |
||         DW_AT_declaration : 1                                               *
 *||
|        DW_TAG_formal_parameter                                               |
||         DW_AT_type : reference to L3                                        *
 *||
||         DW_AT_artificial : 1                                                *
 *||
|        DW_TAG_formal_parameter                                               |
||         DW_AT_type : reference to L2                                        *
 *||
|       DW_TAG_subprogram                                                      |
||         DW_AT_external : 1                                                  *
 *||
||         DW_AT_name : "v"                                                    *
 *||
|          DW_AT_decl_file : 1                                                 |
||         DW_AT_decl_line : 13                                                *
 *||
|          DW_AT_type : reference to L2                                        |
||         DW_AT_declaration : 1                                               *
 *||
||        DW_TAG_formal_parameter                                              *
 *||
|          DW_AT_type : reference to L3                                        |
||         DW_AT_artificial : 1                                                *
 *||
|L2:                                                                           |
||   DW_TAG_base_type                                                          *
 *||
||        DW_AT_byte_size : 4                                                  *
 *||
|         DW_AT_encoding : DW_ATE_signed                                       |
||        DW_AT_name : "int"                                                   *
 *||
|L3:                                                                           |
||   DW_TAG_pointer_type                                                       *
 *||
|         DW_AT_type : reference to L1                                         |
|L4:|                                                                          *
 *||
||   DW_TAG_pointer_type                                                       *
 *||
|         DW_AT_type : reference to L5                                         |
||   DW_TAG_namespace                                                          *
 *||
|         DW_AT_name : "N"                                                     |
|L5:|                                                                          *
 *||
||      DW_TAG_structure_type                                                  *
 *||
|          DW_AT_name : "B"                                                    |
||_________DW_AT_declaration_:_1______________________________________________ *
 *||


 Figure E.12: Type signature computation #2: DWARF representation (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 406
                   Appendix E. Compression (Informative)



|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |

______________________________________________________________________part_1_of*
 *_3||||
|//|Step 2: 'C' DW_TAG_namespace "N"                                           *
 *||
|0x43 0x39 0x4e 0x00                                                           |
|//|Step 3: 'D' DW_TAG_class_type                                              *
 *||
|0x44|0x02                                                                     *
 *||
|// Step 4: 'A' DW_AT_name DW_FORM_string "A"                                  |
|0x41|0x03 0x08 0x41 0x00                                                      *
 *||
|// Step 4: 'A' DW_AT_byte_size DW_FORM_sdata 20                               |
|0x41|0x0b 0x0d 0x14                                                           *
 *||
|//|Step 7: First child ("v_")                                                 *
 *||
|    // Step 3: 'D' DW_TAG_member                                              |
||   0x44 0x0d                                                                 *
 *||
|    // Step 4: 'A' DW_AT_name DW_FORM_string "v_"                             |
||   0x41 0x03 0x08 0x76 0x5f 0x00                                             *
 *||
||   // Step 4: 'A' DW_AT_accessibility DW_FORM_sdata DW_ACCESS_private        *
 *||
|    0x41 0x32 0x0d 0x03                                                       |
||   // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 0                 *
 *||
|    0x41 0x38 0x0d 0x00                                                       |
||   // Step 6: 'T' DW_AT_type (type #2)                                       *
 *||
||   0x54 0x49                                                                 *
 *||
|        // Step 3: 'D' DW_TAG_base_type                                       |
||       0x44 0x24                                                             *
 *||
|        // Step 4: 'A' DW_AT_name DW_FORM_string "int"                        |
||       0x41 0x03 0x08 0x69 0x6e 0x74 0x00                                    *
 *||
|        // Step 4: 'A' DW_AT_byte_size DW_FORM_sdata 4                        |
||       0x41 0x0b 0x0d 0x04                                                   *
 *||
||       // Step 4: 'A' DW_AT_encoding DW_FORM_sdata DW_ATE_signed             *
 *||
|        0x41 0x3e 0x0d 0x05                                                   |
||       // Step 7: End of DW_TAG_base_type "int"                              *
 *||
|        0x00                                                                  |
||   // Step 7: End of DW_TAG_member "v_"                                      *
 *||
||   0x00                                                                      *
 *||
|// Step 7: Second child ("next")                                              |
||   // Step 3: 'D' DW_TAG_member                                              *
 *||
|    0x44 0x0d                                                                 |
||   // Step 4: 'A' DW_AT_name DW_FORM_string "next"                           *
 *||
||   0x41 0x03 0x08 0x6e 0x65 0x78 0x74 0x00                                   *
 *||
|    // Step 4: 'A' DW_AT_accessibility DW_FORM_sdata DW_ACCESS_private        |
||   0x41 0x32 0x0d 0x03                                                       *
 *||
|    // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 4                 |
||___0x41_0x38_0x0d_0x04______________________________________________________ *
 *||

         Figure E.13: Type signature example #2: AEattened byte stream



July 15 2024               ***WORKING DRAFT***                       Page 407
|                  Appendix E. Compression (Informative)                       |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_3||||
||   // Step 6: 'T' DW_AT_type (type #3)                                       *
 *||
|    0x54 0x49                                                                 |
||       // Step 3: 'D' DW_TAG_pointer_type                                    *
 *||
|        0x44 0x0f                                                             |
||       // Step 5: 'N' DW_AT_type                                             *
 *||
|        0x4e 0x49                                                             |
||       // Step 5: 'C' DW_TAG_namespace "N" 'E'                               *
 *||
||       0x43 0x39 0x4e 0x00 0x45                                              *
 *||
|        // Step 5: "A"                                                        |
||       0x41 0x00                                                             *
 *||
|        // Step 7: End of DW_TAG_pointer_type                                 |
||       0x00                                                                  *
 *||
||   // Step 7: End of DW_TAG_member "next"                                    *
 *||
|    0x00                                                                      |
|//|Step 7: Third child ("bp")                                                 *
 *||
|    // Step 3: 'D' DW_TAG_member                                              |
||   0x44 0x0d                                                                 *
 *||
||   // Step 4: 'A' DW_AT_name DW_FORM_string "bp"                             *
 *||
|    0x41 0x03 0x08 0x62 0x70 0x00                                             |
||   // Step 4: 'A' DW_AT_accessibility DW_FORM_sdata DW_ACCESS_private        *
 *||
|    0x41 0x32 0x0d 0x03                                                       |
||   // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 8                 *
 *||
||   0x41 0x38 0x0d 0x08                                                       *
 *||
|    // Step 6: 'T' DW_AT_type (type #4)                                       |
||   0x54 0x49                                                                 *
 *||
|        // Step 3: 'D' DW_TAG_pointer_type                                    |
||       0x44 0x0f                                                             *
 *||
|        // Step 5: 'N' DW_AT_type                                             |
||       0x4e 0x49                                                             *
 *||
||       // Step 5: 'C' DW_TAG_namespace "N" 'E'                               *
 *||
|        0x43 0x39 0x4e 0x00 0x45                                              |
||       // Step 5: "B"                                                        *
 *||
|        0x42 0x00                                                             |
||       // Step 7: End of DW_TAG_pointer_type                                 *
 *||
||       0x00                                                                  *
 *||
|    // Step 7: End of DW_TAG_member "next"                                    |
||   0x00                                                                      *
 *||
|// Step 7: Fourth child ("c")                                                 |
||   // Step 3: 'D' DW_TAG_member                                              *
 *||
||   0x44 0x0d                                                                 *
 *||
|    // Step 4: 'A' DW_AT_name DW_FORM_string "c"                              |
||   0x41 0x03 0x08 0x63 0x00                                                  *
 *||
|    // Step 4: 'A' DW_AT_accessibility DW_FORM_sdata DW_ACCESS_private        |
||___0x41_0x32_0x0d_0x03______________________________________________________ *
 *||


    Figure E.13: Type signature example #2: AEattened byte stream (continued)



July 15 2024               ***WORKING DRAFT***                       Page 408
|                                                                              |
|                  Appendix E. Compression (Informative)                       |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_3_of*
 *_3||||
|    // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 12                |
||   0x41 0x38 0x0d 0x0c                                                       *
 *||
||   // Step 6: 'T' DW_AT_type (type #5)                                       *
 *||
|    0x54 0x49                                                                 |
||       // Step 2: 'C' DW_TAG_namespace "N"                                   *
 *||
|        0x43 0x39 0x4e 0x00                                                   |
||       // Step 3: 'D' DW_TAG_structure_type                                  *
 *||
|        0x44 0x13                                                             |
||       // Step 4: 'A' DW_AT_name DW_FORM_string "C"                          *
 *||
||       0x41 0x03 0x08 0x43 0x00                                              *
 *||
|        // Step 4: 'A' DW_AT_byte_size DW_FORM_sdata 8                        |
||       0x41 0x0b 0x0d 0x08                                                   *
 *||
|        // Step 7: First child ("x")                                          |
||          // Step 3: 'D' DW_TAG_member                                       *
 *||
||          0x44 0x0d                                                          *
 *||
|           // Step 4: 'A' DW_AT_name DW_FORM_string "x"                       |
||          0x41 0x03 0x08 0x78 0x00                                           *
 *||
|           // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 0          |
||          0x41 0x38 0x0d 0x00                                                *
 *||
||          // Step 6: 'R' DW_AT_type (type #2)                                *
 *||
|           0x52 0x49 0x02                                                     |
||          // Step 7: End of DW_TAG_member "x"                                *
 *||
|           0x00                                                               |
||       // Step 7: Second child ("y")                                         *
 *||
||          // Step 3: 'D' DW_TAG_member                                       *
 *||
|           0x44 0x0d                                                          |
||          // Step 4: 'A' DW_AT_name DW_FORM_string "y"                       *
 *||
|           0x41 0x03 0x08 0x79 0x00                                           |
||          // Step 4: 'A' DW_AT_data_member_location DW_FORM_sdata 4          *
 *||
|           0x41 0x38 0x0d 0x04                                                |
||          // Step 6: 'R' DW_AT_type (type #2)                                *
 *||
||          0x52 0x49 0x02                                                     *
 *||
|           // Step 7: End of DW_TAG_member "y"                                |
||          0x00                                                               *
 *||
|        // Step 7: End of DW_TAG_structure_type "C"                           |
||       0x00                                                                  *
 *||
||   // Step 7: End of DW_TAG_member "c"                                       *
 *||
|    0x00                                                                      |
|//|Step 7: Fifth child ("A")                                                  *
 *||
|    // Step 3: 'S' DW_TAG_subprogram "A"                                      |
||   0x53 0x2e 0x41 0x00                                                       *
 *||
|//|Step 7: Sixth child ("v")                                                  *
 *||
|    // Step 3: 'S' DW_TAG_subprogram "v"                                      |
||   0x53 0x2e 0x76 0x00                                                       *
 *||
|// Step 7: End of DW_TAG_structure_type "A"                                   |
|0x00|________________________________________________________________________ *
 *||


    Figure E.13: Type signature example #2: AEattened byte stream (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 409
                           Appendix E. Compression (Informative)



 1      In computing a signature for the type N::A, AEatten the type descriptio*
 *n into a

 2      byte stream according to the procedure outlined in Section 7.32 on page*
 * 257. The

 3      result is shown in Figure E.13 on page 407.


 4      Running an MD5 hash over this byte stream, and taking the low-order 64 *
 *bits,

 5      yields the onal signature: 0xd6d160f5 5589f6e9.


 6      A source ole that includes this header ole may declare a variable of ty*
 *pe N::A,

 7      and its DWARF information may look like that shown in Figure E.14.

        _______________________________________________________________________*
 *_______||
        |  DW_TAG_compile_unit                                                 *
 *        |
        || ...                                                                 *
 *        ||
        |  DW_TAG_subprogram                                                   *
 *        |
        ||   ...                                                               *
 *        ||
        ||   DW_TAG_variable                                                   *
 *        ||
        |      DW_AT_name : "a"                                                *
 *        |
        ||     DW_AT_type : (signature) 0xd6d160f5 5589f6e9                    *
 *        ||
        |      DW_AT_location : ...                                            *
 *        |
        ||___..._______________________________________________________________*
 *_______ ||

                          Figure E.14: Type signature example usage



 8      E.2.2   Type Signature Computation Grammar


 9      Figure E.15 on the next page presents a semi-formal grammar that may ai*
 *d in

10      understanding how the bytes of the AEattened type description are forme*
 *d during

11      the type signature computation algorithm of Section 7.32 on page 257.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 410
|                                                                              |
|                                                                              |
||                 Appendix E. Compression (Informative)                       *
 *||
|                                                                              |
______________________________________________________________________________|*
 *|||
|signature                                                                     |
||   : opt-context debug-entry attributes children                             *
 *||
|opt-context              // Step 2                                            |
||   : 'C' tag-code string opt-context                                         *
 *||
||   : empty                                                                   *
 *||
|debug-entry              // Step 3                                            |
||   : 'D' tag-code                                                            *
 *||
|attributes               // Steps 4, 5, 6                                     |
||   : attribute attributes                                                    *
 *||
|    : empty                                                                   |
|attribute|                                                                    *
 *||
||   : 'A' at-code form-encoded-value     // Normal attributes                 *
 *||
|    : 'N' at-code opt-context 'E' string // Reference to type by name         |
||   : 'R' at-code back-ref              // Back-reference to visited type     *
 *||
|    : 'T' at-code signature             // Recursive type                     |
|children|               //  Step 7                                            *
 *||
||   : child children                                                          *
 *||
|    : '\0'                                                                    |
|child|                                                                        *
 *||
|    : 'S' tag-code string                                                     |
||   : signature                                                               *
 *||
|tag-code|                                                                     *
 *||
|    : <ULEB128>                                                               |
|at-code|                                                                      *
 *||
|    : <ULEB128>                                                               |
|form-encoded-value|                                                           *
 *||
||   : DW_FORM_sdata value                                                     *
 *||
|    : DW_FORM_flag value                                                      |
||   : DW_FORM_string string                                                   *
 *||
|    : DW_FORM_block block                                                     |
|DW_FORM_string|                                                               *
 *||
|    : '\x08'                                                                  |
|DW_FORM_block|                                                                *
 *||
||   : '\x09'                                                                  *
 *||
|DW_FORM_flag                                                                  |
||   : '\x0c'                                                                  *
 *||
|DW_FORM_sdata                                                                 |
||   : '\x0d'                                                                  *
 *||
|value|                                                                        *
 *||
|    : <SLEB128>                                                               |
|block|                                                                        *
 *||
|    : <ULEB128> <fixed-length-block> // The ULEB128 gives the length of the bl*
 *ock|
|back-ref|                                                                     *
 *||
||   : <ULEB128>                                                               *
 *||
|string                                                                        |
||   : <null-terminated-string>                                                *
 *||
|empty                                                                         |
||___:________________________________________________________________________ *
 *||

               Figure E.15: Type signature computation grammar



July 15 2024               ***WORKING DRAFT***                       Page 411
                          Appendix E. Compression (Informative)



1      E.2.3   Declarations Completing Non-Deoning Declarations


2      Consider a compilation unit that contains a deonition of the member func*
 *tion

3      N::A::v()|from|Figure E.9 on page 402. A possible representation of the *
 *debug  ||

4      information|for|this function in the compilation unit is shown in Figure*
 * E.16. ||

       ________________________________________________________________________*
 *______||||
       |  DW_TAG_namespace                                                     *
 *       |
       ||     DW_AT_name : "N"                                                 *
 *       ||
       |L1:                                                                    *
 *       |
       ||   DW_TAG_class_type                                                  *
 *       ||
       |        DW_AT_name : "A"                                               *
 *       |
       ||       DW_AT_declaration : true                                       *
 *       ||
       ||       DW_AT_signature : 0xd6d160f5 5589f6e9                          *
 *       ||
       |L2:                                                                    *
 *       |
       ||     DW_TAG_subprogram                                                *
 *       ||
       |          DW_AT_external : 1                                           *
 *       |
       ||         DW_AT_name : "v"                                             *
 *       ||
       ||         DW_AT_decl_file : 1                                          *
 *       ||
       |          DW_AT_decl_line : 13                                         *
 *       |
       ||         DW_AT_type : reference to L3                                 *
 *       ||
       |          DW_AT_declaration : 1                                        *
 *       |
       ||       DW_TAG_formal_parameter                                        *
 *       ||
       ||          DW_AT_type : reference to L4                                *
 *       ||
       |           DW_AT_artificial : 1                                        *
 *       |
       |...|                                                                   *
 *       ||
       |L3:                                                                    *
 *       |
       || DW_TAG_base_type                                                     *
 *       ||
       |      DW_AT_byte_size : 4                                              *
 *       |
       ||     DW_AT_encoding : DW_ATE_signed                                   *
 *       ||
       ||     DW_AT_name : "int"                                               *
 *       ||
       |...                                                                    *
 *       |
       |L4:|                                                                   *
 *       ||
       |  DW_TAG_pointer_type                                                  *
 *       |
       ||     DW_AT_type : reference to L1                                     *
 *       ||
       |...|                                                                   *
 *       ||
       |  DW_TAG_subprogram                                                    *
 *       |
       ||     DW_AT_specification : reference to L2                            *
 *       ||
       |      DW_AT_decl_file : 2                                              *
 *       |
       ||     DW_AT_decl_line : 25                                             *
 *       ||
       ||     DW_AT_low_pc : ...                                               *
 *       ||
       |      DW_AT_high_pc : ...                                              *
 *       |
       ||   DW_TAG_lexical_block                                               *
 *       ||
       |    ...                                                                *
 *       |
       |...|___________________________________________________________________*
 *______ ||

         Figure E.16: Completing declaration of a member function: DWARF encodi*
 *ng



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 412
                           Appendix E. Compression (Informative)



 1      E.3    Summary of Compression Techniques



 2      E.3.1   #include compression


 3      C++ has a much greater problem than C with the number and size of the h*
 *eaders

 4      included and the amount of data in each, but even with C there is subst*
 *antial

 5      header ole information duplication.


 6      A reasonable approach is to put each header ole in its own section grou*
 *p, using

 7      the naming rules mentioned above. The section groups are marked to ensu*
 *re

 8      duplicate removal.


 9      All data instances and code instances (even if they came from the heade*
 *r oles

10      above) are put into non-section group sections such as the base object *
 *ole

11      .debug_info section.



12      E.3.2   Eliminating function duplication


13      Function templates (C++) result in code for the same template instantia*
 *tion being

14      compiled into multiple archives or relocatable object oles. The linker *
 *wants to

15      keep only one of a given entity. The DWARF description, and everything *
 *else for

16      this function, should be reduced to just a single copy.


17      For each such code group (function template in this example) the compil*
 *er

18      assigns a name for the group which will match all other instantiations *
 *of this

19      function but match nothing else. The section groups are marked to ensure

20      duplicate removal, so that the second and subsequent deonitions seen by*
 * the

21      static linker are simply discarded.


22      References to other .debug_info sections follow the approach suggested *
 *above,

23      but the naming rule is slightly dioeerent in that the <file-designator>*
 * should be

24      interpreted as a <function-designator>.



25      E.3.3   Single-function-per-DWARF-compilation-unit


26      Section groups can help make it easy for a linker to completely remove *
 *unused

27      functions.


28      Such section groups are not marked for duplicate removal, since the fun*
 *ctions

29      are not duplicates of anything.


30      Each function is given a compilation unit and a section group. Each such

31      compilation unit is complete, with its own text, data, and DWARF sectio*
 *ns.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 413
                           Appendix E. Compression (Informative)



 1      There will also be a compilation unit that has the ole-level declaratio*
 *ns and

 2      deonitions. Other per-function compilation unit DWARF information

 3      (.debug_info) points to this common ole-level compilation unit using

 4      DW.TAG.imported.unit.


 5      Section groups can use DW.FORM.ref.addr and internal labels (section-re*
 *lative

 6      relocations) to refer to the main object ole sections, as the section g*
 *roups here are

 7      either deleted as unused or kept. There is no possibility (aside from e*
 *rror) of a

 8      group from some other compilation being used in place of one of these g*
 *roups.



 9      E.3.4   Inlining and out-of-line-instances


10      Abstract instances and concrete-out-of-line instances may be put in dis*
 *tinct

11      compilation units using section groups. This makes possible some useful

12      duplicate DWARF elimination.


13      No special provision for eliminating class duplication resulting from t*
 *emplate

14      instantiation is made here, though nothing prevents eliminating such du*
 *plicates using

15      section groups.



16      E.3.5   Separate Type Units


17      Each complete declaration of a globally-visible type can be placed in i*
 *ts own

18      separate type section, with a group key derived from the type signature*
 *. The

19      linker can then remove all duplicate type declarations based on the key.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 414
                   Appendix E. Compression (Informative)



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 415




 1      Appendix F



 2      Split DWARF Object Files



 3      (Informative)



 4      With the traditional DWARF format, debug information is designed with t*
 *he

 5      expectation that it will be processed by the linker to produce an outpu*
 *t binary

 6      with complete debug information, and with fully-resolved references to *
 *locations

 7      within the application. For very large applications, however, this appr*
 *oach can

 8      result in excessively large link times and excessively large output ole*
 *s.


 9      Several producers have independently developed proprietary approaches t*
 *hat

10      allow the debug information to remain in the relocatable object oles, s*
 *o that the

11      linker does not have to process the debug information or copy it to the*
 * output

12      ole. These approaches have all required that additional information be *
 *made

13      available to the debug information consumer, and that the consumer perf*
 *orm

14      some minimal amount of relocation in order to interpret the debug info *
 *correctly.

15      The additional information required, in the form of load maps or symbol*
 * tables,

16      and the details of the relocation are not covered by the DWARF specioca*
 *tion, and

17      vary with each producer's implementation.


18      Section 7.3.2 on page 194 describes a platform-independent mechanism th*
 *at

19      allows a producer to split the debugging information into relocatable a*
 *nd

20      non-relocatable partitions. This Appendix describes the use of split DW*
 *ARF

21      object oles and provides some illustrative examples.



22      F.1    Overview


23      DWARF Version 5 introduces an optional set of debugging sections that a*
 *llow the

24      compiler to partition the debugging information into a set of (small) s*
 *ections that

25      require link-time relocation and a set of (large) sections that do not.*
 * The sections



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 416
                      Appendix F. Split DWARF Object Files (Informative)



 1      that require relocation are written to the relocatable object ole as us*
 *ual, and are

 2      linked into the onal executable. The sections that do not require reloc*
 *ation,

 3      however, can be written to the relocatable object (.o) ole but ignored *
 *by the

 4      linker, or they can be written to a separate DWARF object (.dwo) ole th*
 *at need

 5      not be accessed by the linker.


 6      The optional set of debugging sections includes the following:


 7        #  .debug_abbrev.dwo - Contains the abbreviations table(s) used by the

 8           .debug_info.dwo section.


 9        #  .debug_info.dwo - Contains the DW.TAG.compile.unit and

10           DW.TAG.type.unit DIEs and their descendants. This is the bulk of t*
 *he

11           debugging information for the compilation unit that is normally fo*
 *und in

12           the .debug_info section.


13        #  .debug_loclists.dwo - Contains the location lists referenced by the

14           debugging information entries in the .debug_info.dwo section. This

15           contains the value lists and location lists normally found in the

16           .debug_loclists section.


17        #  .debug_str.dwo - Contains the string table for all indirect strings

18           referenced by the debugging information in the .debug_info.dwo sec*
 *tions.


19        #  .debug_str_offsets.dwo - Contains the string ooesets table for the*
 * strings

20           in the .debug_str.dwo section.


21        #  .debug_macro.dwo - Contains macro deonition information, normally

22           found in the .debug_macro section.


23        #  .debug_line.dwo - Contains specialized line number tables for the *
 *type

24           units in the .debug_info.dwo section. These tables contain only the

25           directory and olename lists needed to interpret DW.AT.decl.ole att*
 *ributes

26           in the debugging information entries. Actual line number tables re*
 *main in

27           the .debug_line section, and remain in the relocatable object (.o)*
 * oles.


28      In a .dwo ole, there is no beneot to having a separate string section f*
 *or directories

29      and ole names because the primary string table will never be stripped.

30      Accordingly, no .debug_line_str.dwo section is deoned. Content descript*
 *ions

31      corresponding to DW.FORM.line.strp in an executable ole (for example, i*
 *n the

32      skeleton compilation unit) instead use one of the forms DW.FORM.strx,

33      DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or DW.FORM.strx4.

34      This allows directory and ole name strings to be merged with general st*
 *rings and

35      across compilations in package oles (where they are not subject to pote*
 *ntial

36      stripping). This merge is facilitated by the requirement that all refer*
 *ences to the

37      .debug_str.dwo string table are made indirectly through the



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 417
                      Appendix F. Split DWARF Object Files (Informative)



 1      .debug_str_offsets.dwo section so that only that section needs to be mo*
 *dioed

 2      during string merging (see Section 7.3.2.2 on page 195).


 3      In order for the consumer to locate and process the debug information, *
 *the

 4      compiler must produce a small amount of debug information that passes t*
 *hrough

 5      the linker into the output binary. A skeleton .debug_info section for e*
 *ach

 6      compilation unit contains a reference to the corresponding .o or .dwo o*
 *le, and

 7      the .debug_line section (which is typically small compared to the .debu*
 *g_info

 8      sections) is linked into the output binary, as is the .debug_addr secti*
 *on.


 9      The debug sections that continue to be linked into the output binary in*
 *clude the

10      following:


11        #  .debug_abbrev - Contains the abbreviation codes used by the skelet*
 *on

12           .debug_info section.


13        #  .debug_addr - Contains references to loadable sections, indexed by

14           attributes of one of the forms DW.FORM.addrx, DW.FORM.addrx1,

15           DW.FORM.addrx2, DW.FORM.addrx3, DW.FORM.addrx4, or location

16           expression DW.OP.addrx opcodes.


17        #  .debug_aranges - Contains the accelerated range lookup table for t*
 *he

18           compilation unit.


19        #  .debug_frame - Contains the frame tables.


20        #  .debug_info - Contains a skeleton skeleton compilation unit DIE, w*
 *hich

21           has no children.


22        #  .debug_line - Contains the line number tables. (These could be mov*
 *ed to

23           the .dwo ole, but in order to do so, each DW.LNE.set.address opcode

24           would need to be replaced by a new opcode that referenced an entry*
 * in the

25           .debug_addr section. Furthermore, leaving this section in the .o o*
 *le allows

26           many debug info consumers to remain unaware of .dwo oles.)


27        #  .debug_line_str - Contains strings for ole names used in combinati*
 *on

28           with the .debug_line section.


29        #  .debug_names - Contains the names for use in building an index sec*
 *tion.

30           The section header refers to a compilation unit ooeset, which is t*
 *he ooeset of

31           the skeleton compilation unit in the .debug_info section.


32        #  .debug_str - Contains any strings referenced by the skeleton .debu*
 *g_info

33           sections (via DW.FORM.strp, DW.FORM.strp8, DW.FORM.strx,

34           DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

35           DW.FORM.strx4).



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 418
                      Appendix F. Split DWARF Object Files (Informative)



 1        #  .debug_str_offsets - Contains the string ooesets table for the str*
 *ings in the

 2           .debug_str section (if one of the forms DW.FORM.strx, DW.FORM.strx*
 *1,

 3           DW.FORM.strx2, DW.FORM.strx3 or DW.FORM.strx4 is used).


 4      The skeleton compilation unit DIE may have the following attributes:


         DW.AT.addr.base      DW.AT.high.pc        DW.AT.stmt.list

         DW.AT.comp.dir       DW.AT.low.pc         DW.AT.str.ooesets

         DW.AT.dwo.name       DW.AT.ranges


 5      All other attributes of the compilation unit DIE are moved to the full *
 *DIE in the

 6      .debug_info.dwo section.


 7      The dwo_id oeld is present in headers of the skeleton DIE and the heade*
 *r of the

 8      full DIE, so that a consumer can verify a match.


 9      Relocations are neither necessary nor useful in .dwo oles, because the *
 *.dwo oles

10      contain only debugging information that does not need to be processed b*
 *y a

11      linker. Relocations are rendered unnecessary by these strategies:


12      1.  Some values needing relocation are kept in the .o ole (for example,*
 * references

13          to the line number program from the skeleton compilation unit).


14      2.  Some values do not need a relocation because they refer from one .d*
 *wo

15          section to another .dwo section in the same compilation unit.


16      3.  Some values that need a relocation to refer to a relocatable progra*
 *m address

17          use one of the DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

18          DW.FORM.addrx3 or DW.FORM.addrx4 forms, referencing a relocatable

19          value in the .debug_addr section (which remains in the .o ole).


20      Table F.1 on the next page summarizes which attributes are deoned for u*
 *se in the

21      various kinds of compilation units (see Section 3.1 on page 61). It com*
 *pares and

22      contrasts both conventional and split object-related kinds.


23      The split dwarf object ole design depends on having an index of debuggi*
 *ng

24      information available to the consumer. For name lookups, the consumer c*
 *an use

25      the .debug_names index section (see Section 6.1 on page 140) to locate *
 *a skeleton

26      compilation unit. The DW.AT.comp.dir and DW.AT.dwo.name attributes in

27      the skeleton compilation unit can then be used to locate the correspond*
 *ing

28      DWARF object ole for the compilation unit. Similarly, for an address lo*
 *okup, the

29      consumer can use the .debug_aranges table, which will also lead to a sk*
 *eleton

30      compilation unit. For a ole and line number lookup, the skeleton compil*
 *ation

31      units can be used to locate the line number tables.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 419
              Appendix F. Split DWARF Object Files (Informative)



                     Table F.1: Unit attributes by unit kind
______________________________________________________________________________
                              |                  Unit Kind
                              |
                              |Conventional         Skeleton and Split
                              |
 Attribute                    ||Full &  Type ||Skeleton  Split FullSplit Type

                              |Partial       |
______________________________|______________|________________________________##
_DW.AT.addr.base______________||_____________||_______________________________
                                 #
_DW.AT.base.types_____________||_____________||_______________________________
                                 #                #
_DW.AT.comp.dir_______________||_____________||_______________________________
                                                  #
_DW.AT.dwo.name_______________||_____________||_______________________________
                                 #                          #
_DW.AT.entry.pc_______________||_____________||_______________________________
                                 #                #
_DW.AT.high.pc________________||_____________||_______________________________
                                 #                          #
_DW.AT.identioer.case_________||_____________||_______________________________
                                 #       #                  #          #
_DW.AT.language.name__________||_____________||_______________________________
                                 #       #                  #          #
_DW.AT.language.version_______||_____________||_______________________________
                                 #                          #
_DW.AT.loclists.base__________||_____________||_______________________________
                                 #                #
_DW.AT.low.pc_________________||_____________||_______________________________
                                 #                          #
_DW.AT.macros_________________||_____________||_______________________________
                                 #                          #
_DW.AT.main.subprogram________||_____________||_______________________________
                                 #                          #
_DW.AT.name___________________||_____________||_______________________________
                                 #                          #
_DW.AT.producer_______________||_____________||_______________________________
                                 #                          #
_DW.AT.ranges_________________||_____________||_______________________________
                                 #                #         #
_DW.AT.rnglists.base__________||_____________||_______________________________
                                 #       #        #                    #
_DW.AT.stmt.list______________||_____________||_______________________________
                                 #       #        #         #
_DW.AT.str.ooesets____________||_____________||_______________________________
                                 #       #        #         #          #
_DW.AT.use.UTF8_______________||_____________||_______________________________



July 15 2024               ***WORKING DRAFT***                       Page 420
                      Appendix F. Split DWARF Object Files (Informative)



 1      F.2    Split DWARF Object File Example


 2      Consider the example source code in Figure F.1, Figure F.2 on the next *
 *page and

 3      Figure F.3 on page 423. When compiled with split DWARF, we will have two

 4      DWARF object oles, demo1.o and demo2.o, and two split DWARF object oles,

 5      demo1.dwo and demo2.dwo.


 6      In this section, we will use this example to show how the connections b*
 *etween

 7      the relocatable object ole and the split DWARF object ole are maintaine*
 *d through

 8      the linking process. In the next section, we will use this same example*
 * to show

 9      how two or more split DWARF object oles are combined into a DWARF packa*
 *ge

10      ole.



        File demo1.cc
       ________________________________________________________________________*
 *______|___|
       |||=====================================================================*
 *=====|||#include"demo.h"
       |||=====================================================================*
 *=====|||
       |||=====================================================================*
 *=====|||boolBox::contains(constPoint&p)const
       |||=====================================================================*
 *=====|||{
       |||=====================================================================*
 *=====|||return(p.x()>=ll_.x()&&p.x()<=ur_.x()&&
       |||=====================================================================*
 *=====|||p.y()>=ll_.y()&&p.y()<=ur_.y());
       |||=====================================================================*
 *=====|||}_|___|


                      Figure F.1: Split object example: source fragment #1



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 421
               Appendix F. Split DWARF Object Files (Informative)



 File demo2.cc
______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|#include"demo.h"
|||==========================================================================|||
|||==========================================================================||*
 *|boolLine::clip(constBox&b)
|||==========================================================================||*
 *|{
|||==========================================================================||*
 *|floatslope=(end_.y()-start_.y())/(end_.x()-start_.x());
|||==========================================================================||*
 *|while(1){
|||==========================================================================||*
 *|//Trivialacceptance.
|||==========================================================================||*
 *|if(b.contains(start_)&&b.contains(end_))returntrue;
|||==========================================================================|||
|||==========================================================================||*
 *|//Trivialrejection.
|||==========================================================================||*
 *|if(start_.x()<b.l()&&end_.x()<b.l())returnfalse;
|||==========================================================================||*
 *|if(start_.x()>b.r()&&end_.x()>b.r())returnfalse;
|||==========================================================================||*
 *|if(start_.y()<b.b()&&end_.y()<b.b())returnfalse;
|||==========================================================================||*
 *|if(start_.y()>b.t()&&end_.y()>b.t())returnfalse;
|||==========================================================================|||
|||==========================================================================||*
 *|if(b.contains(start_)){
|||==========================================================================||*
 *|//Swappointssothatstart_isoutsidetheclipping
|||==========================================================================||*
 *|//rectangle.
|||==========================================================================||*
 *|Pointtemp=start_;
|||==========================================================================||*
 *|start_=end_;
|||==========================================================================||*
 *|end_=temp;
|||==========================================================================||*
 *|}
|||==========================================================================|||
|||==========================================================================||*
 *|if(start_.x()<b.l())
|||==========================================================================||*
 *|start_=Point(b.l(),
|||==========================================================================||*
 *|start_.y()+(b.l()-start_.x())*slope);
|||==========================================================================||*
 *|elseif(start_.x()>b.r())
|||==========================================================================||*
 *|start_=Point(b.r(),
|||==========================================================================||*
 *|start_.y()+(b.r()-start_.x())*slope);
|||==========================================================================||*
 *|elseif(start_.y()<b.b())
|||==========================================================================||*
 *|start_=Point(start_.x()+(b.b()-start_.y())/slope,
|||==========================================================================||*
 *|b.b());
|||==========================================================================||*
 *|elseif(start_.y()>b.t())
|||==========================================================================||*
 *|start_=Point(start_.x()+(b.t()-start_.y())/slope,
|||==========================================================================||*
 *|b.t());
|||==========================================================================||*
 *|}
|||==========================================================================||*
 *|}_|___|


               Figure F.2: Split object example: source fragment #2



 July 15 2024               ***WORKING DRAFT***                       Page 422
               Appendix F. Split DWARF Object Files (Informative)



 File demo.h
______________________________________________________________________________|*
 *___|
|||==========================================================================||*
 *|classA{
|||==========================================================================||*
 *|public:
|||==========================================================================||*
 *|Point(floatx,floaty):x_(x),y_(y){}
|||==========================================================================||*
 *|floatx()const{returnx_;}
|||==========================================================================||*
 *|floaty()const{returny_;}
|||==========================================================================||*
 *|private:
|||==========================================================================||*
 *|floatx_;
|||==========================================================================||*
 *|floaty_;
|||==========================================================================||*
 *|};
|||==========================================================================|||
|||==========================================================================||*
 *|classLine{
|||==========================================================================||*
 *|public:
|||==========================================================================||*
 *|Line(Pointstart,Pointend):start_(start),end_(end){}
|||==========================================================================||*
 *|boolclip(constBox&b);
|||==========================================================================||*
 *|Pointstart()const{returnstart_;}
|||==========================================================================||*
 *|Pointend()const{returnend_;}
|||==========================================================================||*
 *|private:
|||==========================================================================||*
 *|Pointstart_;
|||==========================================================================||*
 *|Pointend_;
|||==========================================================================||*
 *|};
|||==========================================================================|||
|||==========================================================================||*
 *|classBox{
|||==========================================================================||*
 *|public:
|||==========================================================================||*
 *|Box(floatl,floatr,floatb,floatt):ll_(l,b),ur_(r,t){}
|||==========================================================================||*
 *|Box(Pointll,Pointur):ll_(ll),ur_(ur){}
|||==========================================================================||*
 *|boolcontains(constPoint&p)const;
|||==========================================================================||*
 *|floatl()const{returnll_.x();}
|||==========================================================================||*
 *|floatr()const{returnur_.x();}
|||==========================================================================||*
 *|floatb()const{returnll_.y();}
|||==========================================================================||*
 *|floatt()const{returnur_.y();}
|||==========================================================================||*
 *|private:
|||==========================================================================||*
 *|Pointll_;
|||==========================================================================||*
 *|Pointur_;
|||==========================================================================||*
 *|};_|___|


               Figure F.3: Split object example: source fragment #3



 July 15 2024               ***WORKING DRAFT***                       Page 423
                      Appendix F. Split DWARF Object Files (Informative)



 1      F.2.1   Contents of the Object Files


 2      The object oles each contain the following sections of debug informatio*
 *n:


 3        .debug_abbrev

 4        .debug_info

 5        .debug_line

 6        .debug_str

 7        .debug_addr

 8        .debug_names

 9        .debug_aranges


10      The .debug_abbrev section contains just a single entry describing the s*
 *keleton

11      compilation unit DIE.


12      The DWARF description in the .debug_info section contains just a single*
 * DIE,

13      the skeleton compilation unit, which may look like Figure F.4 following.

        _______________________________________________________________________*
 *_______||

        ||   DW_TAG_skeleton_unit                                              *
 *        ||
        ||       DW_AT_comp_dir: (reference to directory name in .debug_str)   *
 *        ||
        |        DW_AT_dwo_name: (reference to "demo1.dwo" in .debug_str)      *
 *        |
        ||       DW_AT_addr_base: (reference to .debug_addr section)           *
 *        ||
        |        DW_AT_stmt_list: (reference to .debug_line section)           *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |

                 Figure F.4: Split object example: skeleton DWARF description



14      The DW.AT.comp.dir and DW.AT.dwo.name attributes provide the location

15      of the corresponding split DWARF object ole that contains the full debug

16      information; that ole is normally expected to be in the same directory *
 *as the

17      object ole itself.


18      The dwo_id oeld in the header of the skeleton unit provides an ID or ke*
 *y for the

19      debug information contained in the DWARF object ole. This ID serves two

20      purposes: it can be used to verify that the debug information in the sp*
 *lit DWARF

21      object ole matches the information in the object ole, and it can be use*
 *d to ond the

22      debug information in a DWARF package ole.


23      The DW.AT.addr.base attribute contains the relocatable ooeset of this o*
 *bject

24      ole's contribution to the .debug_addr section.


25      The DW.AT.stmt.list attribute contains the relocatable ooeset of this o*
 *le's

26      contribution to the .debug_line table.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 424
                      Appendix F. Split DWARF Object Files (Informative)



 1      The .debug_line section contains the full line number table for the com*
 *piled

 2      code in the object ole. As shown in Figure F.1 on page 421, the line nu*
 *mber

 3      program header lists the two ole names, demo.h and demo1.cc, and contai*
 *ns line

 4      number programs for Box::contains, Point::x, and Point::y.


 5      The .debug_str section contains the strings referenced indirectly by the

 6      compilation unit DIE and by the line number program.


 7      The .debug_addr section contains relocatable addresses of locations in *
 *the

 8      loadable text and data that are referenced by debugging information ent*
 *ries in

 9      the split DWARF object. In the example in F.3 on page 423, demo1.o may *
 *have

10      three entries:


                           _Slot_Location_referenced______________

                              0   low PC value for Box::contains

                              1   low PC value for Point::x

                              2   low PC value for Point::y


11      The .debug_names section contains the names deoned by the debugging

12      information in the split DWARF object ole (see Section 6.1.1.1 on page *
 *142), and

13      references the skeleton compilation unit. When linked together into a o*
 *nal

14      executable, they can be used by a DWARF consumer to lookup a name to ond

15      one or more skeleton compilation units that provide information about t*
 *hat

16      name. From the skeleton compilation unit, the consumer can ond the split

17      DWARF object ole that it can then read to get the full DWARF informatio*
 *n.


18      The .debug_aranges section contains the PC ranges deoned in this compil*
 *ation

19      unit, and allow a DWARF consumer to map a PC value to a skeleton compil*
 *ation

20      unit, and then to a split DWARF object ole.



21      F.2.2   Contents of the Linked Executable File


22      When demo1.o and demo2.o are linked together (along with a main program*
 * and

23      other necessary library routines that we will ignore here for simplicit*
 *y), the

24      resulting executable ole will contain at least the two skeleton compila*
 *tion units

25      in the .debug_info section, as shown in Figure F.5 following.


26      Each skeleton compilation unit has a DW.AT.stmt.list attribute, which p*
 *rovides

27      the relocated ooeset to that compilation unit's contribution in the exe*
 *cutable's

28      .debug_line section. In this example, the line number information for d*
 *emo1.dwo

29      begins at ooeset 120, and for demo2.dwo, it begins at ooeset 200.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 425
                      Appendix F. Split DWARF Object Files (Informative)


        _______________________________________________________________________*
 *_______||||

        ||   DW_TAG_skeleton_unit                                              *
 *        ||
        ||       DW_AT_comp_dir: (reference to directory name in .debug_str)   *
 *        ||
        |        DW_AT_dwo_name: (reference to "demo1.dwo" in .debug_str)      *
 *        |
        ||       DW_AT_addr_base: 48 (offset in .debug_addr)                   *
 *        ||
        |        DW_AT_stmt_list: 120 (offset in .debug_line)                  *
 *        |
        ||   DW_TAG_skeleton_unit                                              *
 *        ||
        ||       DW_AT_comp_dir: (reference to directory name in .debug_str)   *
 *        ||
        |        DW_AT_dwo_name: (reference to "demo2.dwo" in .debug_str)      *
 *        |
        ||       DW_AT_addr_base: 80 (offset in .debug_addr)                   *
 *        ||
        |        DW_AT_stmt_list: 200 (offset in .debug_line)                  *
 *        |
        |                                                                      *
 *        |
        |______________________________________________________________________*
 *_______ |

                Figure F.5: Split object example: executable ole DWARF excerpts



 1      Each skeleton compilation unit also has a DW.AT.addr.base attribute, wh*
 *ich

 2      provides the relocated ooeset to that compilation unit's contribution i*
 *n the

 3      executable's .debug_addr section. Unlike the DW.AT.stmt.list attribute,*
 * the

 4      ooeset refers to the orst address table slot, not to the section header*
 *. In this

 5      example, we see that the orst address (slot 0) from demo1.o begins at o*
 *oeset 48.

 6      Because the .debug_addr section contains an 8-byte header, the object o*
 *le's

 7      contribution to the section actually begins at ooeset 40 (for a 64-bit *
 *DWARF object,

 8      the header would be 16 bytes long, and the value for the DW.AT.addr.base

 9      attribute would then be 56). All attributes in demo1.dwo that use

10      DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

11      DW.FORM.addrx3 or DW.FORM.addrx4 would then refer to address table

12      slots relative to that ooeset. Likewise, the .debug_addr contribution f*
 *rom

13      demo2.dwo begins at ooeset 72, and its orst address slot is at ooeset 8*
 *0. Because

14      these contributions have been processed by the linker, they contain rel*
 *ocated

15      values for the addresses in the program that are referred to by the deb*
 *ug

16      information.


17      The linked executable will also contain .debug_abbrev, .debug_str,

18      .debug_names and .debug_aranges sections, each the result of combining *
 *and

19      relocating the contributions from the relocatable object oles.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 426
                      Appendix F. Split DWARF Object Files (Informative)



 1      F.2.3   Contents of the Split DWARF Object Files


 2      The split DWARF object oles each contain the following sections:


 3        .debug_abbrev.dwo

 4        .debug_info.dwo (for the compilation unit)

 5        .debug_info.dwo (one COMDAT section for each type unit)

 6        .debug_loclists.dwo

 7        .debug_line.dwo

 8        .debug_macro.dwo

 9        .debug_rnglists.dwo

10        .debug_str_offsets.dwo

11        .debug_str.dwo


12      The .debug_abbrev.dwo section contains the abbreviation declarations fo*
 *r the

13      debugging information entries in the .debug_info.dwo section.


14      The .debug_info.dwo section containing the compilation unit contains th*
 *e full

15      debugging information for the compile unit, and looks much like a normal

16      .debug_info section in a non-split object ole, with the following excep*
 *tions:


17        #  The DW.TAG.compile.unit DIE does not need to repeat the

18           DW.AT.ranges, DW.AT.low.pc, DW.AT.high.pc, and DW.AT.stmt.list

19           attributes that are provided in the skeleton compilation unit.


20        #  References to strings in the string table use the form code DW.FOR*
 *M.strx,

21           DW.FORM.strx1, DW.FORM.strx2, DW.FORM.strx3 or

22           DW.FORM.strx4, referring to slots in the .debug_str_offsets.dwo

23           section.


24        #  References to relocatable addresses in the object ole use one of t*
 *he form

25           codes DW.FORM.addrx, DW.FORM.addrx1, DW.FORM.addrx2,

26           DW.FORM.addrx3 or DW.FORM.addrx4, referring to slots in the

27           .debug_addr table, relative to the base ooeset given by DW.AT.addr*
 *.base

28           in the skeleton compilation unit.


29      Figure F.6 following presents excerpts from the .debug_info.dwo section*
 * for

30      demo1.dwo.


31      In the deoning declaration for Box::contains at 5$, the DW.AT.low.pc

32      attribute is represented using DW.FORM.addrx, which refers to slot 0 in*
 * the

33      .debug_addr table from demo1.o. That slot contains the relocated addres*
 *s of the

34      beginning of the function.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 427
       |             Appendix F. Split DWARF Object Files (Informative)        *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       |                                                                       *
 *       |
       ______________________________________________________________________pa*
 *rt_1_of_2||||

       ||   DW_TAG_compile_unit                                                *
 *       ||
       |        DW_AT_producer [DW_FORM_strx]: (slot 15) (producer string)     *
 *       |
       ||       DW_AT_language_name: DW_LNAME_C_plus_plus                      *
 *       ||
       ||       DW_AT_name [DW_FORM_strx]: (slot 7) "demo1.cc"                 *
 *       ||
       |        DW_AT_comp_dir [DW_FORM_strx]: (slot 4) (directory name)       *
 *       |
       |1$:|    DW_TAG_class_type                                              *
 *       ||
       |           DW_AT_name [DW_FORM_strx]: (slot 12) "Point"                *
 *       |
       ||          DW_AT_signature [DW_FORM_ref_sig8]: 0x2f33248f03ff18ab      *
 *       ||
       ||          DW_AT_declaration: true                                     *
 *       ||
       |2$:         DW_TAG_subprogram                                          *
 *       |
       ||              DW_AT_external: true                                    *
 *       ||
       |               DW_AT_name [DW_FORM_strx]: (slot 12) "Point"            *
 *       |
       ||              DW_AT_decl_file: 1                                      *
 *       ||
       ||              DW_AT_decl_line: 5                                      *
 *       ||
       |               DW_AT_linkage_name [DW_FORM_strx]: (slot 16) "_ZN5PointC*
 *4Eff"  |
       ||              DW_AT_accessibility: DW_ACCESS_public                   *
 *       ||
       |               DW_AT_declaration: true                                 *
 *       |
       ||          ...                                                         *
 *       ||
       |3$:     DW_TAG_class_type                                              *
 *       |
       ||          DW_AT_name [DW_FORM_string]: "Box"                          *
 *       ||
       ||          DW_AT_signature [DW_FORM_ref_sig8]: 0xe97a3917c5a6529b      *
 *       ||
       |           DW_AT_declaration: true                                     *
 *       |
       ||         ...                                                          *
 *       ||
       |4$:         DW_TAG_subprogram                                          *
 *       |
       ||              DW_AT_external: true                                    *
 *       ||
       ||              DW_AT_name [DW_FORM_strx]: (slot 0) "contains"          *
 *       ||
       |               DW_AT_decl_file: 1                                      *
 *       |
       ||              DW_AT_decl_line: 28                                     *
 *       ||
       |               DW_AT_linkage_name [DW_FORM_strx: (slot 8)              *
 *       |
       ||                                              "_ZNK3Box8containsERK5Po*
 *int"   ||
       ||              DW_AT_type: (reference to 7$)                           *
 *       ||
       |               DW_AT_accessibility: DW_ACCESS_public                   *
 *       |
       ||              DW_AT_declaration: true                                 *
 *       ||
       |          ...                                                          *
 *       |
       |                                                                       *
 *       |
       |_______________________________________________________________________*
 *______ |

                     Figure F.6: Split object example: demo1.dwo excerpts



1      Each type unit is contained in its own COMDAT .debug_info.dwo section, a*
 *nd

2      looks like a normal type unit in a non-split object, except that the

3      DW.TAG.type.unit DIE contains a DW.AT.stmt.list attribute that refers to*
 * a

4      specialized .debug_line.dwo section. This section contains a normal line

5      number program header with a list of include directories and olenames, b*
 *ut no

6      line number program. This section is used only as a reference for olenam*
 *es

7      needed for DW.AT.decl.ole attributes within the type unit.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 428
              Appendix F. Split DWARF Object Files (Informative)


|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
|                                                                              |
|5$:   DW_TAG_subprogram                                                       |
||         DW_AT_specification: (reference to 4$)                              *
 *||
|          DW_AT_decl_file: 2                                                  |
||         DW_AT_decl_line: 3                                                  *
 *||
||         DW_AT_low_pc [DW_FORM_addrx]: (slot 0)                              *
 *||
|          DW_AT_high_pc [DW_FORM_data8]: 0xbb                                 |
||         DW_AT_frame_base: DW_OP_call_frame_cfa                              *
 *||
|          DW_AT_object_pointer: (reference to 6$)                             |
|6$:|      DW_TAG_formal_parameter                                             *
 *||
||            DW_AT_name [DW_FORM_strx]: (slot 13): "this"                     *
 *||
|             DW_AT_type: (reference to 8$)                                    |
||            DW_AT_artificial: true                                           *
 *||
|             DW_AT_location: DW_OP_fbreg(-24)                                 |
||         DW_TAG_formal_parameter                                             *
 *||
||            DW_AT_name [DW_FORM_string]: "p"                                 *
 *||
|             DW_AT_decl_file: 2                                               |
||            DW_AT_decl_line: 3                                               *
 *||
|             DW_AT_type: (reference to 11$)                                   |
||            DW_AT_location: DW_OP_fbreg(-32)                                 *
 *||
||     ...                                                                     *
 *||
|7$:   DW_TAG_base_type                                                        |
||         DW_AT_byte_size: 1                                                  *
 *||
|          DW_AT_encoding: DW_ATE_boolean                                      |
||         DW_AT_name [DW_FORM_strx]: (slot 5) "bool"                          *
 *||
|      ...                                                                     |
|8$:|  DW_TAG_const_type                                                       *
 *||
||         DW_AT_type: (reference to 9$)                                       *
 *||
|9$:   DW_TAG_pointer_type                                                     |
||         DW_AT_byte_size: 8                                                  *
 *||
|          DW_AT_type: (reference to 10$)                                      |
|10$:| DW_TAG_const_type                                                       *
 *||
||         DW_AT_type: (reference to 3$)                                       *
 *||
|      ...                                                                     |
|11$:| DW_TAG_const_type                                                       *
 *||
|          DW_AT_type: (reference to 12$)                                      |
|12$:| DW_TAG_reference_type                                                   *
 *||
||         DW_AT_byte_size: 8                                                  *
 *||
|          DW_AT_type: (reference to 13$)                                      |
|13$:| DW_TAG_const_type                                                       *
 *||
|          DW_AT_type: (reference to 1$)                                       |
||_____...____________________________________________________________________ *
 *||


     Figure F.6: Split object example: demo1.dwo DWARF excerpts (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 429
                      Appendix F. Split DWARF Object Files (Informative)



 1      The .debug_str_offsets.dwo section contains an entry for each unique st*
 *ring in

 2      the string table. Each entry in the table is the ooeset of the string, *
 *which is

 3      contained in the .debug_str.dwo section.


 4      In a split DWARF object ole, all references to strings go through this *
 *table (there

 5      are no other ooesets to .debug_str.dwo in a split DWARF object ole). Th*
 *at is,

 6      there is no use of DW.FORM.strp in a split DWARF object ole.


 7      The ooesets in these slots have no associated relocations, because they*
 * are not part

 8      of a relocatable object ole. When combined into a DWARF package ole, ho*
 *wever,

 9      each slot must be adjusted to refer to the appropriate ooeset within th*
 *e merged

10      string table (.debug_str.dwo). The tool that builds the DWARF package o*
 *le must

11      understand the structure of the .debug_str_offsets.dwo section in order*
 * to

12      apply the necessary adjustments. Section F.3 on page 434 presents an ex*
 *ample of

13      a DWARF package ole.


14      The .debug_rnglists.dwo section contains range lists referenced by any

15      DW.AT.ranges attributes in the split DWARF object. In our example, demo*
 *1.o

16      would have just a single range list for the compilation unit, with rang*
 *e list entries

17      for the function Box::contains and for out-of-line copies of the inline*
 * functions

18      Point::x and Point::y.


19      The .debug_loclists.dwo section contains the value lists and location l*
 *ists

20      referenced by DW.AT.location attributes in the .debug_info.dwo section.*
 * This

21      section has a similar format to the .debug_loclists section in a non-sp*
 *lit object,

22      but the section has some small dioeerences as explained in Section 7.7.*
 *3 on

23      page 235.


24      In demo2.dwo as shown in Figure F.7 on the following page, the debugging

25      information for Line::clip starting at 2$ describes a local variable sl*
 *ope at 7$

26      whose location varies based on the PC. Figure F.8 on page 433 presents *
 *some

27      excerpts from the .debug_info.dwo section for demo2.dwo.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 430
              Appendix F. Split DWARF Object Files (Informative)



______________________________________________________________________part_1_of*
 *_2||||

|1$:|DW_TAG_class_type                                                         *
 *||
||       DW_AT_name [DW_FORM_strx]: (slot 20) "Line"                           *
 *||
|        DW_AT_signature [DW_FORM_ref_sig8]: 0x79c7ef0eae7375d1                |
||       DW_AT_declaration: true                                               *
 *||
|        ...                                                                   |
|2$:|    DW_TAG_subprogram                                                     *
 *||
||          DW_AT_external: true                                               *
 *||
|           DW_AT_name [DW_FORM_strx]: (slot 19) "clip"                        |
||          DW_AT_decl_file: 2                                                 *
 *||
|           DW_AT_decl_line: 16                                                |
||          DW_AT_linkage_name [DW_FORM_strx]: (slot 2) "_ZN4Line4clipERK3Box" *
 *||
||          DW_AT_type: (reference to DIE for bool)                            *
 *||
|           DW_AT_accessibility: DW_ACCESS_public                              |
||          DW_AT_declaration: true                                            *
 *||
|        ...                                                                   |
|                                                                              |
|_____________________________________________________________________________ |

 Figure F.7: Split object example: demo2.dwo DWARF .debug_info.dwo excerpts



July 15 2024               ***WORKING DRAFT***                       Page 431
              Appendix F. Split DWARF Object Files (Informative)



|                                                                              |
|                                                                              |
______________________________________________________________________part_2_of*
 *_2||||
|                                                                              |
|3$:   DW_TAG_subprogram                                                       |
||         DW_AT_specification: (reference to 2$)                              *
 *||
||         DW_AT_decl_file: 1                                                  *
 *||
|          DW_AT_decl_line: 3                                                  |
||         DW_AT_low_pc [DW_FORM_addrx]: (slot 32)                             *
 *||
|          DW_AT_high_pc [DW_FORM_data8]: 0x1ec                                |
||         DW_AT_frame_base: DW_OP_call_frame_cfa                              *
 *||
||         DW_AT_object_pointer: (reference to 4$)                             *
 *||
|4$:       DW_TAG_formal_parameter                                             |
||            DW_AT_name: (indexed string: 0x11): this                         *
 *||
|             DW_AT_type: (reference to DIE for type const Point* const)       |
||            DW_AT_artificial: 1                                              *
 *||
|             DW_AT_location: 0x0 (location list)                              |
|5$:|      DW_TAG_formal_parameter                                             *
 *||
||            DW_AT_name: b                                                    *
 *||
|             DW_AT_decl_file: 1                                               |
||            DW_AT_decl_line: 3                                               *
 *||
|             DW_AT_type: (reference to DIE for type const Box& const)         |
||            DW_AT_location [DW_FORM_sec_offset]: 0x2a                        *
 *||
|6$:|      DW_TAG_lexical_block                                                *
 *||
|             DW_AT_low_pc [DW_FORM_addrx]: (slot 17)                          |
||            DW_AT_high_pc: 0x1d5                                             *
 *||
|7$:          DW_TAG_variable                                                  |
||                DW_AT_name [DW_FORM_strx]: (slot 28): "slope"                *
 *||
||                DW_AT_decl_file: 1                                           *
 *||
|                 DW_AT_decl_line: 5                                           |
||                DW_AT_type: (reference to DIE for type float)                *
 *||
|                 DW_AT_location [DW_FORM_sec_offset]: 0x49                    |
|                                                                              |
|_____________________________________________________________________________ |

 Figure F.7: Split object example: demo2.dwo DWARF .debug_info.dwo excerpts

                                 (concluded)



July 15 2024               ***WORKING DRAFT***                       Page 432
                      Appendix F. Split DWARF Object Files (Informative)



 1      In Figure F.7 on page 431, the DW.TAG.formal.parameter entries at 4$ an*
 *d 5$

 2      refer to the location lists at ooeset 0x0 and 0x2a, respectively, and t*
 *he

 3      DW.TAG.variable entry for slope refers to the location list at ooeset 0*
 *x49. Figure

 4      F.8 shows a representation of the location lists at those ooesets in the

 5      .debug_loclists.dwo|section.|                                          *
 *        ||
        |                                                                      *
 *        |
        _______________________________________________________________________*
 *_______||

        ||            Entry type        Range        Counted Location Descripti*
 *on      ||

        ||       _ooeset(DW.LLE.*)_||start_length_||lengthexpression___________*
 *        ||
        |                           |            |                             *
 *        |
        ||                          |            |                             *
 *        ||
        |          0x00  start.length [||9]0x002f ||0x01 DW.OP.reg5 (rdi)      *
 *        |

        ||         0x09  start.length[1||1]0x01b9 ||0x01 DW.OP.reg3 (rbx)      *
 *        ||

        ||         0x12  start.length[2||9]0x0003 ||0x03 DW.OP.breg12 (r12): -8*
 *;       ||
        |                           |            |                             *
 *        |
        |                           |            |       DW.OP.stack.value     *
 *        |
        ||         0x1d  start.length[3||1]0x0001 ||0x03 DW.OP.entry.value:    *
 *        ||
        |                           |            |                             *
 *        |
        |                           |            |       (DW.OP.reg5 (rdi));   *
 *        |
        |                           |            |                             *
 *        |
        |                           |            |       DW.OP.stack.value     *
 *        |
        ||         0x29  end.of.list   ||        ||                            *
 *        ||

        ||         ~~               ||           ||                            *
 *        ||

        ||         0x2a  start.length [||9]0x002f ||0x01 DW.OP.reg4 (rsi))     *
 *        ||

        ||         0x33  start.length[1||1]0x01ba ||0x03 DW.OP.reg6 (rbp))     *
 *        ||

        ||         0x3c  start.length[3||0]0x0003 ||0x03 DW.OP.entry.value:    *
 *        ||
        |                           |            |                             *
 *        |
        |                           |            |       (DW.OP.reg4 (rsi));   *
 *        |
        |                           |            |                             *
 *        |
        |                           |            |       DW.OP.stack.value     *
 *        |
        ||         0x48  end.of.list   ||        ||                            *
 *        ||

        ||         ~~               ||           ||                            *
 *        ||

        ||         0x49  start.length[1||0]0x0004 ||0x01 DW.OP.reg18 (xmm1)    *
 *        ||

        ||         0x52  start.length[1||1]0x01bd ||0x02 DW.OP.fbreg: -36      *
 *        ||

        |          0x5c  end.of.list   ||        ||                            *
 *        |
        ||                          |            |                             *
 *        ||
        |___________________________|____________|_____________________________*
 *_______ |

        Figure F.8:  Split object example:  demo2.dwo DWARF .debug_loclists.dwo

        excerpts



 6      In each DW.LLE.start.length entry, the start oeld is the index of a slo*
 *t in the

 7      .debug_addr section, relative to the base ooeset deoned by the compilat*
 *ions unit's

 8      DW.AT.addr.base attribute. The .debug_addr slots referenced by these en*
 *tries

 9      give the relocated address of a label within the function where the add*
 *ress range

10      begins. The following length oeld gives the length of the address range*
 *. The

11      location, consisting of its own length and a DWARF expression, is last.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 433
                      Appendix F. Split DWARF Object Files (Informative)



 1      F.3    DWARF Package File Example


 2      A DWARF package ole (see Section 7.3.5 on page 197) is a collection of *
 *split

 3      DWARF object oles. In general, it will be much smaller than the sum of *
 *the split

 4      DWARF object oles, because the packaging process removes duplicate type*
 * units

 5      and merges the string tables. Aside from those two optimizations, howev*
 *er, each

 6      compilation unit and each type unit from a split DWARF object ole is co*
 *pied

 7      verbatim into the package ole.


 8      The package ole contains the same set of sections as a split DWARF obje*
 *ct ole,

 9      plus two additional sections described below.


10      The packaging utility, like a linker, combines sections of the same nam*
 *e by

11      concatenation. While a split DWARF object may contain multiple

12      .debug_info.dwo sections, one for the compilation unit, and one for eac*
 *h type

13      unit, a package ole contains a single .debug_info.dwo section. The comb*
 *ined

14      .debug_info.dwo section contains each compilation unit and one copy of *
 *each

15      type unit (discarding any duplicate type signatures).


16      As part of merging the string tables, the packaging utility treats the

17      .debug_str.dwo and .debug_str_offsets.dwo sections specially. Rather th*
 *an

18      combining them by simple concatenation, it instead builds a new string *
 *table

19      consisting of the unique strings from each input string table. Because *
 *all

20      references to these strings use form DW.FORM.strx, the packaging utilit*
 *y only

21      needs to adjust the string ooesets in each .debug_str_offsets.dwo contr*
 *ibution

22      after building the new .debug_str.dwo section.


23      Each compilation unit or type unit consists of a set of inter-related c*
 *ontributions

24      to each section in the package ole. For example, a compilation unit may*
 * have

25      contributions in .debug_info.dwo, .debug_abbrev.dwo, .debug_line.dwo,

26      .debug_str_offsets.dwo, and so on. In order to maintain the ability for*
 * a

27      consumer to follow references between these sections, the package ole c*
 *ontains

28      two additional sections: a compilation unit (CU) index, and a type unit*
 * (TU)

29      index. These indexes allow a consumer to look up a compilation unit (by*
 * its

30      compilation unit ID) or a type unit (by its type unit signature), and l*
 *ocate each

31      contribution that belongs to that unit.


32      For example, consider a package ole, demo.dwp, formed by combining demo*
 *1.dwo

33      and demo2.dwo from the previous example (see Appendix F.2 on page 421).*
 * For

34      an executable ole named "demo" (or "demo.exe"), a debugger would typica*
 *lly

35      expect to ond demo.dwp in the same directory as the executable ole. The*
 * resulting

36      package ole would contain the sections shown in Figure F.9 on the follo*
 *wing

37      page, with contributions from each input ole as shown.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 434
                      Appendix F. Split DWARF Object Files (Informative)


            ___________________________________________________________________*
 *__
            _Section__________________||Source_of_section_contributions________*
 *__

             .debug_abbrev.dwo        ||.debug_abbrev.dwo from demo1.dwo
                                      |.debug_abbrev.dwo from demo2.dwo
            __________________________|________________________________________*
 *__
                                      |
                                      |compilation unit from demo1.dwo
             .debug_info.dwo          ||compilation unit from demo2.dwo

             (for the compilation     ||type unit for class Box from demo1.dwo

             units and type units)    ||type unit for class Point from demo1.dwo
                                      |type unit for class Line from demo2.dwo
            __________________________|________________________________________*
 *__
             .debug_rnglists.dwo      ||.debug_rnglists.dwo from demo1.dwo
                                      |.debug_rnglists.dwo from demo2.dwo
            __________________________|________________________________________*
 *__
             .debug_loclists.dwo      ||.debug_loclists.dwo from demo1.dwo
                                      |.debug_loclists.dwo from demo2.dwo
            __________________________|________________________________________*
 *__
             .debug_line.dwo          ||.debug_line.dwo from demo1.dwo
                                      |.debug_line.dwo from demo2.dwo
            __________________________|________________________________________*
 *__
                                      |
                                      |.debug_str_offsets.dwo from demo1.dwo,
             .debug_str_offsets.dwo   ||  adjusted
                                      |
                                      |.debug_str_offsets.dwo from demo2.dwo,
                                      |   adjusted
            __________________________|________________________________________*
 *__
             .debug_str.dwo           ||merged string table generated by package
                                      |utility
            __________________________|________________________________________*
 *__
            _.debug_cu_index__________||CU_index_generated_by_package_utility__*
 *__

            _.debug_tu_index__________||TU_index_generated_by_package_utility__*
 *__


             Figure F.9: Sections and contributions in example package ole demo*
 *.dwp



 1      The .debug_abbrev.dwo, .debug_rnglists.dwo, .debug_loclists.dwo and

 2      .debug_line.dwo sections are copied over from the two .dwo oles as indi*
 *vidual

 3      contributions to the corresponding sections in the .dwp ole. The ooeset*
 * of each

 4      contribution within the combined section and the size of each contribut*
 *ion is

 5      recorded as part of the CU and TU index sections.


 6      The .debug_info.dwo sections corresponding to each compilation unit are*
 * copied

 7      as individual contributions to the combined .debug_info.dwo section, an*
 *d one

 8      copy of each type unit is also copied. The type units for class Box and*
 * class Point,

 9      for example, are contained in both demo1.dwo and demo2.dwo, but only one

10      instance of each is copied into the package ole.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 435
                      Appendix F. Split DWARF Object Files (Informative)



 1      The .debug_str.dwo sections from each ole are merged to form a new stri*
 *ng

 2      table with no duplicates, requiring the adjustment of all references to*
 * those

 3      strings. The .debug_str_offsets.dwo sections from the .dwo oles are cop*
 *ied as

 4      individual contributions, but the string table ooeset in each slot of t*
 *hose

 5      contributions is adjusted to point to the correct ooeset in the merged *
 *string table.


 6      The .debug_cu_index and .debug_tu_index sections provide a directory to*
 * these

 7      contributions. Figure F.10 following shows an example CU index section

 8      containing the two compilation units from demo1.dwo and demo2.dwo. The *
 *CU

 9      index shows that for the compilation unit from demo1.dwo, with compilat*
 *ion unit

10      ID 0x044e413b8a2d1b8f, its contribution to the .debug_info.dwo section *
 *begins

11      at ooeset 0, and is 325 bytes long. For the compilation unit from demo2*
 *.dwo, with

12      compilation unit ID 0xb5f0ecf455e7e97e, its contribution to the

13      .debug_info.dwo section begins at ooeset 325, and is 673 bytes long.


14      Likewise, we can ond the contributions to the related sections. In Figu*
 *re F.8 on

15      page 433, we see that the DW.TAG.variable DIE at 7$ has a reference to a

16      location list at ooeset 0x49 (decimal 73). Because this is part of the *
 *compilation

17      unit for demo2.dwo, with unit signature 0xb5f0ecf455e7e97e, we see that*
 * its

18      contribution to .debug_loclists.dwo begins at ooeset 84, so the locatio*
 *n list from

19      Figure F.8 on page 433 can be found in demo.dwp at ooeset 157 (84 + 73)*
 * in the

20      combined .debug_loclists.dwo section.


21      Figure F.11 following shows an example TU index section containing the *
 *three

22      type units for classes Box, Point, and Line. Each type unit contains co*
 *ntributions

23      from .debug_info.dwo, .debug_abbrev.dwo, .debug_line.dwo and

24      .debug_str_offsets.dwo. In this example, the type units for classes Box*
 * and

25      Point come from demo1.dwo, and share the abbreviations table, line numb*
 *er

26      table, and string ooesets table with the compilation unit from demo1.dw*
 *o.

27      Likewise, the type unit for class Line shares tables from demo2.dwo.


28      The sharing of these tables between compilation units and type units is*
 * typical

29      for some implementations, but is not required by the DWARF standard.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 436
              Appendix F. Split DWARF Object Files (Informative)



     ________________________Section_header____________________________



      Version:                      5

      Number of columns:            6

      Number of used entries:       2

      Number of slots:             16



     _________________________Ooeset_table_____________________________

      slot             signature  info abbrev   loc  line str.ooe rng



      14    0xb5f0ecf455e7e97e    325      452  84    52      72  350

      15    0x044e413b8a2d1b8f      0        0    0    0       0     0



     __________________________Size_table______________________________

      slot                        info abbrev   loc  line str.ooe rng



      14                          673      593  93    52     120    34

      15                          325      452  84    52      72    15


     __________________________________________________________________

                    Figure F.10: Example CU index section



July 15 2024               ***WORKING DRAFT***                       Page 437
              Appendix F. Split DWARF Object Files (Informative)



          _____________________Section_header_____________________



           Version:                       5

           Number of columns:             4

           Number of used entries:        3

           Number of slots:              32



          _______________________Ooeset_table_____________________

           slot             signature  info  abbrev  line  str.ooe



           11    0x2f33248f03ff18ab    1321       0     0       0

           17    0x79c7ef0eae7375d1    1488     452    52      72

           27    0xe97a3917c5a6529b     998       0     0       0



          ________________________Size_table______________________

           slot                        info  abbrev  line  str.ooe



           11                           167     452    52      72

           17                           217     593    52     120

           27                           323     452    52      72


          ________________________________________________________

                    Figure F.11: Example TU index section



July 15 2024               ***WORKING DRAFT***                       Page 438
              Appendix F. Split DWARF Object Files (Informative)



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 439




 1      Appendix G



 2      DWARF Section Version Numbers



 3      (Informative)



 4      Most DWARF sections have a version number in the section header. This v*
 *ersion

 5      number is not tied to the DWARF standard revision numbers, but instead *
 *is

 6      incremented when incompatible changes to that section are made. The DWA*
 *RF

 7      standard that a producer is following is not explicitly encoded in the *
 *ole. Version

 8      numbers in the section headers are represented as two-byte unsigned int*
 *egers.


 9      Table G.1 on the next page shows what version numbers are in use for ea*
 *ch

10      section. In that table:


11        #  iV2j means DWARF Version 2, published July 27, 1993.


12        #  iV3j means DWARF Version 3, published December 20, 2005.


13        #  iV4j means DWARF Version 4, published June 10, 2010.


14        #  iV5j means DWARF Version 5, published February 13, 2017.


15        #  iV6j means DWARF Version 61, published !to be determined?.


16      There are sections with no version number encoded in them; they are only

17      accessed via the .debug_info sections and so an incompatible change in *
 *those

18      sections' format would be represented by a change in the .debug_info se*
 *ction

19      version number.
        _______________________________
           1Higher numbers are reserved for future use.



        July 15 2024               ***WORKING DRAFT***                       Pa*
 *ge 440
              Appendix G. Section Version Numbers (Informative)



                     Table G.1: Section version numbers
             ____________________________________________________
             _Section_Name______________V2___V3___V4___V5___V6___

              .debug_abbrev              *    *    *    *   *

              .debug_addr                -    -    -    5   5

              .debug_aranges             2    2    2    2   2

              .debug_frame2              1    3    4    4   4

              .debug_info                2    3    4    5   5

              .debug_line                2    3    4    5   6

              .debug_line_str            -    -    -    *   *

              .debug_loc                 *    *    *    -    -

              .debug_loclists            -    -    -    5   5

              .debug_macinfo             *    *    *    -    -

              .debug_macro               -    -    -    5   5

              .debug_names               -    -    -    5   6

              .debug_pubnames            2    2    2    -    -

              .debug_pubtypes            -    2    2    -    -

              .debug_ranges              -    *    *    -    -

              .debug_rnglists            -    -    -    5   5

              .debug_str                 *    *    *    *   *

              .debug_str_offsets         -    -    -    5   5

              .debug_sup                 -    -    -    5   5

              .debug_types               -    -    4    -    -



                             (split object sections)

              .debug_abbrev.dwo          -    -    -    *   *

              .debug_info.dwo            -    -    -    5   5

              .debug_line.dwo            -    -    -    5   5

              .debug_loclists.dwo        -    -    -    5   5

              .debug_macro.dwo           -    -    -    5   5

              .debug_rnglists.dwo        -    -    -    5   5

              .debug_str.dwo             -    -    -    *   *

             _.debug_str_offsets.dwo_____-____-____-____5___5____

              Continued on next page
_______________________________
   2For the .debug_frame section, version 2 is unused.



July 15 2024               ***WORKING DRAFT***                       Page 441
                     Appendix G. Section Version Numbers (Informative)



                    _Section_Name______________V2___V3__V4___V5___V6____



                                    (package ole sections)

                     .debug_cu_index            -    -   -    5    6

                    _.debug_tu_index____________-____-____-____5___6____



1      Notes:


2        #  i*j means that a version number is not applicable (the section does*
 * not

3           include a header or the section's header does not include a version*
 *).


4        #  i-j means that the section was not deoned in that version of the DW*
 *ARF

5           standard.


6        #  The version numbers for corresponding .debug.!kind? and

7           .debug.!kind?.dwo sections are the same.



       July 15 2024               ***WORKING DRAFT***                       Pag*
 *e 442
              Appendix G. Section Version Numbers (Informative)



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 443




Appendix H



GNU Free Documentation License



                        Version 1.3, 3 November 2008


     Copyright #2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.


                               http://fsf.org/



Everyone is permitted to copy and distribute verbatim copies of this license

document, but changing it is not allowed.



PREAMBLE

The purpose of this License is to make a manual, textbook, or other functional

and useful document ifreej in the sense of freedom: to assure everyone the

eoeective freedom to copy and redistribute it, with or without modifying it, ei*
 *ther

commercially or noncommercially. Secondarily, this License preserves for the

author and publisher a way to get credit for their work, while not being

considered responsible for modiocations made by others.


This License is a kind of icopyleft,j which means that derivative works of the

document must themselves be free in the same sense. It complements the GNU

General Public License, which is a copyleft license designed for free software.


We have designed this License in order to use it for manuals for free software,

because free software needs free documentation: a free program should come

with manuals providing the same freedoms that the software does. But this

License is not limited to software manuals; it can be used for any textual work,

regardless of subject matter or whether it is published as a printed book. We

recommend this License principally for works whose purpose is instruction or

reference.



July 15 2024               ***WORKING DRAFT***                       Page 444
                Appendix H. GNU Free Documentation License



H.1     APPLICABILITY AND DEFINITIONS


This License applies to any manual or other work, in any medium, that contains

a notice placed by the copyright holder saying it can be distributed under the

terms of this License. Such a notice grants a world-wide, royalty-free license,

unlimited in duration, to use that work under the conditions stated herein. The

iDocumentj, below, refers to any such manual or work. Any member of the

public is a licensee, and is addressed as iyou.j You accept the license if you *
 *copy,

modify or distribute the work in a way requiring permission under copyright

law.


A iModioed Versionj of the Document means any work containing the

Document or a portion of it, either copied verbatim, or with modiocations

and/or translated into another language.


A iSecondary Sectionj is a named appendix or a front-matter section of the

Document that deals exclusively with the relationship of the publishers or

authors of the Document to the Document's overall subject (or to related matter*
 *s)

and contains nothing that could fall directly within that overall subject. (Thu*
 *s, if

the Document is in part a textbook of mathematics, a Secondary Section may not

explain any mathematics.) The relationship could be a matter of historical

connection with the subject or with related matters, or of legal, commercial,

philosophical, ethical or political position regarding them.


The iInvariant Sectionsj are certain Secondary Sections whose titles are

designated, as being those of Invariant Sections, in the notice that says that *
 *the

Document is released under this License. If a section does not ot the above

deonition of Secondary then it is not allowed to be designated as Invariant. The

Document may contain zero Invariant Sections. If the Document does not

identify any Invariant Sections then there are none.


The iCover Textsj are certain short passages of text that are listed, as

Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document

is released under this License. A Front-Cover Text may be at most 5 words, and a

Back-Cover Text may be at most 25 words.


A iTransparentj copy of the Document means a machine-readable copy,

represented in a format whose speciocation is available to the general public,

that is suitable for revising the document straightforwardly with generic text

editors or (for images composed of pixels) generic paint programs or (for

drawings) some widely available drawing editor, and that is suitable for input *
 *to

text formatters or for automatic translation to a variety of formats suitable f*
 *or

input to text formatters. A copy made in an otherwise Transparent ole format

whose markup, or absence of markup, has been arranged to thwart or



July 15 2024               ***WORKING DRAFT***                       Page 445
                Appendix H. GNU Free Documentation License



discourage subsequent modiocation by readers is not Transparent. An image

format is not Transparent if used for any substantial amount of text. A copy th*
 *at

is not iTransparentj is called iOpaque.j


Examples of suitable formats for Transparent copies include plain ASCII without

markup, Texinfo input format, LaTeX input format, SGML or XML using a

publicly available DTD, and standard-conforming simple HTML, PostScript or

PDF designed for human modiocation. Examples of transparent image formats

include PNG, XCF and JPG. Opaque formats include proprietary formats that

can be read and edited only by proprietary word processors, SGML or XML for

which the DTD and/or processing tools are not generally available, and the

machine-generated HTML, PostScript or PDF produced by some word

processors for output purposes only.


The iTitle Pagej means, for a printed book, the title page itself, plus such

following pages as are needed to hold, legibly, the material this License requi*
 *res

to appear in the title page. For works in formats which do not have any title p*
 *age

as such, iTitle Pagej means the text near the most prominent appearance of the

work's title, preceding the beginning of the body of the text.


The ipublisherj means any person or entity that distributes copies of the

Document to the public.


A section iEntitled XYZj means a named subunit of the Document whose title

either is precisely XYZ or contains XYZ in parentheses following text that

translates XYZ in another language. (Here XYZ stands for a specioc section name

mentioned below, such as iAcknowledgements,j iDedications,j

iEndorsements,j or iHistory.j) To iPreserve the Titlej of such a section when

you modify the Document means that it remains a section iEntitled XYZj

according to this deonition.


The Document may include Warranty Disclaimers next to the notice which states

that this License applies to the Document. These Warranty Disclaimers are

considered to be included by reference in this License, but only as regards

disclaiming warranties: any other implication that these Warranty Disclaimers

may have is void and has no eoeect on the meaning of this License.



H.2     VERBATIM COPYING


You may copy and distribute the Document in any medium, either commercially

or noncommercially, provided that this License, the copyright notices, and the

license notice saying this License applies to the Document are reproduced in all

copies, and that you add no other conditions whatsoever to those of this Licens*
 *e.



July 15 2024               ***WORKING DRAFT***                       Page 446
                Appendix H. GNU Free Documentation License



You may not use technical measures to obstruct or control the reading or further

copying of the copies you make or distribute. However, you may accept

compensation in exchange for copies. If you distribute a large enough number of

copies you must also follow the conditions in section H.3.


You may also lend copies, under the same conditions stated above, and you may

publicly display copies.



H.3     COPYING IN QUANTITY


If you publish printed copies (or copies in media that commonly have printed

covers) of the Document, numbering more than 100, and the Document's license

notice requires Cover Texts, you must enclose the copies in covers that carry,

clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cove*
 *r,

and Back-Cover Texts on the back cover. Both covers must also clearly and

legibly identify you as the publisher of these copies. The front cover must

present the full title with all words of the title equally prominent and visibl*
 *e. You

may add other material on the covers in addition. Copying with changes limited

to the covers, as long as they preserve the title of the Document and satisfy t*
 *hese

conditions, can be treated as verbatim copying in other respects.


If the required texts for either cover are too voluminous to ot legibly, you sh*
 *ould

put the orst ones listed (as many as ot reasonably) on the actual cover, and

continue the rest onto adjacent pages.


If you publish or distribute Opaque copies of the Document numbering more

than 100, you must either include a machine-readable Transparent copy along

with each Opaque copy, or state in or with each Opaque copy a

computer-network location from which the general network-using public has

access to download using public-standard network protocols a complete

Transparent copy of the Document, free of added material. If you use the latter

option, you must take reasonably prudent steps, when you begin distribution of

Opaque copies in quantity, to ensure that this Transparent copy will remain thus

accessible at the stated location until at least one year after the last time y*
 *ou

distribute an Opaque copy (directly or through your agents or retailers) of that

edition to the public.


It is requested, but not required, that you contact the authors of the Document

well before redistributing any large number of copies, to give them a chance to

provide you with an updated version of the Document.



July 15 2024               ***WORKING DRAFT***                       Page 447
                 Appendix H. GNU Free Documentation License



 H.4     MODIFICATIONS


 You may copy and distribute a Modioed Version of the Document under the

 conditions of sections H.2 and H.3 above, provided that you release the Modioed

 Version under precisely this License, with the Modioed Version olling the role*
 * of

 the Document, thus licensing distribution and modiocation of the Modioed

 Version to whoever possesses a copy of it. In addition, you must do these thin*
 *gs

 in the Modioed Version:


 A. Use in the Title Page (and on the covers, if any) a title distinct from tha*
 *t of the

    Document, and from those of previous versions (which should, if there were

    any, be listed in the History section of the Document). You may use the same

    title as a previous version if the original publisher of that version gives

    permission.


 B. List on the Title Page, as authors, one or more persons or entities respons*
 *ible

    for authorship of the modiocations in the Modioed Version, together with at

    least ove of the principal authors of the Document (all of its principal au*
 *thors,

    if it has fewer than ove), unless they release you from this requirement.


 C. State on the Title page the name of the publisher of the Modioed Version, as

    the publisher.


 D. Preserve all the copyright notices of the Document.


 E. Add an appropriate copyright notice for your modiocations adjacent to the

    other copyright notices.


 F. Include, immediately after the copyright notices, a license notice giving t*
 *he

    public permission to use the Modioed Version under the terms of this

    License, in the form shown in the Addendum below.


 G. Preserve in that license notice the full lists of Invariant Sections and re*
 *quired

    Cover Texts given in the Document's license notice.


H.  Include an unaltered copy of this License.


  I.Preserve the section Entitled iHistory,j Preserve its Title, and add to it *
 *an

    item stating at least the title, year, new authors, and publisher of the Mo*
 *dioed

    Version as given on the Title Page. If there is no section Entitled iHistor*
 *yj in

    the Document, create one stating the title, year, authors, and publisher of*
 * the

    Document as given on its Title Page, then add an item describing the

    Modioed Version as stated in the previous sentence.


  J.Preserve the network location, if any, given in the Document for public acc*
 *ess

    to a Transparent copy of the Document, and likewise the network locations



 July 15 2024               ***WORKING DRAFT***                       Page 448
                 Appendix H. GNU Free Documentation License



    given in the Document for previous versions it was based on. These may be

    placed in the iHistoryj section. You may omit a network location for a work

    that was published at least four years before the Document itself, or if the

    original publisher of the version it refers to gives permission.


 K. For any section Entitled iAcknowledgementsj or iDedicationsj, Preserve the

    Title of the section, and preserve in the section all the substance and ton*
 *e of

    each of the contributor acknowledgements and/or dedications given therein.


 L. Preserve all the Invariant Sections of the Document, unaltered in their text

    and in their titles. Section numbers or the equivalent are not considered p*
 *art

    of the section titles.


M.  Delete any section Entitled iEndorsementsj. Such a section may not be

    included in the Modioed Version.


N.  Do not retitle any existing section to be Entitled iEndorsementsj or to con*
 *AEict

    in title with any Invariant Section.


 O. Preserve any Warranty Disclaimers.


 If the Modioed Version includes new front-matter sections or appendices that

 qualify as Secondary Sections and contain no material copied from the

 Document, you may at your option designate some or all of these sections as

 invariant. To do this, add their titles to the list of Invariant Sections in t*
 *he

 Modioed Version's license notice. These titles must be distinct from any other

 section titles.


 You may add a section Entitled iEndorsements,j provided it contains nothing

 but endorsements of your Modioed Version by various parties~for example,

 statements of peer review or that the text has been approved by an organization

 as the authoritative deonition of a standard.


 You may add a passage of up to ove words as a Front-Cover Text, and a passage

 of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts *
 *in the

 Modioed Version. Only one passage of Front-Cover Text and one of Back-Cover

 Text may be added by (or through arrangements made by) any one entity. If the

 Document already includes a cover text for the same cover, previously added by

 you or by arrangement made by the same entity you are acting on behalf of, you

 may not add another; but you may replace the old one, on explicit permission

 from the previous publisher that added the old one.


 The author(s) and publisher(s) of the Document do not by this License give

 permission to use their names for publicity for or to assert or imply endorsem*
 *ent

 of any Modioed Version.



 July 15 2024               ***WORKING DRAFT***                       Page 449
                Appendix H. GNU Free Documentation License



H.5     COMBINING DOCUMENTS


You may combine the Document with other documents released under this

License, under the terms deoned in section H.5 above for modioed versions,

provided that you include in the combination all of the Invariant Sections of a*
 *ll

of the original documents, unmodioed, and list them all as Invariant Sections of

your combined work in its license notice, and that you preserve all their

Warranty Disclaimers.


The combined work need only contain one copy of this License, and multiple

identical Invariant Sections may be replaced with a single copy. If there are

multiple Invariant Sections with the same name but dioeerent contents, make the

title of each such section unique by adding at the end of it, in parentheses, t*
 *he

name of the original author or publisher of that section if known, or else a un*
 *ique

number. Make the same adjustment to the section titles in the list of Invariant

Sections in the license notice of the combined work.


In the combination, you must combine any sections Entitled iHistoryj in the

various original documents, forming one section Entitled iHistory;j likewise

combine any sections Entitled iAcknowledgements,j and any sections Entitled

iDedications.j You must delete all sections Entitled iEndorsements.j



H.6     COLLECTIONS OF DOCUMENTS


You may make a collection consisting of the Document and other documents

released under this License, and replace the individual copies of this License *
 *in

the various documents with a single copy that is included in the collection,

provided that you follow the rules of this License for verbatim copying of each*
 * of

the documents in all other respects.


You may extract a single document from such a collection, and distribute it

individually under this License, provided you insert a copy of this License into

the extracted document, and follow this License in all other respects regarding

verbatim copying of that document.



H.7     AGGREGATION WITH INDEPENDENT


        WORKS


A compilation of the Document or its derivatives with other separate and

independent documents or works, in or on a volume of a storage or distribution

medium, is called an iaggregatej if the copyright resulting from the compilation



July 15 2024               ***WORKING DRAFT***                       Page 450
                Appendix H. GNU Free Documentation License



is not used to limit the legal rights of the compilation's users beyond what the

individual works permit. When the Document is included in an aggregate, this

License does not apply to the other works in the aggregate which are not

themselves derivative works of the Document.


If the Cover Text requirement of section H.3 is applicable to these copies of t*
 *he

Document, then if the Document is less than one half of the entire aggregate, t*
 *he

Document's Cover Texts may be placed on covers that bracket the Document

within the aggregate, or the electronic equivalent of covers if the Document is*
 * in

electronic form. Otherwise they must appear on printed covers that bracket the

whole aggregate.



H.8     TRANSLATION


Translation is considered a kind of modiocation, so you may distribute

translations of the Document under the terms of section H.4. Replacing Invariant

Sections with translations requires special permission from their copyright

holders, but you may include translations of some or all Invariant Sections in

addition to the original versions of these Invariant Sections. You may include a

translation of this License, and all the license notices in the Document, and a*
 *ny

Warranty Disclaimers, provided that you also include the original English

version of this License and the original versions of those notices and disclaim*
 *ers.

In case of a disagreement between the translation and the original version of t*
 *his

License or a notice or disclaimer, the original version will prevail.


If a section in the Document is Entitled iAcknowledgementsj, iDedicationsj, or

iHistoryj, the requirement (section H.4) to Preserve its Title (section H.1) wi*
 *ll

typically require changing the actual title.



H.9     TERMINATION


You may not copy, modify, sublicense, or distribute the Document except as

expressly provided under this License. Any attempt otherwise to copy, modify,

sublicense, or distribute it is void, and will automatically terminate your rig*
 *hts

under this License.


However, if you cease all violation of this License, then your license from a

particular copyright holder is reinstated (a) provisionally, unless and until t*
 *he

copyright holder explicitly and onally terminates your license, and (b)

permanently, if the copyright holder fails to notify you of the violation by so*
 *me

reasonable means prior to 60 days after the cessation.



July 15 2024               ***WORKING DRAFT***                       Page 451
                Appendix H. GNU Free Documentation License



Moreover, your license from a particular copyright holder is reinstated

permanently if the copyright holder notioes you of the violation by some

reasonable means, this is the orst time you have received notice of violation of

this License (for any work) from that copyright holder, and you cure the

violation prior to 30 days after your receipt of the notice.


Termination of your rights under this section does not terminate the licenses of

parties who have received copies or rights from you under this License. If your

rights have been terminated and not permanently reinstated, receipt of a copy of

some or all of the same material does not give you any rights to use it.



H.10      FUTURE REVISIONS OF THIS LICENSE


The Free Software Foundation may publish new, revised versions of the GNU

Free Documentation License from time to time. Such new versions will be similar

in spirit to the present version, but may dioeer in detail to address new probl*
 *ems

or concerns. See http://www.gnu.org/copyleft/.


Each version of the License is given a distinguishing version number. If the

Document specioes that a particular numbered version of this License ior any

later versionj applies to it, you have the option of following the terms and

conditions either of that specioed version or of any later version that has been

published (not as a draft) by the Free Software Foundation. If the Document does

not specify a version number of this License, you may choose any version ever

published (not as a draft) by the Free Software Foundation. If the Document

specioes that a proxy can decide which future versions of this License can be

used, that proxy's public statement of acceptance of a version permanently

authorizes you to choose that version for the Document.



H.11      RELICENSING


iMassive Multiauthor Collaboration Sitej (or iMMC Sitej) means any World

Wide Web server that publishes copyrightable works and also provides

prominent facilities for anybody to edit those works. A public wiki that anybody

can edit is an example of such a server. A iMassive Multiauthor Collaborationj

(or iMMCj) contained in the site means any set of copyrightable works thus

published on the MMC site.


iCC-BY-SAj means the Creative Commons Attribution-Share Alike 3.0 license

published by Creative Commons Corporation, a not-for-proot corporation with a



July 15 2024               ***WORKING DRAFT***                       Page 452
                Appendix H. GNU Free Documentation License



principal place of business in San Francisco, California, as well as future cop*
 *yleft

versions of that license published by that same organization.


iIncorporatej means to publish or republish a Document, in whole or in part, as

part of another Document.


An MMC is ieligible for relicensingj if it is licensed under this License, and *
 *if all

works that were orst published under this License somewhere other than this

MMC, and subsequently incorporated in whole or in part into the MMC, (1) had

no cover texts or invariant sections, and (2) were thus incorporated prior to

November 1, 2008.


The operator of an MMC Site may republish an MMC contained in the site under

CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC

is eligible for relicensing.



ADDENDUM: How to use this License for your

documents


To use this License in a document you have written, include a copy of the Licen*
 *se

in the document and put the following copyright and license notices just after *
 *the

title page:


          Copyright (C) YEAR YOUR NAME.


          Permission is granted to copy, distribute and/or modify this

          document under the terms of the GNU Free Documentation License,

          Version 1.3 or any later version published by the Free Software

          Foundation; with no Invariant Sections, no Front-Cover Texts, and no

          Back-Cover Texts.


          A copy of the license is included in the section entitled iGNU Free

          Documentation License.j


If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace

the iwith. . . Texts.j line with this:


          with the Invariant Sections being LIST THEIR TITLES, with the

          Front-Cover Texts being LIST, and with the Back-Cover Texts being

          LIST.


If you have Invariant Sections without Cover Texts, or some other combination of

the three, merge those two alternatives to suit the situation.



July 15 2024               ***WORKING DRAFT***                       Page 453
                Appendix H. GNU Free Documentation License



If your document contains nontrivial examples of program code, we recommend

releasing these examples in parallel under your choice of free software license,

such as the GNU General Public License, to permit their use in free software.



July 15 2024               ***WORKING DRAFT***                       Page 454
                Appendix H. GNU Free Documentation License



                                (empty page)



July 15 2024               ***WORKING DRAFT***                       Page 455




Index



&-qualioed non-static member                    428, 430~432, 434~436, 441

       function, 21                      .debug_info, 8, 9, 13, 15, 24, 28, 31,

&&-qualioed non-static member                   36, 42, 69, 140, 141, 143, 149,

       function, 22                             150, 153, 154, 181, 191~194,

!caf?, see code alignment factor                196, 204~211, 215, 225~228,

!daf?, see data alignment factor                245, 288~294, 300, 301, 391,

... parameters, see unspecioed                  392, 394, 396~402, 413, 414,

       parameters entry                         417, 418, 424, 425, 427, 440,

.data, 391                                      441

.debug_abbrev.dwo, 8, 195, 197, 198,         example, 300

       201, 292, 293, 417, 427,          .debug_line.dwo, 8, 72, 164, 173, 176,

       434~436, 441                             195, 197, 198, 201, 223, 292,

.debug_abbrev, 146, 192, 194, 205,              294, 295, 417, 427, 428,

       208~211, 288, 289, 292, 293,             434~436, 441

       300, 301, 391, 401, 418, 424,     .debug_line_str, 8, 154, 159,

       426, 441                                 162~164, 194, 205, 206, 227,

    example, 300                                288, 291, 292, 418, 441

.debug_addr, 8, 28, 45, 46, 55, 69, 193, .debug_line, 65, 154, 159, 163, 164,

       194, 222, 253, 288, 290~292,             173, 176, 191, 193, 194, 205,

       294, 418, 419, 424~427, 433,             206, 223, 288~292, 294, 382,

       441                                      383, 391, 396, 401, 417, 418,

.debug_aranges, 153, 191, 193, 194,             424~426, 441

       205, 245, 288, 289, 292, 293,     .debug_loclists.dwo, 8, 44, 195, 197,

       391, 396, 418, 419, 424~426,             198, 201, 255, 292, 294, 417,

       441                                      427, 430, 433, 435, 436, 441

.debug_cu_index, 8, 198, 199, 435,       .debug_loclists, 9, 10, 44, 47, 69,

       436, 442                                 191, 193, 206, 224, 255, 288,

.debug_frame, 181, 182, 191, 194, 205,          290, 294, 417, 430, 441

       288, 292, 345, 418, 441           .debug_loc (pre-Version 5), 10, 441

.debug_info.dwo, 8, 15, 195~198, 201,    .debug_macinfo (pre-Version 5), 8,

       204, 292~295, 417, 419, 427,             198, 441



July 15 2024               ***WORKING DRAFT***                       Page 456
                                    Index



.debug_macro.dwo, 8, 173, 195, 197,      .dwo ole extension, 417

       198, 201, 224, 292, 294, 295,     .dwp ole extension, 197

       417, 427, 441                     .text, 391, 398, 400

.debug_macro, 8, 66, 172, 173, 177,      segment_selector_size

       193, 203, 224, 288~291, 382,             (deprecated), 153, 159, 182,

       383, 417, 441                            245, 253~255

.debug_names, 9, 10, 141, 148, 149,      32-bit DWARF format, 36, 159, 203,

       191, 193, 194, 205, 206, 288,            208~211, 222~228, 245, 250,

       289, 292, 293, 418, 419,                 256

       424~426, 441                      64-bit DWARF format, 36, 159, 203,

.debug_pubnames (pre-Version 5), 9,             208~211, 223~228, 245, 250,

       10, 141, 441                             256

.debug_pubtypes (pre-Version 5), 9,

       10, 141, 441                      abbrev_table_size, 149, 152, 244

.debug_ranges (pre-Version 5), 10,       abbreviations table, 207

       441                                   dynamic forms in, 215

.debug_rnglists.dwo, 54, 195, 197,           example, 300

       198, 201, 254, 292, 294, 427,     abstract instance, 20, 414

       430, 435, 441                         entry, 86

.debug_rnglists, 9, 10, 54, 56, 69,          example, 350, 353

       191, 193, 206, 225, 254, 288,         nested, 91

       290~292, 294, 441                     root, 86, 87

.debug_str.dwo, 8, 151, 164, 195~198,        tree, 86

       292, 295, 417, 427, 430,          abstract origin attribute, 89, 90, 217

       434~436, 441                      accelerated access, 140

.debug_str_offsets.dwo, 8, 68, 164,          by address, 153

       196~198, 201, 204, 252, 292,          by name, 141

       293, 295, 417, 418, 427, 430,     Access declaration, 17

       434~436, 441                      access declaration entry, 122

.debug_str_offsets, 8, 68, 73, 174,      accessibility attribute, 17, 48, 121, *
 *122,

       193, 195, 204, 206, 227, 228,            124, 217, 238

       252, 287~290, 292, 293, 419,      Accessibility of base or inherited

       441                                      class, 17

.debug_str, 151, 164, 174, 177,          activation of call frame, 178, 188

       193~195, 203~205, 227, 228,       Ada, 1, 17, 48, 64, 110, 112, 113, 138,

       288~290, 292, 293, 381, 383,             307, 320, 322, 326, 327, 330,

       418, 419, 424~426, 441                   331

.debug_sup, 202, 441                     address, see also address class

.debug_tu_index, 8, 198, 199, 435,           dereference operator, 30, 31

       436, 442                              implicit push for member

.debug_types (Version 4), 8, 441                operator, 135



July 15 2024               ***WORKING DRAFT***                       Page 457
                                    Index



   implicit push of base, 32             all tail calls are described, 18

   uplevel, see static link attribute    all tail calls summary attribute, 81,

address, 156, 158, 160                          220

address class, 23, 46, 50, 57, 92, 216,  all tail, normal and inlined calls are

       218~221, 228~230, 241                    described, 18

address class attribute, 82, 114, 217    allocated attribute, 138, 218

address index, 45, 55                    allocation status of types, 17

address of call instruction, 18          anonymous structure, 320

address of called routine, 19            anonymous union, 101, 122

address of called routine, which may     ANSI-deoned language names, 63,

       be clobbered, 19                         239

address of the value pointed to by an    argument value passed, 19

       argument, 18                      ARM instruction set architecture, 154

address register                         array

   address register                          assumed-rank, 139, 315

     in line number machine, 156             declaration of type, 115

address size, see also address_size,         descriptor for, 306

       see size of an address                element ordering, 115

address space                                element type, 116

   multiple, 31                          Array bound THREADS scale factor,

address table, 17                               22

address table base                       array coarray, see coarray

   encoding, 220                         array element stride (of array type),

address table base attribute, 69                18

address_range, 181, 183, 188             array row/column ordering, 21

address_size, 9, 153, 159, 181,          array type entry, 115

       208~210, 245, 253~255, 341            examples, 306

addrptr, see also addrptr class          artiocial attribute, 49, 217

addrptr class, 23, 69, 71, 220~222, 228, artiocial name or description, 20

       229                               ASCII (Fortran string kind), 132

adjusted opcode, 168                     ASCII (Fortran string kind), 109

alias declaration, see imported          ASCII character, 108

       declaration entry                 Assembly, 64

alignment                                associated attribute, 138, 218

   non-default, 17                       associated compilation unit, 221

alignment attribute, 60, 220             association status of types, 17

all calls summary attribute, 81, 220     assumed-rank array, see array,

all source calls summary attribute,             assumed-rank

       81, 220                           atomic qualioed type entry, 113

all tail and normal calls are            attribute duplication, 17

       described, 18                     attribute encodings, 216



July 15 2024               ***WORKING DRAFT***                       Page 458
                                    Index



attribute ordering, 17                   bounded location description, 44, 46,

attribute value classes, 23                     47

attributes, 15                           bounded range, 54~56

   list of, 17                           bucket_count, 149, 150

augmentation, 149, 181                   byte order, 104, 197, 202, 223, 230, 3*
 *25

augmentation sequence, 149               byte size attribute, 106, 124, 136, 216

augmentation string, 181                 byte stride attribute, 116, 130, 135,

augmentation_size, 149                          218

auto return type, 82, 112, 126
                                         C, 1, 12, 21, 32, 50, 64, 68, 80~82, 9*
 *6,

base address, 53                                97, 99~102, 107, 109, 112~116,

   of location list, 45                         118, 119, 130, 131, 136, 171,

   of range list, 54                            176, 261, 315, 320, 325, 367,

base address of scope, 21, 53                   373, 381, 397, 398, 413

base address selection entry             C++, 1, 9, 11, 12, 17, 21, 22, 32, 48,*
 * 49,

   in range list, 251, 252                      52, 58, 59, 64, 74~78, 82, 85~8*
 *8,

base type bit location, 19                      90, 92, 96~98, 101, 102, 104,

base type bit size, 18                          109, 112, 113, 115, 118~122,

base type entry, 106                            124~126, 130, 131, 135~137,

base types attribute, 68, 217                   148, 171, 176, 320, 325, 333,

basic block, 155, 156, 166, 168                 355, 358, 361~365, 385, 390,

basic_block, 156, 158, 166, 168                 393, 395~398, 402, 413

beginning of a data member, 123          C++ for OpenCL, 64

beginning of an object, 123, 325         C++11, 125, 131

Bernstein hash function, 261             C-interoperable, 315

Bias added to an encoded value, 17       C#, 64

bias attribute, 221                      call column attribute, 95, 219

big-endian encoding, see endianity           of call site entry, 95

       attribute                         call data location attribute, 96, 220

binary scale attribute, 109, 219         call data value attribute, 96, 220

binary scale factor for oxed-point       call ole attribute, 95, 219

       type, 17                              of call site entry, 95

bit oelds, 323, 325                      call is a tail call, 18

bit ooeset attribute (Version 3), 216    call line attribute, 95, 219

bit size attribute, 106, 107, 124, 136,      of call site entry, 95

       216                               call origin attribute, 94, 220

bit stride attribute, 116, 130, 135, 217 call parameter attribute, 96, 220

BLISS, 64                                call PC attribute, 220

block, see also block class, 25, 83, 99, call pc attribute, 94

       128, 188                          call return PC attribute, 220

block class, 23, 217, 218, 222, 228      call return pc attribute, 94



July 15 2024               ***WORKING DRAFT***                       Page 459
                                    Index



call site                                CIE_id, 181, 205

   address of called routine, 19         CIE_pointer, 181, 182, 205

   address of called routine, which      class of attribute value

       may be clobbered, 19                  address, see address class

   address of the call instruction, 18       addrptr, see addrptr class

   address of the value pointed to           block, see block class

       by an argument, 18                    constant, see constant class

   argument value passed, 19                 exprloc, see exprloc class

   parameter entry, 18                       AEag, see AEag class

   return address, 18                        lineptr, see lineptr class

   subprogram called, 18                     loclist, see loclist class

   summary                                   loclistsptr, see loclistsptr class

     all tail and normal calls are           macptr, see macptr class

       described, 18                         reference, see reference class

     all tail calls are described, 18        rnglist, see rnglist class

     all tail, normal and inlined calls      rnglistsptr, see rnglistsptr class

       are described, 18                     string, see string class

   tail call, 18                             strooesetsptr, see strooesetsptr c*
 *lass

   value pointed to by an argument,      class type entry, 118

       18                                class variable entry, 124

call site entry, 94                      coarray, 117

call site parameter entry, 95                example, 312~314

call site return pc attribute, 94        COBOL, 1, 3, 12, 64

call site summary information, 81        code address or range of addresses,

call tail call attribute, 94, 220               21

call target attribute, 95, 220           code alignment factor, 182

call target clobbered attribute, 95, 220 code_alignment_factor, 182, 184

call type attribute, 95                  codimension, see coarray

call value attribute, 96, 220            coindex, see coarray

Calling convention                       column, 156, 158

   for subprograms, 19                   column position of call site of

   for types, 19                                non-inlined call, 18

calling convention attribute, 217        column position of inlined

   for subprogram, 79                           subroutine call, 18

   for types, 120                        column position of source

calling convention codes                        declaration, 19

   for subroutines, 79                   COMDAT, 11, 393, 400~402

   for types, 120                        common, 83

catch block, 98                          common block, see Fortran common

catch block entry, 98                           block, 101

Child determination encodings, 215       common block entry, 104



July 15 2024               ***WORKING DRAFT***                       Page 460
                                    Index



common block reference attribute, 83,    containing type of pointer to member

       104                                      type, 19

common block usage, 19                   contiguous range of code addresses,

common blocks, 52                               20

common information entry, 181            conventional compilation unit, see

common reference attribute, 217                 full compilation unit, partial

comp_unit_count, 149                            compilation unit, type unit

compilation directory, 19                conventional type unit, 72

compilation directory attribute, 66,     count attribute, 114, 134, 218

       217                                   default, 134

compilation unit, 61                     counted location description, 45

   see also type unit, 72                Crystal, 64

   full, 62

   partial, 62                           D, 64, 113

   skeleton, 69                          data (indirect) location attribute, 137

compilation unit ID, 434, 436            data alignment factor, 182

compilation unit set, 198                data bit ooeset, 325

compilation unit uses UTF-8 strings,     data bit ooeset attribute, 107, 123, 2*
 *19

       22                                data bit size, 325

compile-time constant function, 19       data location attribute, 218

compile-time constant object, 19         data member, see member entry

compiler identiocation, 21                      (data)

concrete instance                        data member attribute, 218

   example, 350, 353, 354                data member bit location, 19

   nested, 91                            data member bit size, 18

concrete out-of-line instance, 414       data member location, 19

condition entry, 129                     data member location attribute, 121,

const qualioed type entry, 113                  123

constant, see also constant class, 57    data object entries, 101

constant (data) entry, 101               data object location, 21

constant class, 23, 57, 60, 99, 103, 107,data object or data type size, 18

       194, 216~222, 228, 229, 244       data_alignment_factor, 182,

constant expression attribute, 88, 104,         184~186

       219                               debug_abbrev_offset, 9, 201, 205,

constant object, 19                             208~210, 289, 293

constant value attribute, 59, 103, 130,  debug_info_offset, 153, 193, 205,

       217                                      245

constexpr, 86, 88                        debug_line_offset, 172, 173

containing type (of pointer) attribute,  debug_line_offset_flag, 172, 382,

       135                                      383

containing type attribute, 217           debugging information entry, 15



July 15 2024               ***WORKING DRAFT***                       Page 461
                                    Index



   ownership relation, 25, 394           discontiguous address ranges, see

debugging information entry                     non-contiguous address

       relationship, 22                         ranges

decimal scale attribute, 109~112, 219    discriminant (entry), 127

decimal scale factor, 19                 discriminant attribute, 127, 216

decimal sign attribute, 110, 111         discriminant list attribute, 128, 218,

decimal sign representation, 19                 243

DECL, 264~284                            discriminant of variant part, 20

declaration attribute, 50, 51, 74, 101,  discriminant value, 20

       102, 119, 218                     discriminant value attribute, 128, 216

declaration column attribute, 51, 52,    discriminated union, see variant entry

       218                               discriminator, 155, 157, 158, 166,

declaration coordinates, 15, 51, 89,            168, 171

       264                               divisor of rational scale factor, 220

   in concrete instance, 89              DJB hash function, 150, 261

declaration ole attribute, 51, 218       duplication elimination, see DWARF

declaration line attribute, 51, 218             duplicate elimination

DEFAULT (Fortran string kind), 132       DW.ACCESS.private, 48, 238, 405,

default location description, 45                407, 408

default value attribute, 103, 217        DW.ACCESS.protected, 48, 238

default value of parameter, 19           DW.ACCESS.public, 48, 238, 428,

default_is_stmt, 158, 160, 341                  431

defaulted attribute, 19, 126, 220        DW.ADDR.none, 50, 241

deleted attribute, 126, 220              DW.AT.abstract.origin, 17, 89, 89,

Deletion of member function, 19                 90, 90, 142, 217, 264, 352, 356,

denominator of rational scale factor,           358, 359, 370

       22                                DW.AT.accessibility, 17, 48, 121, 122,

derived type (C++), see inheritance             124, 217, 238, 258, 265, 267,

       entry                                    269~274, 277~284, 405, 407,

description attribute, 58, 219                  408, 428, 431

descriptor                               DW.AT.addr.base, 17, 28, 45, 55, 69,

   array, 306                                   70, 71, 195, 220, 222, 253, 268,

DIE, see debugging information entry            275, 277, 288, 290, 294, 419,

digit count attribute, 109~111, 219             420, 424, 426, 427, 433

digit count for packed decimal or        DW.AT.address.class, 17, 50, 82,

       numeric string type, 20                  114, 217, 258, 269, 275, 276,

directories, 161, 162, 164, 341                 279, 281, 284

directories_count, 161, 341              DW.AT.alignment, 17, 60, 220, 258,

directory_format_count, 161, 341                265~272, 274~283

directory_format_table, 161, 162,        DW.AT.allocated, 17, 117, 137, 138,

       341                                      138, 218, 258, 265~267,



July 15 2024               ***WORKING DRAFT***                       Page 462
                                    Index



       269~271, 276~278, 280~283,               96, 220, 267

       311, 319                          DW.AT.call.data.value, 18, 96, 96,

DW.AT.artiocial, 15, 17, 49, 92, 125,           220, 267, 380

       217, 258, 264, 327, 332, 338,     DW.AT.call.ole, 18, 88, 95, 219, 266,

       340, 406, 412, 429, 432                  272

DW.AT.associated, 17, 117, 137, 138,     DW.AT.call.line, 18, 88, 95, 219, 266,

       138, 218, 258, 265~267,                  272

       269~271, 276~278, 280~283,        DW.AT.call.origin, 18, 94, 95, 220,

       310, 319                                 266, 376, 380

DW.AT.base.types, 17, 68, 70, 71,        DW.AT.call.parameter, 18, 96, 220,

       217, 268, 275, 420                       267, 376, 377, 380

DW.AT.bias, 17, 107, 221, 266, 327       DW.AT.call.pc, 18, 81, 94, 94, 220,

DW.AT.binary.scale, 17, 109, 109,               266

       219, 258, 266                     DW.AT.call.return.pc, 18, 81, 94,

DW.AT.bit.ooeset (deprecated), 216              94, 220, 266, 376, 377, 380

DW.AT.bit.size, 18, 58, 58, 106, 107,    DW.AT.call.tail.call, 18, 94, 220, 266

       116, 119, 124, 130, 132~134,      DW.AT.call.target, 19, 95, 95, 220,

       136, 216, 258, 265~267, 270,             266, 376, 377

       271, 273, 275~278, 280, 283,      DW.AT.call.target.clobbered, 19,

       323~325, 327                             95, 95, 220, 266

DW.AT.bit.stride, 18, 58, 116, 130,      DW.AT.call.value, 19, 96, 96, 220,

       130, 135, 217, 258, 265, 270,            267, 376, 377, 380

       271, 280, 324                     DW.AT.calling.convention, 19, 79,

DW.AT.byte.size, 10, 18, 58, 58, 106,           120, 217, 242, 267, 278, 279,

       116, 119, 124, 130, 132~134,             283

       136, 216, 258, 265~267, 270,      DW.AT.common.reference, 19, 83,

       271, 273, 275~278, 280, 283,             217, 268, 400, 401

       301, 311, 327, 359, 360, 368,     DW.AT.comp.dir, 19, 63, 66, 66,

       372, 401, 403~407, 409, 412,             69~71, 217, 268, 275, 277, 301,

       429                                      419, 420, 424, 426, 428

DW.AT.byte.stride, 18, 58, 116, 130,     DW.AT.const.expr, 19, 88, 88, 104,

       130, 135, 218, 258, 270, 271,            219, 258, 272, 283, 359

       280, 309, 316                     DW.AT.const.value, 19, 42, 57, 59,

DW.AT.call.all.calls, 18, 81, 81, 220           88, 103, 130, 217, 258, 269~271,

DW.AT.call.all.source.calls, 18, 81,            282, 283, 352, 359, 361, 372,

       81, 220                                  399

DW.AT.call.all.tail.calls, 18, 81, 81,   DW.AT.containing.type, 19, 135,

       220                                      217, 258, 276, 340

DW.AT.call.column, 18, 88, 95, 219,      DW.AT.count, 19, 114, 134, 218, 258,

       266, 272                                 271, 277, 280

DW.AT.call.data.location, 18, 96,        DW.AT.data.bit.ooeset, 19, 57, 107,



July 15 2024               ***WORKING DRAFT***                       Page 463
                                    Index



       123, 123, 219, 258, 266, 273,            243, 258, 284

       323~325, 327                      DW.AT.discr.value, 20, 128, 128,

DW.AT.data.location, 19, 117, 137,              216, 258, 284, 329, 331, 332

       137, 138, 218, 258, 265~267,      DW.AT.dwo.name, 20, 69, 69, 70,

       269~271, 276~278, 280~283,               209, 220, 275, 277, 293, 419,

       307, 309~312, 316, 319, 321,             420, 424, 426

       372                               DW.AT.elemental, 20, 80, 219, 279

DW.AT.data.member.location, 19,          DW.AT.encoding, 20, 106, 107, 218,

       32, 57, 121, 123, 123, 218, 258,         236, 258, 266, 301, 327, 360,

       272, 273, 311, 322, 329, 331,            372, 401, 403, 404, 406, 407,

       332, 368, 403~405, 407~409               412, 429

DW.AT.decimal.scale, 19, 109, 110,       DW.AT.endianity, 20, 104, 104, 106,

       111, 112, 219, 258, 266                  219, 238, 258, 266, 269, 271,

DW.AT.decimal.sign, 19, 110, 111,               283

       219, 237, 258, 266                DW.AT.entry.pc, 20, 57, 57, 68, 71,

DW.AT.decl.column, 19, 51, 52, 218,             74, 82, 87, 97, 98, 142, 218, 2*
 *67,

       261, 264                                 268, 272, 273, 275, 279, 282,

DW.AT.decl.ole, 19, 51, 51, 72, 195,            284, 420

       218, 261, 264, 403, 405, 406,     DW.AT.enum.class, 20, 130, 130,

       412, 417, 428, 429, 431, 432             219, 258, 270, 361

DW.AT.decl.line, 19, 51, 51, 218,        DW.AT.explicit, 20, 124, 219, 258,

       261, 264, 403, 405, 406, 412,            279

       428, 429, 431, 432                DW.AT.export.symbols, 20, 75, 75,

DW.AT.declaration, 19, 50, 51, 74,              118, 220, 267, 274, 278, 283,

       101, 102, 119, 142, 218, 260,            320, 334, 336

       261, 265, 267~271, 273, 274,      DW.AT.extension, 20, 74, 219, 274,

       276~284, 337, 338, 406, 412,             335

       428, 431                          DW.AT.external, 20, 79, 101, 102,

DW.AT.default.value, 19, 59, 103,               152, 153, 218, 269, 279, 283,

       217, 258, 271, 281, 282, 385,            406, 412, 428, 431

       386                               DW.AT.frame.base, 20, 29, 33, 83,

DW.AT.defaulted, 9, 19, 126, 126,               83, 84, 218, 269, 279, 303,

       220, 244, 279                            356~358, 429, 432

DW.AT.deleted, 9, 19, 126, 220, 279      DW.AT.friend, 20, 122, 218, 259, 271

DW.AT.description, 15, 20, 58, 219,      DW.AT.hi.user, 190, 221

       261, 264                          DW.AT.high.pc, 11, 20, 53, 53, 63,

DW.AT.digit.count, 20, 109, 110,                70, 71, 74, 82, 87, 96~98, 142,

       111, 112, 219, 258, 266                  216, 267, 268, 272, 273, 275,

DW.AT.discr, 20, 127, 216, 258, 284,            277, 279, 282, 284, 301, 334,

       329~332                                  335, 352, 353, 356~358, 377,

DW.AT.discr.list, 20, 128, 128, 218,            412, 419, 420, 427, 429, 432



July 15 2024               ***WORKING DRAFT***                       Page 464
                                    Index



DW.AT.identioer.case, 20, 67, 71,        DW.AT.macro.info (deprecated),

       218, 242, 268, 275, 399, 420             218

DW.AT.import, 20, 76, 77, 77, 78,        DW.AT.macros, 21, 65, 71, 220, 268,

       203, 217, 272, 335, 395, 397,            275, 288, 294, 420

       400, 401                          DW.AT.main.subprogram, 11, 21,

DW.AT.inline, 20, 86, 86, 217, 243,             68, 68, 71, 79, 219, 268, 275,

       279, 350, 351, 354, 357, 359,            279, 420

       370                               DW.AT.mutable, 21, 123, 219, 258,

DW.AT.is.optional, 20, 103, 217,                273

       258, 271                          DW.AT.name, 21, 52, 52, 58, 59, 63,

DW.AT.language (deprecated), 216                67, 71, 74, 76, 79, 90, 96, 97,

DW.AT.language.name, 21, 63, 71,                101, 104~106, 112, 113, 115,

       72, 103, 116, 221, 239, 268, 275,        117, 118, 120, 122, 129~133,

       282, 301, 397, 399, 403, 405,            135~137, 142, 163, 216,

       420, 428                                 257~259, 264~284, 301, 311,

DW.AT.language.version, 21, 65,                 313, 314, 319, 320, 322~324,

       71, 72, 103, 221, 268, 275, 282,         327, 329, 331, 332, 334~338,

       420                                      340, 351, 353, 354, 357,

DW.AT.linkage.name, 21, 52, 59, 79,             359~363, 365, 366, 368, 370,

       104, 142, 219, 268, 269, 279,            372, 377, 385, 386, 389,

       283, 428, 431                            397~401, 403~410, 412, 420,

DW.AT.lo.user, 190, 221                         428, 429, 431, 432

DW.AT.location, 21, 36, 42, 52, 52,      DW.AT.namelist.item, 21, 105, 218,

       59, 87, 95, 98, 102, 104, 142,           274

       216, 258, 267~269, 271, 283,      DW.AT.noreturn, 9, 21, 80, 220, 279

       284, 288, 311, 319, 322, 324,     DW.AT.num.lanes, 21, 84, 85, 221,

       327, 334, 335, 338, 352, 353,            389

       356~358, 368, 370, 372, 376,      DW.AT.object.pointer, 21, 125, 125,

       377, 380, 389, 399, 410, 429,            219, 261, 279, 337, 338, 429,

       430, 432                                 432

DW.AT.loclists.base, 21, 44, 69, 220,    DW.AT.ordering, 21, 115, 216, 243,

       255, 420                                 258, 265, 313, 314

DW.AT.low.pc, 11, 21, 53, 53, 63,        DW.AT.picture.string, 21, 111, 219,

       69~71, 74, 82, 87, 96~98, 142,           258, 266

       216, 267~269, 272, 273, 275,      DW.AT.priority, 21, 74, 218, 273

       277, 279, 282, 284, 301, 334,     DW.AT.producer, 21, 67, 71, 217,

       335, 352, 353, 356~358, 377,             268, 275, 301, 420, 428

       412, 419, 420, 427, 429, 432      DW.AT.prototyped, 21, 80, 131, 217,

DW.AT.lower.bound, 21, 134, 217,                258, 279, 281

       239, 258, 271, 280, 310, 311,     DW.AT.pure, 21, 80, 219, 279

       313, 316, 322, 324, 327, 399      DW.AT.ranges, 21, 53, 53, 54, 63, 70,



July 15 2024               ***WORKING DRAFT***                       Page 465
                                    Index



       71, 74, 82, 87, 96~98, 142, 219,         220, 253, 268, 275, 277, 282,

       267, 268, 272, 273, 275, 277,            288, 289, 419, 420

       279, 282, 284, 288, 294, 419,     DW.AT.str.ooesets.base

       420, 427, 430                            (deprecated), 22

DW.AT.rank, 9, 21, 117, 139, 139,        DW.AT.string.length, 10, 22, 132,

       219, 258, 265, 315, 316                  132, 133, 217, 258, 278, 372

DW.AT.recursive, 21, 80, 81, 219, 279    DW.AT.string.length.bit.size, 22,

DW.AT.reference, 21, 125, 131, 132,             58, 132, 219, 258, 278

       220, 258, 279, 281                DW.AT.string.length.byte.size, 22,

DW.AT.return.addr, 22, 83, 87, 217,             58, 132, 219, 258, 278, 372

       269, 272, 279                     DW.AT.tensor, 22, 115, 116, 221

DW.AT.rnglists.base, 22, 54, 69, 70,     DW.AT.threads.scaled, 22, 134, 219,

       220, 254, 268, 275, 277, 288,            258, 271, 280

       420                               DW.AT.trampoline, 22, 92, 219, 272,

DW.AT.rvalue.reference, 22, 125,                280

       131, 132, 220, 258, 279, 281,     DW.AT.type, 22, 48, 48, 59, 82, 85,

       340                                      95, 95, 96, 98, 102, 104, 113,

DW.AT.scale.divisor, 22, 110, 110,              115~117, 121, 122, 127,

       220, 258, 266                            129~131, 132, 133~137, 218,

DW.AT.scale.multiplier, 22, 110,                259, 265~277, 280~284, 301,

       110, 220, 258, 266                       310, 311, 313, 314, 316, 319,

DW.AT.segment (deprecated), 218                 322~324, 327, 329, 331, 332,

DW.AT.sibling, 22, 25, 51, 216, 264             334, 335, 337, 338, 340, 351,

DW.AT.signature, 22, 51, 119, 219,              354, 357, 359~366, 368, 370,

       267, 270, 272, 278, 281, 283,            372, 377, 385, 386, 389,

       412, 428, 431                            397~400, 403~410, 412, 428,

DW.AT.small, 22, 110, 110, 219, 258,            429, 431, 432

       266                               DW.AT.upper.bound, 22, 134, 134,

DW.AT.speciocation, 22, 51, 51, 75,             217, 258, 271, 280, 310, 311,

       87, 102, 119, 125, 126, 142, 218,        313, 314, 316, 322, 324, 327,

       260, 265, 267, 270, 273, 278,            359, 399

       279, 283, 335, 412, 429, 432      DW.AT.use.location, 22, 135, 135,

DW.AT.start.scope, 22, 87, 99, 217,             136, 218, 258, 276

       265, 267, 269, 270, 272~274,      DW.AT.use.UTF8, 22, 68, 70~72,

       277, 278, 280~283                        218, 227, 258, 268, 275, 277,

DW.AT.static.link, 22, 83, 84, 84,              282, 420

       218, 269, 280, 352, 356, 357      DW.AT.variable.parameter, 22, 102,

DW.AT.stmt.list, 22, 65, 70~72, 201,            218, 258, 271

       216, 268, 275, 277, 282, 288,     DW.AT.virtuality, 23, 49, 121, 124,

       294, 301, 419, 420, 424~428              218, 239, 258, 272, 280

DW.AT.str.ooesets, 22, 68, 70, 72, 73,   DW.AT.visibility, 23, 48, 217, 238,



July 15 2024               ***WORKING DRAFT***                       Page 466
                                    Index



       258, 265, 267~271, 273, 274,      DW.ATE.unsigned.char, 108, 237,

       276~278, 280~284                         301

DW.AT.vtable.elem.location, 23,          DW.ATE.unsigned.oxed, 108, 109,

       125, 218, 258, 280                       237

DW.ATE.address, 108, 236                 DW.ATE.UTF, 108, 109, 237, 360

DW.ATE.ASCII, 108, 109, 132, 237,        DW.CC.hi.user, 190, 242

       372                               DW.CC.lo.user, 190, 242

DW.ATE.boolean, 108, 236, 429            DW.CC.nocall, 79, 79, 242

DW.ATE.complex.AEoat, 108, 110,          DW.CC.normal, 79, 79, 120, 242

       236                               DW.CC.pass.by.reference, 120, 242

DW.ATE.complex.signed, 108, 112,         DW.CC.pass.by.value, 120, 242

       237                               DW.CC.program, 79, 80, 80, 242

DW.ATE.complex.unsigned, 108,            DW.CFA.advance.loc, 184, 184, 188,

       112, 237                                 250, 348

DW.ATE.decimal.AEoat, 108, 110,          DW.CFA.advance.loc1, 184, 184,

       237                                      250

DW.ATE.edited, 108, 111, 237             DW.CFA.advance.loc2, 184, 184,

DW.ATE.AEoat, 108, 110, 236                     250

DW.ATE.hi.user, 190, 237                 DW.CFA.advance.loc4, 184, 184,

DW.ATE.imaginary.AEoat, 108, 110,               250

       237                               DW.CFA.def.cfa, 184, 184, 250, 347

DW.ATE.imaginary.signed, 108,            DW.CFA.def.cfa.expression, 183,

       112, 237                                 185, 185, 251

DW.ATE.imaginary.unsigned, 108,          DW.CFA.def.cfa.ooeset, 185, 185,

       112, 237                                 251, 348

DW.ATE.lo.user, 190, 237                 DW.CFA.def.cfa.ooeset.sf, 185, 185,

DW.ATE.numeric.string, 108, 109,                251

       110, 112, 237                     DW.CFA.def.cfa.register, 184, 184,

DW.ATE.packed.decimal, 108, 109,                251, 348

       110, 112, 237                     DW.CFA.def.cfa.sf, 184, 184, 251

DW.ATE.signed, 107, 108, 237, 327,       DW.CFA.expression, 183, 186, 186,

       401, 403, 404, 406, 407, 412             251

DW.ATE.signed.bitint, 108, 109, 237      DW.CFA.hi.user, 190, 251

DW.ATE.signed.char, 108, 237             DW.CFA.lo.user, 190, 251

DW.ATE.signed.oxed, 108, 109, 237        DW.CFA.nop, 182, 183, 187, 187,

DW.ATE.UCS, 108, 109, 132, 237,                 250, 347, 348

       372                               DW.CFA.ooeset, 185, 185, 186, 250,

DW.ATE.unsigned, 108, 237, 327                  348

DW.ATE.unsigned.bitint, 108, 109,        DW.CFA.ooeset.extended, 186, 186,

       237                                      250



July 15 2024               ***WORKING DRAFT***                       Page 467
                                    Index



DW.CFA.ooeset.extended.sf, 186,                 418, 419, 426, 427, 429, 432

       186, 251                          DW.FORM.addrx1, 9, 69, 194, 195,

DW.CFA.register, 186, 186, 250, 347             222, 222, 229, 290, 294, 418,

DW.CFA.remember.state, 187, 187,                419, 426, 427

       250                               DW.FORM.addrx2, 9, 69, 194, 195,

DW.CFA.restore, 187, 187, 250, 348              222, 222, 230, 290, 294, 418,

DW.CFA.restore.extended, 187, 187,              419, 426, 427

       250                               DW.FORM.addrx3, 9, 69, 194, 195,

DW.CFA.restore.state, 187, 187, 250             222, 222, 230, 290, 294, 418,

DW.CFA.same.value, 185, 185, 250,               419, 426, 427

       347                               DW.FORM.addrx4, 9, 69, 194, 195,

DW.CFA.set.loc, 183, 183, 188, 250              222, 222, 230, 290, 294, 418,

DW.CFA.undeoned, 185, 185, 188,                 419, 426, 427

       250, 347                          DW.FORM.addrx.ooeset, 215, 215

DW.CFA.val.expression, 183, 187,         DW.FORM.block, 164, 165, 173, 222,

       187, 251                                 228, 259, 411

DW.CFA.val.ooeset, 186, 186, 251         DW.FORM.block1, 165, 173, 222, 228

DW.CFA.val.ooeset.sf, 186, 186, 251      DW.FORM.block2, 165, 173, 222, 228

DW.CHILDREN.no, 214, 215, 301            DW.FORM.block4, 165, 173, 222, 228

DW.CHILDREN.yes, 214, 215, 301           DW.FORM.data, 223, 223

DW.DEFAULTED.in.class, 126, 244          DW.FORM.data1, 164, 165, 173, 222,

DW.DEFAULTED.no, 126, 244                       223, 229, 301

DW.DEFAULTED.out.of.class, 126,          DW.FORM.data16, 9, 165, 173, 222,

       244                                      223, 229

DW.DS.leading.overpunch, 111,            DW.FORM.data2, 164, 165, 173, 222,

       238                                      223, 228

DW.DS.leading.separate, 111, 238         DW.FORM.data4, 11, 164, 165, 173,

DW.DS.trailing.overpunch, 111, 238              222, 223, 228, 386

DW.DS.trailing.separate, 111, 238        DW.FORM.data8, 11, 164, 165, 173,

DW.DS.unsigned, 111, 238                        222, 223, 228, 244, 429, 432

DW.DSC.label, 128, 243                   DW.FORM.data!n?, 107

DW.DSC.range, 128, 243                   DW.FORM.exprloc, 229

DW.END.big, 104, 238                     DW.FORM.exprval, 223, 259

DW.END.default, 104, 238                 DW.FORM.AEag, 165, 173, 223, 229,

DW.END.hi.user, 190, 238                        259, 411

DW.END.little, 104, 238                  DW.FORM.AEag.present, 223, 229,

DW.END.lo.user, 190, 238                        244

DW.FORM.addr, 46, 56, 192, 221,          DW.FORM.implicit.const, 9, 215,

       228, 301                                 215, 223, 229

DW.FORM.addrx, 9, 69, 194, 195,          DW.FORM.indirect, 215, 215, 229,

       222, 222, 229, 288, 290, 294,            301



July 15 2024               ***WORKING DRAFT***                       Page 468
                                    Index



DW.FORM.line.strp, 9, 164, 165,                 293, 418

       173, 205, 206, 227, 227, 229,     DW.FORM.strp.sup, 9, 164, 165,

       288, 291, 295, 417                       173, 203, 205, 227, 227, 229

DW.FORM.locdesc, 224                     DW.FORM.strp.sup8, 164, 165, 173,

DW.FORM.loclistx, 9, 47, 69, 224,               203, 227, 227, 230

       229, 255, 290, 294                DW.FORM.strx, 10, 68, 73, 164, 165,

DW.FORM.ref1, 194, 225, 229, 394                173, 194~196, 198, 227, 227,

DW.FORM.ref2, 36, 194, 225, 229,                229, 288, 289, 293, 417~419,

       394                                      427~429, 431, 432, 434

DW.FORM.ref4, 36, 194, 225, 229,         DW.FORM.strx1, 10, 68, 73, 164, 165,

       301, 394                                 173, 194~196, 198, 227, 227,

DW.FORM.ref8, 194, 225, 229, 394                229, 289, 293, 417~419, 427

DW.FORM.ref!n?, 225, 397                 DW.FORM.strx2, 10, 68, 73, 164, 165,

DW.FORM.ref.addr, 12, 36, 193,                  173, 194~196, 198, 227, 227,

       196, 205, 225, 226, 229, 288,            229, 289, 293, 417~419, 427

       289, 301, 392, 394~396, 414       DW.FORM.strx3, 10, 68, 73, 164, 165,

DW.FORM.ref.sig8, 143, 150, 210,                173, 194~196, 198, 227, 227,

       226, 229, 403, 428, 431                  229, 289, 293, 417~419, 427

DW.FORM.ref.sup4, 9, 203, 226, 229       DW.FORM.strx4, 10, 68, 73, 164, 165,

DW.FORM.ref.sup8, 9, 203, 226, 229              173, 194~196, 198, 227, 227,

DW.FORM.ref.udata, 194, 225, 229,               229, 289, 293, 417~419, 427

       394                               DW.FORM.udata, 164, 165, 173, 223,

DW.FORM.rnglistx, 9, 56, 69, 225,               223, 229, 341

       229, 254, 290, 294                DW.ID.case.insensitive, 67, 68, 242,

DW.FORM.sdata, 165, 173, 223, 223,              399

       229, 259, 385, 404, 407~409,      DW.ID.case.sensitive, 67, 67, 242

       411                               DW.ID.down.case, 67, 67, 242

DW.FORM.sec.ooeset, 11, 47, 56, 71,      DW.ID.up.case, 67, 67, 242

       165, 173, 193, 196, 205, 221,     DW.IDX.compile.unit, 152, 244

       222~225, 228, 229, 254, 255,      DW.IDX.die.ooeset, 152, 244

       289, 290, 294, 301, 432           DW.IDX.external, 152, 153, 244

DW.FORM.string, 163~165, 173, 194,       DW.IDX.hi.user, 190, 244

       226, 228, 259, 301, 341, 385,     DW.IDX.lo.user, 190, 244

       386, 404, 407~409, 411, 428,      DW.IDX.parent, 152, 244

       429                               DW.IDX.type.hash, 152, 244

DW.FORM.strp, 164, 165, 173, 193,        DW.IDX.type.unit, 152, 244

       194, 196, 205, 227, 227, 229,     DW.INL.declared.inlined, 86, 243,

       253, 288, 289, 293, 341, 418,            351, 354, 357, 370

       430                               DW.INL.declared.not.inlined, 86,

DW.FORM.strp8, 164, 165, 173, 193,              243

       194, 196, 227, 227, 230, 289,     DW.INL.inlined, 86, 86, 243, 359



July 15 2024               ***WORKING DRAFT***                       Page 469
                                    Index



DW.INL.not.inlined, 86, 86, 243          DW.LNAME.Julia, 64, 240

DW.LLE.base.address, 47, 236             DW.LNAME.Kotlin, 64, 240

DW.LLE.base.addressx, 46, 69, 236,       DW.LNAME.lo.user, 190, 241

       290                               DW.LNAME.Modula2, 64, 240

DW.LLE.default.location, 46, 236         DW.LNAME.Modula3, 64, 240

DW.LLE.end.of.list, 46, 47, 236,         DW.LNAME.Mojo, 64, 241

       370, 433                          DW.LNAME.Move, 64, 241

DW.LLE.hi.user, 190, 236                 DW.LNAME.ObjC, 64, 240

DW.LLE.include.loclist, 47, 236          DW.LNAME.ObjC.plus.plus, 65,

DW.LLE.include.loclistx, 47, 236                240

DW.LLE.lo.user, 190, 236                 DW.LNAME.OCaml, 65, 240

DW.LLE.ooeset.pair, 46, 46, 47, 236      DW.LNAME.Odin, 65, 241

DW.LLE.start.end, 47, 236, 370           DW.LNAME.OpenCL.C, 65, 240

DW.LLE.start.length, 47, 236, 433        DW.LNAME.OpenCL.CPP, 65, 241

DW.LLE.startx.endx, 46, 69, 236,         DW.LNAME.Pascal, 65, 240

       290                               DW.LNAME.PLI, 65, 240

DW.LLE.startx.length, 46, 69, 236,       DW.LNAME.Python, 65, 240

       290                               DW.LNAME.RenderScript, 65, 240

DW.LNAME.Ada, 64, 240                    DW.LNAME.Ruby, 65, 241

DW.LNAME.Assembly, 64, 241               DW.LNAME.Rust, 65, 240

DW.LNAME.BLISS, 64, 240                  DW.LNAME.Swift, 65, 240

DW.LNAME.C, 64, 240, 301                 DW.LNAME.SYCL, 65, 241

DW.LNAME.C.plus.plus, 64, 240,           DW.LNAME.UPC, 65, 240

       397, 403, 405, 428                DW.LNAME.Zig, 65, 240

DW.LNAME.C.sharp, 64, 241                DW.LNCT.directory.index, 164,

DW.LNAME.Cobol, 64, 240                         247, 341

DW.LNAME.CPP.for.OpenCL, 64,             DW.LNCT.hi.user, 165, 190, 247

       241                               DW.LNCT.lo.user, 165, 190, 247

DW.LNAME.Crystal, 64, 240                DW.LNCT.MD5, 165, 165, 247

DW.LNAME.D, 64, 240                      DW.LNCT.path, 163, 165, 247, 341

DW.LNAME.Dylan, 64, 240                  DW.LNCT.size, 165, 165, 247, 341

DW.LNAME.Fortran, 64, 240, 399           DW.LNCT.source, 165, 165, 247, 341

DW.LNAME.GLSL, 64, 241                   DW.LNCT.timestamp, 164, 164, 247,

DW.LNAME.GLSL.ES, 64, 241                       341

DW.LNAME.Go, 64, 240                     DW.LNCT.URL, 165, 165, 247, 341

DW.LNAME.Haskell, 64, 240                DW.LNE.deone.ole (deprecated),

DW.LNAME.hi.user, 190, 241                      247

DW.LNAME.HIP, 64, 241                    DW.LNE.end.sequence, 170, 170,

DW.LNAME.HLSL, 64, 241                          171, 247, 344

DW.LNAME.Hylo, 64, 241                   DW.LNE.hi.user, 190, 247

DW.LNAME.Java, 64, 240                   DW.LNE.lo.user, 190, 247



July 15 2024               ***WORKING DRAFT***                       Page 470
                                    Index



DW.LNE.padding, 171, 171, 247            DW.MACRO.deone.sup8, 172, 174,

DW.LNE.set.address, 171, 171, 193,              174, 175, 203, 249

       247, 418                          DW.MACRO.end.ole, 173, 176, 176,

DW.LNE.set.discriminator, 171,                  249, 382, 383

       171, 247                          DW.MACRO.hi.user, 173, 190, 249

DW.LNE.set.prologue.epilogue,            DW.MACRO.import, 177, 177, 249,

       171, 171, 247                            288, 291, 383

DW.LNS.advance.line, 168, 168, 246       DW.MACRO.import.sup

DW.LNS.advance.pc, 168, 168, 169,               (deprecated), 249

       246, 344                          DW.MACRO.import.sup4, 172, 177,

DW.LNS.const.add.pc, 169, 169,                  177, 203, 249

       246                               DW.MACRO.import.sup8, 172, 177,

DW.LNS.copy, 168, 168, 246                      177, 203, 249

DW.LNS.extended.op, 158, 159,            DW.MACRO.lo.user, 173, 190, 249

       170, 170, 246                     DW.MACRO.padding, 177, 177, 249

DW.LNS.oxed.advance.pc, 158,             DW.MACRO.start.ole, 173, 176,

       169, 169, 246, 344                       176, 195, 249, 288, 290, 295,

DW.LNS.hi.user, 190                             382~384

DW.LNS.lo.user, 190                      DW.MACRO.undef, 174, 174, 175,

DW.LNS.negate.stmt, 160, 168, 168,              249, 382, 383

       246                               DW.MACRO.undef.strp, 174, 174,

DW.LNS.set.basic.block, 168, 168,               175, 177, 193, 196, 203, 249,

       246                                      288, 290

DW.LNS.set.column, 168, 168, 246         DW.MACRO.undef.strx, 174, 174,

DW.LNS.set.epilogue.begin, 170,                 175, 196, 249, 288, 290, 295

       170, 246                          DW.MACRO.undef.sup

DW.LNS.set.ole, 168, 168, 246                   (deprecated), 249

DW.LNS.set.isa, 170, 170, 246            DW.MACRO.undef.sup4, 172, 174,

DW.LNS.set.prologue.end, 169,                   174, 175, 203, 249

       169, 246                          DW.MACRO.undef.sup8, 172, 174,

DW.MACRO.deone, 174, 174, 175,                  174, 175, 203, 249

       249, 382, 383                     DW.OP.abs, 33, 34, 34, 232

DW.MACRO.deone.strp, 174, 174,           DW.OP.addr, 27, 27, 142, 192, 232,

       175, 177, 193, 196, 203, 249,            303

       288, 290, 383                     DW.OP.addrx, 28, 28, 69, 183, 194,

DW.MACRO.deone.strx, 174, 174,                  195, 234, 288, 290, 294, 418

       175, 196, 249, 288, 290, 295      DW.OP.and, 34, 34, 232, 310, 311

DW.MACRO.deone.sup                       DW.OP.bit.piece, 43, 43, 44, 234, 306

       (deprecated), 249                 DW.OP.bra, 36, 36, 233

DW.MACRO.deone.sup4, 172, 174,           DW.OP.breg0, 29, 233, 375, 380

       174, 175, 203, 249                DW.OP.breg1, 29, 233, 304, 305



July 15 2024               ***WORKING DRAFT***                       Page 471
                                    Index



DW.OP.breg31, 29, 233, 303               DW.OP.fbreg, 29, 29, 234, 303, 304,

DW.OP.breg!n?, 29, 83                           429, 433

DW.OP.bregx, 29, 29, 41, 234, 303,       DW.OP.form.tls.address, 32, 32, 33,

       389                                      142, 234

DW.OP.call2, 36, 36, 52, 183, 234        DW.OP.ge, 35, 233

DW.OP.call4, 36, 36, 52, 183, 234        DW.OP.gt, 35, 233

DW.OP.call.frame.cfa, 33, 33, 183,       DW.OP.hi.user, 38, 190, 235

       234, 429, 432                     DW.OP.implicit.pointer, 42, 42, 234,

DW.OP.call.ref, 36, 36, 52, 58, 183,            367, 368, 370

       196, 205, 234, 260, 288, 289      DW.OP.implicit.value, 41, 41, 234,

DW.OP.const1s, 27, 232                          367, 370

DW.OP.const1u, 27, 232                   DW.OP.le, 35, 233

DW.OP.const2s, 27, 232                   DW.OP.lit0, 27, 233

DW.OP.const2u, 27, 232                   DW.OP.lit1, 27, 233, 304, 310, 370,

DW.OP.const4s, 27, 232                          376

DW.OP.const4u, 27, 232                   DW.OP.lit31, 27, 233

DW.OP.const8s, 27, 232                   DW.OP.lit!n?, 27, 35, 310, 311, 316,

DW.OP.const8u, 27, 232                          322

DW.OP.const!n?!x?, 27, 33                DW.OP.lo.user, 38, 190, 235

DW.OP.const!n?s, 27                      DW.OP.lt, 35, 233

DW.OP.const!n?u, 27                      DW.OP.minus, 33, 34, 34, 232

DW.OP.const.type, 27, 28, 28, 183,       DW.OP.mod, 34, 34, 233

       234                               DW.OP.mul, 33, 34, 34, 233, 316,

DW.OP.consts, 27, 27, 232                       375, 377

DW.OP.constu, 27, 27, 232                DW.OP.ne, 35, 233

DW.OP.constx, 28, 28, 69, 183, 194,      DW.OP.neg, 33, 34, 34, 233

       195, 234, 288, 290, 294           DW.OP.nop, 37, 37, 234

DW.OP.convert, 37, 37, 183, 235          DW.OP.not, 34, 34, 233

DW.OP.deref, 30, 30, 232, 303, 305,      DW.OP.or, 34, 34, 233

       310, 311, 316, 376, 377           DW.OP.over, 30, 30, 232, 302

DW.OP.deref.size, 30, 30, 31, 234,       DW.OP.pick, 30, 30, 232, 302

       380                               DW.OP.piece, 43, 43, 44, 234, 304,

DW.OP.deref.type, 31, 31, 183, 235              306, 368, 370

DW.OP.div, 33, 34, 34, 232               DW.OP.plus, 33, 34, 34, 35, 233, 304,

DW.OP.drop, 30, 30, 232, 302                    310, 311, 316, 322, 389

DW.OP.dup, 29, 29, 232, 302              DW.OP.plus.uconst, 35, 35, 233,

DW.OP.entry.value, 37, 37, 38, 234,             303, 305, 331

       305, 375~377, 380, 433            DW.OP.push.lane, 33, 33, 84, 235,

DW.OP.eq, 35, 233                               389

DW.OP.EXT, 38                            DW.OP.push.object.address, 32,

DW.OP.extended, 38, 38, 235                     32, 37, 96, 123, 138, 183, 234,



July 15 2024               ***WORKING DRAFT***                       Page 472
                                    Index



       309~312, 316                      DW.RLE.startx.endx, 55, 69, 252,

DW.OP.reg0, 41, 233, 304, 306,                  288, 291

       375~377, 380                      DW.RLE.startx.length, 55, 69, 252,

DW.OP.reg1, 41, 233, 305, 306,                  288, 291

       375~377                           DW.SECT.ABBREV, 201

DW.OP.reg31, 41, 233                     DW.SECT.INFO, 201

DW.OP.reg!n?, 41, 83                     DW.SECT.LINE, 201

DW.OP.regval.bits, 28, 29, 29, 235       DW.SECT.LOCLISTS, 201

DW.OP.regval.type, 28, 29, 29, 183,      DW.SECT.MACRO, 201

       234                               DW.SECT.RNGLISTS, 201

DW.OP.regx, 41, 41, 234, 303, 389        DW.SECT.STR.OFFSETS, 201

DW.OP.reinterpret, 37, 37, 183, 235      DW.TAG.access.declaration, 16,

DW.OP.rot, 30, 30, 232, 302                     122, 213, 265

DW.OP.shl, 35, 35, 233                   DW.TAG.array.type, 16, 115, 212,

DW.OP.shr, 35, 35, 233                          265, 310, 311, 313, 314, 316,

DW.OP.shra, 35, 35, 233                         322, 324, 359, 399

DW.OP.skip, 36, 36, 233                  DW.TAG.atomic.type, 16, 113, 214,

DW.OP.stack.value, 41, 41, 234, 304,            265

       305, 367, 368, 370, 375, 377,     DW.TAG.base.type, 16, 28, 29, 31,

       389, 433                                 32, 37, 106, 107, 114, 132, 213,

DW.OP.swap, 30, 30, 232, 302                    266, 301, 323, 327, 334, 337,

DW.OP.user.extended, 38, 38, 235                360, 372, 397, 401, 403, 404,

DW.OP.xderef, 31, 31, 232                       406, 407, 412, 429

DW.OP.xderef.size, 31, 31, 32, 234       DW.TAG.call.site, 9, 16, 81, 94, 94,

DW.OP.xderef.type, 32, 32, 235                  214, 266, 376, 377, 380

DW.OP.xor, 35, 35, 233                   DW.TAG.call.site.parameter, 16,

DW.ORD.col.major, 116, 243, 313,                95, 96, 214, 267, 376, 377, 380

       314                               DW.TAG.catch.block, 16, 98, 213,

DW.ORD.row.major, 116, 243                      267

DW.RLE.base.address, 56, 252             DW.TAG.class.type, 16, 118, 127,

DW.RLE.base.addressx, 55, 69, 252,              212, 267, 337, 340, 405, 407,

       288, 291                                 412, 428, 431

DW.RLE.end.of.list, 55, 56, 252          DW.TAG.coarray.type, 9, 16, 117,

DW.RLE.hi.user, 190, 252                        214, 267, 313, 314

DW.RLE.include.rnglist, 56, 252          DW.TAG.common.block, 16, 104,

DW.RLE.include.rnglistx, 56, 252                212, 268, 399

DW.RLE.lo.user, 190, 252                 DW.TAG.common.inclusion, 16, 83,

DW.RLE.ooeset.pair, 55, 56, 56, 252             212, 268, 400, 401

DW.RLE.start.end, 56, 252                DW.TAG.compile.unit, 16, 62, 62,

DW.RLE.start.length, 56, 252                    71, 207, 212, 268, 289, 290, 29*
 *4,

                                                301, 395~398, 400, 401, 410,



July 15 2024               ***WORKING DRAFT***                       Page 473
                                    Index



       417, 427, 428                     DW.TAG.inlined.subroutine, 16, 78,

DW.TAG.condition, 3, 16, 129, 214,              81, 87, 88, 89, 91, 92, 94, 142,

       268                                      212, 272, 351, 352, 356, 358,

DW.TAG.const.type, 16, 113, 114,                359, 370

       213, 268, 337, 340, 359, 372,     DW.TAG.interface.type, 16, 120,

       429                                      213, 272

DW.TAG.constant, 16, 101, 101, 110,      DW.TAG.label, 16, 97, 142, 212, 273

       129, 213, 269, 372, 399           DW.TAG.lexical.block, 16, 96, 212,

DW.TAG.dwarf.procedure, 16, 42,                 273, 375, 377, 412, 432

       52, 213, 269, 370                 DW.TAG.lo.user, 190, 214

DW.TAG.dynamic.type, 16, 136,            DW.TAG.member, 16, 94, 122, 129,

       137, 214, 269, 319                       212, 273, 311, 319, 320,

DW.TAG.entry.point, 16, 78, 212,                322~324, 327, 329, 331, 332,

       269                                      362, 363, 365, 368, 397,

DW.TAG.enumeration.type, 16,                    403~405, 407~409

       116, 129, 130, 212, 270, 361      DW.TAG.module, 16, 74, 212, 273

DW.TAG.enumerator, 16, 130, 213,         DW.TAG.mutable.type

       270, 361                                 (deprecated), 214

DW.TAG.ole.type, 16, 136, 213, 270       DW.TAG.namelist, 16, 105, 213, 274

DW.TAG.formal.parameter, 16, 42,         DW.TAG.namelist.item, 16, 105,

       94, 96, 98, 101, 129, 131, 212,          213, 274

       271, 338, 340, 351, 352, 354,     DW.TAG.namespace, 16, 74, 74, 142,

       356~359, 363, 368, 370, 385,             213, 274, 334~336, 403~409,

       386, 406, 412, 429, 432, 433             412

DW.TAG.friend, 16, 122, 213, 259,        DW.TAG.packed.type, 16, 113, 213,

       271                                      274, 323

DW.TAG.generic.subrange, 9, 16,          DW.TAG.partial.unit, 16, 62, 62,

       117, 117, 134, 139, 214, 271,            207, 213, 275, 289, 290, 294,

       315, 316                                 395, 396, 399, 400

DW.TAG.hi.user, 190, 214                 DW.TAG.pointer.type, 16, 113, 114,

DW.TAG.immutable.type, 16, 113,                 212, 259, 275, 301, 337, 340,

       214, 271                                 406, 408, 412, 429

DW.TAG.imported.declaration, 16,         DW.TAG.ptr.to.member.type, 16,

       76, 212, 272, 335                        135, 213, 259, 276, 340

DW.TAG.imported.module, 16, 75,          DW.TAG.reference.type, 16, 113,

       77, 213, 272, 335                        114, 212, 259, 276, 398, 429

DW.TAG.imported.unit, 16, 78, 203,       DW.TAG.restrict.type, 16, 113, 114,

       213, 272, 395, 397, 400, 401,            213, 276

       414                               DW.TAG.rvalue.reference.type, 16,

DW.TAG.inheritance, 16, 121, 212,               113, 114, 214, 259, 276

       272                               DW.TAG.set.type, 16, 133, 213, 277



July 15 2024               ***WORKING DRAFT***                       Page 474
                                    Index



DW.TAG.shared.type, 16, 113, 114,               212, 283

       214, 277                          DW.TAG.unspecioed.parameters,

DW.TAG.skeleton.unit, 16, 69, 214,              16, 83, 98, 131, 212, 283

       277, 424, 426                     DW.TAG.unspecioed.type, 16, 112,

DW.TAG.string.type, 16, 132, 212,               213, 283

       278, 372                          DW.TAG.variable, 16, 42, 89, 94,

DW.TAG.structure.type, 16, 118,                 101, 102, 114, 124, 129, 142,

       127, 212, 278, 311, 319, 320,            213, 283, 311, 313, 314, 319,

       322~324, 327, 329, 331, 332,             322, 324, 327, 334~336, 340,

       362, 363, 365, 366, 368, 397,            351, 352, 354, 356~363, 365,

       403, 404, 406, 409                       366, 368, 370, 372, 377, 389,

DW.TAG.subprogram, 16, 78, 79, 85,              398~400, 410, 432, 433, 436

       86, 89, 91, 92, 113, 124, 142,    DW.TAG.variant, 16, 128, 212, 284,

       213, 259, 279, 280, 334, 335,            329, 331, 332

       337, 338, 340, 351, 352, 354,     DW.TAG.variant.part, 16, 127, 213,

       356~359, 363, 364, 368, 370,             284, 329~332

       375, 385, 386, 389, 398, 400,     DW.TAG.volatile.type, 16, 113, 114,

       401, 406, 409, 410, 412, 428,            213, 284

       429, 431, 432                     DW.TAG.with.stmt, 16, 97, 213, 284

DW.TAG.subrange.type, 16, 116,           DW.UT.compile, 207, 208

       117, 129, 133, 139, 213, 239,     DW.UT.hi.user, 190, 207

       280, 310, 311, 313, 314, 322,     DW.UT.lo.user, 190, 207

       324, 327, 359, 399                DW.UT.partial, 207, 208

DW.TAG.subroutine.type, 16, 131,         DW.UT.skeleton, 207, 209

       212, 281, 340                     DW.UT.split.compile, 207, 209

DW.TAG.template.alias, 16, 137,          DW.UT.split.type, 207, 210

       214, 281, 365, 366                DW.UT.type, 207, 210

DW.TAG.template.type.parameter,          DW.VIRTUALITY.none, 49, 239

       16, 59, 213, 281, 362, 363, 365,  DW.VIRTUALITY.pure.virtual, 49,

       366                                      239

DW.TAG.template.value.parameter,         DW.VIRTUALITY.virtual, 49, 239

       16, 59, 213, 282                  DW.VIS.exported, 49, 239

DW.TAG.thrown.type, 16, 85, 213,         DW.VIS.local, 49, 239

       282                               DW.VIS.qualioed, 49, 239

DW.TAG.try.block, 16, 98, 213, 282       DWARF compression, 390, 416

DW.TAG.type.unit, 16, 62, 72, 207,       DWARF duplicate elimination, 390,

       214, 282, 289, 294, 403, 405,            see also DWARF compression,

       417, 428                                 see also split DWARF object

DW.TAG.typedef, 16, 115, 115, 212,              ole

       282, 301                              examples, 396~398, 434

DW.TAG.union.type, 16, 118, 127,



July 15 2024               ***WORKING DRAFT***                       Page 475
                                    Index



DWARF expression, 27, see also               of location list, 45

       location description                  of range list, 54

   arithmetic operations, 33             end-of-list entry

   control AEow operations, 35               in location list, 235

   examples, 302                         end_sequence, 156, 158, 170

   literal encodings, 27                 endianity attribute, 104, 106, 219

   logical operations, 33                endianity of data, 20

   operator encoding, 231                entity, 15

   register based addressing, 28         entry address, 57

   special operations, 37                entry address of a scope, 20

   stack operations, 27, 29              entry PC address, 57

DWARF package ole, 434                   entry PC attribute, 218

DWARF package oles, 197                      and abstract instance, 87

   section identioer encodings, 201          for catch block, 98

DWARF procedure, 52                          for inlined subprogram, 87

DWARF procedure entry, 52                    for lexical block, 97

DWARF Version 1, iii                         for module initialization, 74

DWARF Version 2, iii, 2, 12, 13, 160,        for subroutine, 82

       192, 440                              for try block, 98

DWARF Version 3, iii, 11, 12, 160, 167,      for with statement, 98

       214, 216, 440                     entry pc attribute, 68

DWARF Version 4, 1, 2, 8, 10, 11, 27,        and abstract instance, 87

       160, 198, 218, 247, 440           entry point entry, 78

DWARF Version 5, 1, 8, 9, 44, 54, 61,    enum class, see type-safe

       65, 133, 141, 153, 159, 160, 162,        enumeration

       163, 182, 216, 218, 220, 240,     enum, Rust, 331

       245, 249, 253~255, 416, 440       enumeration class attribute, 219

DWARF Version 6, iii, 22, 58, 160, 440   enumeration literal, see enumeration

dwo_id, 70, 209, 419, 424                       entry

Dylan, 64                                enumeration literal value, 19

dynamic number of array                  enumeration stride (dimension of

       dimensions, 21                           array type), 18

                                         enumeration type entry, 130
elemental attribute, 80, 219                 as array dimension, 116, 130

elemental property of a subroutine,      enumerator entry, 130

       20                                epilogue, 178, 187

elements of breg subrange type, 19       epilogue begin, 170

empty location description, 40           epilogue code, 179

encoding attribute, 106, 107, 218, 236   epilogue end, 170

encoding of base type, 20                epilogue_begin, 157, 158, 166, 168,

end-of-list                                     170



July 15 2024               ***WORKING DRAFT***                       Page 476
                                    Index



epilogue_epilogue, 166                          134

error value, 191                         AEag class, 24, 75, 79~81, 92, 94, 104,

exception thrown, see thrown type               194, 217~221, 223, 229, 244

       entry                             foreign_type_unit_count, 149, 150

explicit attribute, 124, 219             formal parameter, 82

explicit property of member function,    formal parameter entry, 101, 129

       20                                    in catch block, 98

export symbols (of structure, class or       with default value, 103

       union) attribute, 118             formal type parameter, see template

export symbols attribute, 75, 220               type parameter entry

export symbols of a namespace, 20        FORTRAN, 9

export symbols of a structure, union     Fortran, 1, 32, 64, 68, 74, 76~78, 80,*
 * 81,

       or class, 20                             83, 105, 132, 308, 312~314, 378,

exprloc, see also exprloc class                 395, 398

exprval class, 23, 57, 58, 185~187,          common block, 83, 104

       216~221, 223, 229                     main program, 80

extended opcodes in line number              module (Fortran 90), 74

       program, 170                          use statement, 76~78

extended type (Java), see inheritance    Fortran 2003, 109, 132, 371

       entry                             Fortran 90, 12, 74, 136, 138, 306, 308,

extensibility, 7, 190                           318

extension attribute, 74, 219             Fortran 90 array, 138

external attribute, 79, 101, 218         Fortran array, 306

external subroutine, 20                  Fortran array example, 308

external variable, 20                    Fortran example, 398

                                         frame base attribute, 83, 218
file, 156, 158                           frame description entry, 181

ole containing call site of non-inlined  friend attribute, 122, 218

       call, 18                          friend entry, 122

ole containing declaration, 51           friend relationship, 20

ole containing inlined subroutine        full compilation unit, 62

       call, 18                          function entry, see subroutine entry

ole containing source declaration, 19    function template instantiation, 85

ole type entry, 136                      fundamental type, see base type entry

file_name_format_count, 162, 341

file_name_format_table, 162, 163,        generic type, 27, 28, 30~37

       341                               global namespace, 74, 75, see

file_names, 162~164, 341                        namespace (C++), global

file_names_count, 163, 341               GNU C, 112

AEag, see also AEag class, 49, 50, 68, 79,Go, 64

       80, 88, 101~103, 123, 130, 131,   Haskell, 64



July 15 2024               ***WORKING DRAFT***                       Page 477
                                    Index



header_length, 159, 205, 341             inheritance entry, 121

hidden indirection, see data location    inherited member location, 19

       attribute                         initial length, 140, 148, 153, 159, 18*
 *1,

high PC attribute, 53, 63, 74, 82, 87,          182, 191, 192, 204, 205,

       96~98, 216, 353                          208~210, 245, 252~255

   and abstract instance, 87             initial length oeld, see initial length

high user attribute encoding, 221        initial_instructions, 182, 188

High-Level Shading Language, 64          initial_length, 208

HIP Language, 64                         initial_location, 181, 183, 188, 194

Hylo Language, 64                        inline attribute, 86, 217, 243

                                         inline instances of inline
identioer case attribute, 67, 218               subprograms, 17

identioer case rule, 20                  inline namespace, 75, see also export

identioer names, 52, 58, 67                     symbols attribute

IEEE 754R decimal AEoating-point         inlined call location attributes, 88

       number, 108                       inlined subprogram call

immutable type, 113                          examples, 349

implementing type (Java), see            inlined subprogram entry, 78, 87

       inheritance entry                     in concrete instance, 87

implicit location description, 41        inlined subroutine, 20

implicit pointer example, 368, 370       instructions, 183

import attribute, 76~78, 217             integer constant, 51, 58, 79, 86, 88,

imported declaration, 20                        106, 107, 109, 111, 115, 123,

imported declaration entry, 76                  124

imported module attribute, 77            interface type entry, 120

imported module entry, 77                Internet, 165

imported unit, 20                        is optional attribute, 103, 217

imported unit entry, 62, 78              is_stmt, 156, 158, 160, 168

include_index, 164                       is_supplementary, 202

incomplete declaration, 50               isa, 157, 158, 170

incomplete structure/union/class,        ISO 10646 (Fortran string kind), 109

       119                               ISO 10646 character set standard, 109,

incomplete type, 115, 119                       132, 227, 371

incomplete type (Ada), 112               ISO-deoned language names, 63, 239

incomplete, non-deoning, or separate     ISO/IEC 10646-1:1993 character, 108

       declaration corresponding to      ISO/IEC 10646-1:1993 character

       a declaration, 22                        (UCS-4), 108

incomplete, non-deoning, or separate     ISO/IEC 646:1991 character, 108

       entity declaration, 19            ISO_10646 (Fortran string kind), 132

index attribute, 146

indirection to actual data, 19           Java, 12, 64, 118, 120, 121



July 15 2024               ***WORKING DRAFT***                       Page 478
                                    Index



Julia, 64                                line number of source declaration, 19

                                         line number opcodes
Kotlin, 64                                   extended opcode encoding, 247


label entry, 97                              ole entry format encoding, 247

language attribute, 72                       standard opcode encoding, 246

language attribute (Version 5), 216      line number program, 166

language attribute, encoding, 239            extended opcodes, 170

language name attribute, 63, 116, 221        special opcodes, 166

language name encoding, 239                  standard opcodes, 168

language version attribute, 221          line_base, 160, 167, 168, 341, 342

language version encoding schemes,       line_range, 160, 167, 168, 341, 342

       66                                lineptr, see also lineptr class, 289

LEB128, 158, 161, 169, 222, 227, 230     lineptr class, 24, 72, 216, 221, 223, *
 *228,

   examples, 231                                229, 294

   signed, 29, 42, 168, 182, 184~186,    linkage name attribute, 59, 219

       215, 231                          list of discriminant values, 20

   signed, decoding of, 298              Little-Endian Base 128, see LEB128

   signed, encoding as, 230, 297         little-endian encoding, see endian

   unsigned, 27~29, 35, 37, 41, 43,             attribute

       159, 168, 170, 171, 177, 182,     local_type_unit_count, 149, 150

       184~187, 211, 215, 222~225,       location, 123

       230, 231, 248, 259, 260           location attribute, 36, 52, 98, 102, 1*
 *04,

   unsigned, decoding of, 297                   216, 353

   unsigned, encoding as, 230, 296           and abstract instance, 87

LEB128 encoding                          location description, 39, see also

   algorithms, 296                              DWARF expression, 121, 123,

   examples, 231                                125, 132, 135, 137

length, 181~183                              composite, 40

level-88 condition, COBOL, 129               empty, 40

lexical block, 39, 96, 98                    implicit, 41

lexical block entry, 96                      memory, 40

lexical blocks, 57                           simple, 40

line, 156, 158                               single, 39

line containing call site of                 use in location list, 39

       non-inlined call, 18              location list, 39, 63, 83, 235, 260, 2*
 *90,

line number information, see also               294

       statement list attribute          location list attribute, 218

line number information for unit, 22     location list base attribute, 220

line number of inlined subroutine        location lists base, 21

       call, 18                          location of uplevel frame, 22
                                         location table base attribute, 69



July 15 2024               ***WORKING DRAFT***                       Page 479
                                    Index



locdesc class, 24, 39, 58, 216~218, 220, memory location description, 40

       224, 229                          minimum_instruction_length, 160,

loclist, see also loclist class                 167, 169, 341

loclist class, 24, 39, 44, 216~218, 221, MIPS instruction set architecture, 154

       224, 228, 229, 290, 294           Modula-2, 48, 64, 74, 97

loclistsptr, see also loclistsptr class      deonition module, 74

loclistsptr class, 24, 69, 220, 221, 224,Modula-3, 64

       228, 229                          module entry, 74

lookup                                   module priority, 21

   by address, 153                       Mojo Language, 64

   by name, 141                          Move Language, 64

low PC attribute, 53, 63, 74, 82, 87,    mutable attribute, 123, 219

       96~98, 216, 353                   mutable property of member data, 21

   and abstract instance, 87

low user attribute encoding, 221         name attribute, 52, 59, 63, 67, 74, 76,

lower bound attribute, 134, 217                 90, 97, 101, 104~106, 112, 113,

   default, 134, 239                            115, 118, 120, 122, 129~133,

lower bound of subrange, 21                     135~137, 216, 257~259
                                         name index, 141

macptr, see also macptr class, 289           case folding, 150

macptr class, 24, 220, 221, 224, 228,    name list item attribute, 218

       229, 294                          name of declaration, 21

macro formal parameter list, 175         name_count, 149~151

macro information, 171                   namelist entry, 105

macro information attribute, 65, 220     namelist item, 21

macro information entry types            namelist item attribute, 105

   encoding, 248                         namelist item entry, 105

macro preprocessor information, 21       names

main or starting subprogram, 21              identioer, 52

main subprogram attribute, 68, 79,           mangled, 58

       219                               namespace (C++), 74

mangled names, 52, 58, 92                    alias, 76

maximum_operations_per_instruction,          example, 333

       160, 167, 341                         global, 75

MD5, 165, 257, 260, 261, 403, 410            unnamed, 75

member entry (data), 122, 123                using declaration, 75, 76, 78

   as discriminant, 127                      using directive, 77

member function entry, 124               namespace alias, 20

member function example, 337             namespace declaration entry, 75

member location for pointer to           namespace extension entry, 75

       member type, 22                   namespace using declaration, 20



July 15 2024               ***WORKING DRAFT***                       Page 480
                                    Index



namespace using directive, 20            ordering attribute, 104, 216

nested abstract instance, 87             out-of-line instance, 91, see also

nested concrete inline instance, 88             concrete out-of-line instance

non-constant parameter AEag, 22          out-of-line instances of inline

non-contiguous address ranges, 54               subprograms, 17

non-contiguous range of code

       addresses, 21                     package oles, 197

non-default alignment, 17                packed qualioed type entry, 113

non-deoning declaration, 50              packed type entry, 113

noreturn attribute, 21, 80, 220          padding, 148, 182, 183, 199, 253

Number of lanes attribute, 21            parameter, see this parameter, see

number of lanes attribute, 221                  formal parameter entry, see

numerator of rational scale factor, 22,         macro formal parameter list,

       220                                      see optional parameter
                                                attribute, see template type

object (this, self) pointer of member           parameter entry, see template

       function, 21                             value parameter entry, see

object ole linkage name of an entity,           unspecioed parameters entry,

       21                                       see variable parameter

object pointer attribute, 125, 219              attribute

Objective C, 64, 125                     parameter entry, 18

Objective C++, 65                        partial compilation unit, 62, 63

objects or types that are not actually   Pascal, 65, 97, 113, 118, 133, 136, 32*
 *8,

       declared in the source, 17               329, 331

OCaml, 65                                Pascal example, 323

Odin, 65                                 path name of compilation source, 21

offset_entry_count, 254, 255             picture string attribute, 219

offset_size_flag, 172, 174, 177,         picture string for numeric string

       199~201, 382, 383                        type, 21

op_index, 156~158, 160, 166~169, 171     PL/I, 65

opcode_base, 160, 161, 167, 341          pointer or reference types, 17

opcode_operands_table, 172, 173          pointer qualioed type entry, 113

opcode_operands_table_flag, 172,         pointer to member, 135

       382, 383                          pointer to member entry, 135

OpenCL C, 9, 65, 165                     pointer to member type, 135, 136

OpenCL C++, 65                           pointer to member type entry, 135

OpenGL ES Shading Language, 64           pointer type entry, 114

OpenGL Shading Language, 64              previous namespace extension or

operation advance, 167, 168, 342                original namespace, 20

operation pointer, 157, 160, 166, 167    primitive data types of compilation

optional parameter, 20, 103                     unit, 17



July 15 2024               ***WORKING DRAFT***                       Page 481
                                    Index



priority attribute, 74, 218              reference type, 114

producer attribute, 67, 217              reference type entry, 113

producer extensibility, see              reference type entry, lvalue, see

       extensibility                            reference type entry

producer id, 191                         reference type entry, rvalue, see

producer-specioc extensions, see                rvalue reference type entry

       extensibility                     renamed declaration, see imported

PROGRAM statement, 68                           declaration entry

programming language name, 21            RenderScript, 65

programming language version, 21         reserved target address, 26

prologue, 178, 179                       reserved values

prologue end, 169, 170                       error, 191

prologue_end, 157, 158, 166, 168, 169        initial length, 191

prologue_epilogue, 157, 158, 168,        restrict qualioed type, 113

       170, 171                          restricted type entry, 113

prototyped attribute, 80, 131, 217       return address attribute, 83, 217

pure attribute, 80, 219                      and abstract instance, 87

pure property of a subroutine, 21        return address from a call, 18

Python, 65                               return type of subroutine, 82

                                         return_address_register, 182
range list, 63, 99, 100, 251, 252, 290,  rnglist, see also rnglist class

       294                               rnglist class, 24, 54, 217, 219, 221, *
 *225,

range list base                                 229, 290, 294

   encoding, 220                         rnglistsptr, see also rnglistsptr class

ranges attribute, 53, 54, 63, 74, 82, 87,rnglistsptr class, 24, 69, 99, 220, 22*
 *1,

       96~98, 219                               225, 228, 229

   and abstract instance, 87             Ruby, 65

ranges lists, 22                         Rust, 65, 112, 331, 332

ranges table base attribute, 69          rvalue reference qualioed type entry,

rank attribute, 219                             113

recursive attribute, 80, 219             rvalue reference type entry, 113

recursive property of a subroutine, 21   rvaluereference attribute, 220

reduced scope of declaration, 22

reference, see also reference class, 51, sbyte, 140, 160, 257

       57, 68, 75~78, 83, 85, 102, 105,  scalar coarray, see coarray

       113, 115, 119, 125, 127, 132,     scale factor for oxed-point type, 22

       135                               scaled encodings, 109

reference attribute, 220                     binary, 109

reference class, 24, 92, 94, 103, 104,       composition of, 110

       132, 216~220, 225, 229, 244           decimal, 109

reference qualioed type entry, 113           AEoating-point, 110



July 15 2024               ***WORKING DRAFT***                       Page 482
                                    Index



   rational, 110                         special opcodes in line number

section group, 391~398, 400, 402, 413,          program, 166

       414                               specialized .debug_line.dwo section,

   name, 393                                    428

section length, 140                      specialized line number table, 72,

   use in headers, 205                          195, 417

section ooeset, 11, 140, 208~211, 245    speciocation attribute, 75, 87, 119,

   alignment of, 256                            125, 126, 218

   in .debug.aranges header, 153,        split DWARF object ole, 69, 70, 72,

       245                                      143, 147, 194, 197, 221, 287,

   in .debug.info header, 208~211               416, 421, 424, 425, 427

   in class lineptr value, 223               example, 421

   in class loclist value, 224               object ole name, 20

   in class loclistsptr, 224             split DWARF object ole name

   in class macptr value, 224                encoding, 220

   in class reference value, 225         split DWARF object ole name

   in class rnglist value, 225                  attribute, 69

   in class rnglistsptr, 225             split type unit, 72

   in class string value, 227            standard opcodes in line number

   in FDE header, 182                           program, 168

   in macro information attribute, 65    standard_opcode_lengths, 161, 341

   in statement list attribute, 65       start scope attribute, 99, 217

   use in headers, 205                       and abstract instance, 87

section_count, 199                       statement list attribute, 65, 72, 216

self pointer attribute, see object       static link attribute, 218

       pointer attribute                 stride attribute, see bit stride attri*
 *bute

set type entry, 133                             or byte stride attribute

shared qualioed type entry, 113          string, see also string class

sibling attribute, 25, 51, 216           string class, 24, 52, 92, 103, 216, 21*
 *7,

signature attribute, 219                        219, 220, 226, 228~230

signed LEB128, see LEB128, signed        string length attribute, 132, 217

SIMD Vectorization, 84                       size of length, 219

simple location description, 40              size of length data, 132

single location description, 39          string length of string type, 22

size of an address, 26, see also             size of, 22

       address_size, 27, 30, 31, 132,    string length size attribute, 132

       153, 159, 210, 245                string ooeset section attribute, 68

skeleton compilation unit, 69            string ooesets attribute, 220

SLEB128, 230                             string ooesets base attribute, 73

slot_count, 199                          string ooesets information, 289

small attribute, 110, 219                string ooesets information for unit, 22



July 15 2024               ***WORKING DRAFT***                       Page 483
                                    Index



string type entry, 132                   template alias example, 364, 365

strooesetsptr, see also strooesetsptr classtemplate alias example 1, 365

strooesetsptr class, 25, 68, 73, 220, 221,template alias example 2, 366

       228, 229                          template instantiation, 59

structure type entry, 118                    and special compilation unit, 127

subprogram called, 18                        function, 85

subprogram entry, 78, 79                 template type parameter entry, 59

   as member function, 124               template value parameter, 19

   use for template instantiation, 85    template value parameter entry, 59

   use in inlined subprogram, 86         Tensor (array) type, 22

subrange stride (dimension of array      tensor attribute, 221

       type), 18                         this parameter, 49, 92

subrange type entry, 133                 this pointer attribute, see object

   as array dimension, 116                      pointer attribute

subroutine call site summary             thread scaled attribute, 219

       attributes, 81                    thread-local storage, 32

subroutine entry, 78                     threads scaled attribute, 134

subroutine formal parameters, 82         thrown exception, see thrown type

subroutine frame base address, 20               entry

subroutine or subroutine type, 17        thrown type entry, 85

subroutine prototype, 21                 trampoline (subprogram) entry, 92

subroutine return address save           trampoline attribute, 92, 219

       location, 22                      try block, 98

subroutine type entry, 131               try block entry, 98

sup_checksum, 202                        try/catch blocks, 57

sup_checksum_len, 202                    type

sup.olename, 202                             of call site, 22

supplementary object ole, 8, 17, 24,         of declaration, 22

       174, 177, 202, 203, 226, 227,         of string type components, 22

       286, 287                              of subroutine return, 22

Swift, 65                                type attribute, 48, 59, 82, 85, 98, 11*
 *3,

SYCL, 65                                        115, 116, 121, 122, 127,

                                                129~131, 133~136, 218
tag, 15                                      of call site entry, 95

tag names, see debugging                     of string type entry, 132

       information entry                 type modioer, see atomic type entry,

   list of, 23                                  see constant type entry, see

target address, 183                             packed type entry, see pointer

   reserved, 26                                 type entry, see reference type

target subroutine of trampoline, 22             entry, see restricted type entr*
 *y,

template alias entry, 137



July 15 2024               ***WORKING DRAFT***                       Page 484
                                    Index



       see shared type entry, see        unit_length, 148, 153, 159, 208~210,

       volatile type entry                      245, 252~255, 341

type modioer entry, 113                  unit_type, 9, 207~210

type safe enumeration deonition, 20      unnamed namespace, see namespace

type safe enumeration types, 130                (C++), unnamed

type signature, 22, 24, 119, 210, 226,   unsigned LEB128, see LEB128,

       257, 402, 403                            unsigned

   computation, 257                      unspecioed parameters entry, 83, 131

   computation grammar, 410                  in catch block, 98

   example computation, 402              unspecioed type entry, 112

type unit, 72, see also compilation      unwind, see virtual unwind

       unit, 73, 119, 207, 210, 211,     UPC, 22, 65, 113, 114, 134

       226, 257, 260, 261, 403, 414      uplevel address, see static link

   specialized .debug_line.dwo                  attribute

       section in, 428                   upper bound attribute, 134, 217

type unit entry, 72                          default unknown, 134

type unit set, 198                       upper bound of subrange, 22

type unit signature, 70, 434             use location attribute, 135

type-safe enumeration, 361               use statement, see Fortran, use

type_offset, 211                                statement

type_signature, 210                      use UTF8 attribute, 22, 68, 218, 227

typedef entry, 115                       using declaration, see namespace

                                                (C++), using declaration
ubyte, 140, 149, 153, 158~161, 166,      using directive, see namespace (C++),

       172, 181~184, 202, 208~210,              using directive

       245, 253~255, 257                 UTF character, 108

UCS character, 108                       UTF-8, 12, 22, 68, 181, 218, 227

uhalf, 140, 148, 153, 159, 169, 172, 184,uword, 140, 149, 184, 199, 254, 255,

       199, 202, 208~210, 245,                  257

       252~255, 257

ULEB128, 173, 174, 230                   vallist class, 24, 38, 221, 228, 229

unallocated variable, 102                value list, 290, 294

Unicode, 109, 150, 151, 227, 360, see    value lists, 38

       also UTF-8                        value pointed to by an argument, 18

Unioed Parallel C, see UPC               variable entry, 101

union type entry, 118                    variable length data, see LEB128

unit, see compilation unit               variable parameter attribute, 102, 218

unit containing main or starting         variant entry, 128

       subprogram, 21                    variant part entry, 127

unit header unit type encodings, 207     version, 148, 153, 159, 181, 199, 202,

unit_count, 199                                 208~210, 245, 252~255, 341



July 15 2024               ***WORKING DRAFT***                       Page 485
                                    Index



version number

   address lookup table, 153

   address range table, 245

   address table, 253

   call frame information, 181, 250

   compilation unit, 208, 209

   CU index information, 199

   line number information, 159, 246

   location list table, 255

   macro information, 248

   name index table, 148, 244

   range list table, 254

   string ooesets table, 252

   summary by section, 440

   TU index information, 199

   type unit, 210

virtual function vtable slot, 23

virtual unwind, 178

virtuality attribute, 49, 218

virtuality of member function or base

       class, 23

visibility attribute, 48, 217

visibility of declaration, 23

void type, see unspecioed type entry

volatile qualioed type entry, 113

vtable element location attribute, 125,

       218

VVMM language version encoding

       scheme, 64~66

VVMMPP language version

       encoding scheme, 64~66


with statement entry, 97


YYYY language version encoding

       scheme, 64~66

YYYYMM language version

       encoding scheme, 64~66

YYYYRR language version encoding

       scheme, 65, 66


Zig, 65



July 15 2024               ***WORKING DRAFT***                       Page 486
